import sqlite3
import pandas as pd
from datetime import datetime
import matplotlib.pyplot as plt
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, WebAppInfo
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import os
import json
import tempfile
import re
import io
import subprocess
import sys
from PIL import Image
import speech_recognition as sr

import numpy as np
import psycopg2
from urllib.parse import urlparse
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ===== –ù–ê–°–¢–†–û–ô–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• =====
def get_db_connection():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (PostgreSQL –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ, SQLite –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)"""
    if 'DATABASE_URL' in os.environ:
        # Production - PostgreSQL
        try:
            database_url = os.environ['DATABASE_URL']
            parsed_url = urlparse(database_url)
            conn = psycopg2.connect(
                database=parsed_url.path[1:],
                user=parsed_url.username,
                password=parsed_url.password,
                host=parsed_url.hostname,
                port=parsed_url.port,
                sslmode='require'
            )
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ PostgreSQL")
            return conn
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
            # Fallback to SQLite
            return sqlite3.connect('finance.db', check_same_thread=False)
    else:
        # Development - SQLite
        return sqlite3.connect('finance.db', check_same_thread=False)

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤"""
    conn = get_db_connection()
    
    if isinstance(conn, sqlite3.Connection):
        # SQLite
        c = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤
        c.execute('''CREATE TABLE IF NOT EXISTS financial_spaces
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      name TEXT NOT NULL,
                      description TEXT,
                      space_type TEXT DEFAULT 'personal', -- personal, private, public
                      created_by INTEGER,
                      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                      invite_code TEXT UNIQUE,
                      is_active BOOLEAN DEFAULT TRUE,
                      privacy_settings TEXT DEFAULT '{"view_all": true}')''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤
        c.execute('''CREATE TABLE IF NOT EXISTS space_members
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      space_id INTEGER,
                      user_id INTEGER,
                      user_name TEXT,
                      role TEXT DEFAULT 'member', -- owner, admin, member
                      joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                      FOREIGN KEY (space_id) REFERENCES financial_spaces (id))''')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É expenses - –¥–æ–±–∞–≤–ª—è–µ–º space_id –∏ visibility
        c.execute('''CREATE TABLE IF NOT EXISTS expenses_new
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      user_id INTEGER, 
                      user_name TEXT,
                      space_id INTEGER,
                      amount REAL, 
                      category TEXT, 
                      description TEXT, 
                      date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                      visibility TEXT DEFAULT 'full', -- full, anonymous, stats_only
                      FOREIGN KEY (space_id) REFERENCES financial_spaces (id))''')
        
        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã (–¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
        try:
            c.execute('SELECT name FROM sqlite_master WHERE type="table" AND name="expenses"')
            if c.fetchone():
                c.execute('''INSERT INTO expenses_new (id, user_id, user_name, amount, category, description, date)
                             SELECT id, user_id, user_name, amount, category, description, date FROM expenses''')
                c.execute('DROP TABLE expenses')
        except:
            pass
        
        c.execute('ALTER TABLE expenses_new RENAME TO expenses')
        
    else:
        # PostgreSQL
        c = conn.cursor()
        
        c.execute('''CREATE TABLE IF NOT EXISTS financial_spaces
                     (id SERIAL PRIMARY KEY,
                      name TEXT NOT NULL,
                      description TEXT,
                      space_type TEXT DEFAULT 'personal',
                      created_by BIGINT,
                      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                      invite_code TEXT UNIQUE,
                      is_active BOOLEAN DEFAULT TRUE,
                      privacy_settings TEXT DEFAULT '{"view_all": true}')''')
        
        c.execute('''CREATE TABLE IF NOT EXISTS space_members
                     (id SERIAL PRIMARY KEY,
                      space_id INTEGER REFERENCES financial_spaces(id),
                      user_id BIGINT,
                      user_name TEXT,
                      role TEXT DEFAULT 'member',
                      joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü–µ expenses
        try:
            c.execute('ALTER TABLE expenses ADD COLUMN space_id INTEGER REFERENCES financial_spaces(id)')
        except:
            pass
        
        try:
            c.execute('ALTER TABLE expenses ADD COLUMN visibility TEXT DEFAULT \'full\'')
        except:
            pass
    
    conn.commit()
    conn.close()
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# ===== TESSERACT OCR –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
def check_tesseract_installation():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Tesseract"""
    try:
        result = subprocess.run(['tesseract', '--version'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            logger.info("‚úÖ Tesseract –¥–æ—Å—Ç—É–ø–µ–Ω –≤ PATH")
            return True
        else:
            logger.warning("‚ùå Tesseract –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH")
            return False
    except FileNotFoundError:
        logger.warning("‚ùå Tesseract –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ PATH")
        return False

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é Tesseract OCR...")
TESSERACT_AVAILABLE = check_tesseract_installation()

if TESSERACT_AVAILABLE:
    try:
        import pytesseract
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–∏ –∫ Tesseract (–¥–ª—è Windows)
        if os.name == 'nt':  # Windows
            possible_paths = [
                r'C:\Program Files\Tesseract-OCR\tesseract.exe',
                r'C:\Users\*\AppData\Local\Programs\Tesseract-OCR\tesseract.exe'
            ]
            for path in possible_paths:
                if os.path.exists(path):
                    pytesseract.pytesseract.tesseract_cmd = path
                    break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        pytesseract.get_tesseract_version()
        logger.info("‚úÖ Tesseract OCR –¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception as e:
        TESSERACT_AVAILABLE = False
        logger.warning(f"‚ùå Tesseract OCR –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
else:
    logger.warning("‚ö†Ô∏è Tesseract –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–µ–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")

# ===== –ì–û–õ–û–°–û–í–û–ï –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–ï =====
class VoiceRecognizer:
    def __init__(self):
        self.recognizer = sr.Recognizer()
        self.recognizer.energy_threshold = 300
        self.recognizer.pause_threshold = 0.8
        self.recognizer.dynamic_energy_threshold = True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Google Speech Recognition
        self.google_available = True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–æ—Å—Ç—É–ø–µ–Ω
        logger.info("‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
    
    async def transcribe_audio(self, audio_path):
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª"""
        logger.info(f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞—é –∞—É–¥–∏–æ: {audio_path}")
        
        try:
            with sr.AudioFile(audio_path) as source:
                # –£–±–∏—Ä–∞–µ–º —à—É–º—ã –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                self.recognizer.adjust_for_ambient_noise(source, duration=0.5)
                audio = self.recognizer.record(source)
                
                # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —á–µ—Ä–µ–∑ Google
                try:
                    text = self.recognizer.recognize_google(audio, language='ru-RU')
                    logger.info(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text}")
                    return text
                except sr.UnknownValueError:
                    logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å")
                    return None
                except sr.RequestError as e:
                    logger.warning(f"‚ùå –û—à–∏–±–∫–∞ Google Speech Recognition: {e}")
                    return None
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {e}")
            return None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å –≥–æ–ª–æ—Å–∞
voice_recognizer = VoiceRecognizer()

# ===== –ü–†–û–°–¢–û–ô ML –ö–õ–ê–°–°–ò–§–ò–ö–ê–¢–û–† =====
class SimpleExpenseClassifier:
    def __init__(self):
        self.categories = ['–ü—Ä–æ–¥—É–∫—Ç—ã', '–ö–∞—Ñ–µ', '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–î–æ–º', '–û–¥–µ–∂–¥–∞', '–ó–¥–æ—Ä–æ–≤—å–µ', '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', '–ü–æ–¥–ø–∏—Å–∫–∏', '–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã', '–î—Ä—É–≥–æ–µ']
        logger.info("‚úÖ –ü—Ä–æ—Å—Ç–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def predict_category(self, text):
        """–ü—Ä–æ—Å—Ç–æ–π rule-based –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        if not text:
            return "–î—Ä—É–≥–æ–µ", 0.0
            
        text_lower = text.lower()
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        keyword_categories = {
            '–ü—Ä–æ–¥—É–∫—Ç—ã': ['–ø—Ä–æ–¥—É–∫—Ç', '–µ–¥–∞', '–º–∞–≥–∞–∑–∏–Ω', '—Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç', '–ø–æ–∫—É–ø–∫', '–º–æ–ª–æ–∫–æ', '—Ö–ª–µ–±', '–º—è—Å–æ', '—Ä—ã–±–∞', '–æ–≤–æ—â', '—Ñ—Ä—É–∫—Ç'],
            '–ö–∞—Ñ–µ': ['–∫–∞—Ñ–µ', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω', '–∫–æ—Ñ–µ', '–æ–±–µ–¥', '—É–∂–∏–Ω', '–∑–∞–≤—Ç—Ä–∞–∫', '—Å—Ç–æ–ª–æ–≤', '–±—É—Ä–≥–µ—Ä', '–ø–∏—Ü—Ü', '—Å—É—à–∏'],
            '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç': ['—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '—Ç–∞–∫—Å–∏', '–º–µ—Ç—Ä–æ', '–∞–≤—Ç–æ–±—É—Å', '–±–µ–Ω–∑–∏–Ω', '–∑–∞–ø—Ä–∞–≤–∫', '–ø–∞—Ä–∫–æ–≤–∫', '—Ç–∞–∫—Å–∞', 'uber', '—è–Ω–¥–µ–∫—Å.—Ç–∞–∫—Å–∏'],
            '–î–æ–º': ['–¥–æ–º', '–∫–≤–∞—Ä—Ç–∏—Ä', '–∫–æ–º–º—É–Ω–∞–ª', '–∞—Ä–µ–Ω–¥', '—Ä–µ–º–æ–Ω—Ç', '–∏–ø–æ—Ç–µ–∫', '–º–µ–±–µ–ª—å', '–±—ã—Ç–æ–≤', '—Ç–µ—Ö–Ω–∏–∫'],
            '–û–¥–µ–∂–¥–∞': ['–æ–¥–µ–∂–¥', '–æ–±—É–≤', '—à–æ–ø–∏–Ω–≥', '–≤–µ—â', '–º–∞–≥–∞–∑–∏–Ω', '–±—Ä–µ–Ω–¥', '–∫—É—Ä—Ç–∫', '–¥–∂–∏–Ω—Å', '—Ñ—É—Ç–±–æ–ª–∫'],
            '–ó–¥–æ—Ä–æ–≤—å–µ': ['–∑–¥–æ—Ä–æ–≤', '–∞–ø—Ç–µ–∫', '–≤—Ä–∞—á', '–ª–µ–∫–∞—Ä—Å—Ç–≤', '–±–æ–ª—å–Ω–∏—á', '—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥', '–ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫', '–∞–Ω–∞–ª–∏–∑'],
            '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': ['—Ä–∞–∑–≤–ª–µ—á–µ–Ω', '–∫–∏–Ω–æ', '–∫–æ–Ω—Ü–µ—Ä—Ç', '—Ç–µ–∞—Ç—Ä', '–∫–ª—É–±', '–±–∞—Ä', '–¥–∏—Å–∫–æ—Ç–µ–∫', '–∫–∞—Ä–∞–æ–∫–µ', '–±–∏–ª–µ—Ç'],
            '–ü–æ–¥–ø–∏—Å–∫–∏': ['–ø–æ–¥–ø–∏—Å–∫', '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç', '—Ç–µ–ª–µ—Ñ–æ–Ω', '—Å–≤—è–∑', '–º–æ–±–∏–ª—å–Ω', '—é—Ç—É–±', '–Ω–µ—Ç—Ñ–ª–∏–∫—Å', '—Å–ø–æ—Ç–∏—Ñ–∞–π', '—è–Ω–¥–µ–∫—Å.–ø–ª—é—Å'],
            '–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã': ['wildberries', '–æ–∑–æ–Ω', '—è–Ω–¥–µ–∫—Å –º–∞—Ä–∫–µ—Ç', '–∞–ª–∏—ç–∫—Å–ø—Ä–µ—Å—Å', '–º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å', '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω'],
        }
        
        scores = {}
        for category, keywords in keyword_categories.items():
            score = sum(1 for keyword in keywords if keyword in text_lower)
            scores[category] = score
        
        best_category = max(scores, key=scores.get)
        confidence = scores[best_category] / max(1, len(text_lower.split()))
        
        return best_category if scores[best_category] > 0 else "–î—Ä—É–≥–æ–µ", min(confidence, 1.0)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
classifier = SimpleExpenseClassifier()

# ===== –£–õ–£–ß–®–ï–ù–ù–û–ï –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–ï –ß–ï–ö–û–í =====
def parse_receipt_text(text):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —á–µ–∫–∞"""
    logger.info("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—Å—Ç —á–µ–∫–∞...")
    
    lines = text.split('\n')
    receipt_data = {
        'total': 0,
        'store': None,
        'date': None,
        'raw_text': text
    }
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—É–º–º
    total_patterns = [
        r'(?:–∏—Ç–æ–≥–æ|–≤—Å–µ–≥–æ|—Å—É–º–º–∞|–∫\s*–æ–ø–ª–∞—Ç–µ|total|–∏—Ç–æ–≥)[^\d]*(\d+[.,]\d+)',
        r'(\d+[.,]\d+)\s*(?:—Ä—É–±|—Ä|‚ÇΩ|rur|rub|r|—Ä—É–±–ª–µ–π)',
        r'(?:—á–µ–∫|—Å—É–º–º–∞)[^\d]*(\d+[.,]\d+)',
        r'(?:—Ü–µ–Ω–∞|—Å—Ç–æ–∏–º–æ—Å—Ç—å)[^\d]*(\d+[.,]\d+)',
    ]
    
    # –ü–æ–∏—Å–∫ –º–∞–≥–∞–∑–∏–Ω–∞
    store_patterns = [
        r'([–ê-–Ø–Å][–∞-—è—ë]+\s*[–ê-–Ø–Å]?[–∞-—è—ë]*\s*(?:–º–∞–≥–∞–∑–∏–Ω|—Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç|—Ç–æ—Ä–≥–æ–≤—ã–π|—Ü–µ–Ω—Ç—Ä))',
        r'([–ê-–Ø–Å][–∞-—è—ë]+\s*[–ê-–Ø–Å]?[–∞-—è—ë]*)',
    ]
    
    # –ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
    for line in lines:
        line_clean = re.sub(r'[^\w\s\d.,]', '', line.lower())
        
        # –ü–æ–∏—Å–∫ —Å—É–º–º—ã
        for pattern in total_patterns:
            matches = re.findall(pattern, line_clean)
            if matches:
                try:
                    amount_str = matches[-1].replace(',', '.')
                    amount_str = re.sub(r'[^\d.]', '', amount_str)
                    amount = float(amount_str)
                    if 1 <= amount <= 100000 and amount > receipt_data['total']:
                        receipt_data['total'] = amount
                        logger.info(f"üí∞ –ù–∞–π–¥–µ–Ω–∞ —Å—É–º–º–∞: {amount}")
                        break
                except ValueError:
                    continue
        
        # –ü–æ–∏—Å–∫ –º–∞–≥–∞–∑–∏–Ω–∞
        if not receipt_data['store']:
            for pattern in store_patterns:
                matches = re.findall(pattern, line)
                if matches:
                    receipt_data['store'] = matches[0]
                    logger.info(f"üè™ –ù–∞–π–¥–µ–Ω –º–∞–≥–∞–∑–∏–Ω: {receipt_data['store']}")
                    break
    
    return receipt_data

async def process_receipt_photo(image_bytes):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ —á–µ–∫–∞ —á–µ—Ä–µ–∑ Tesseract"""
    if not TESSERACT_AVAILABLE:
        return None
    
    try:
        logger.info("üîç –†–∞—Å–ø–æ–∑–Ω–∞—é —á–µ–∫ —á–µ—Ä–µ–∑ Tesseract...")
        
        image = Image.open(io.BytesIO(image_bytes))
        
        # –£–ª—É—á—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        width, height = image.size
        if width < 1000 or height < 1000:
            new_size = (width * 2, height * 2)
            image = image.resize(new_size, Image.Resampling.LANCZOS)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å
        image = image.convert('L')  # –í grayscale
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        from PIL import ImageEnhance
        enhancer = ImageEnhance.Contrast(image)
        image = enhancer.enhance(2.0)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç
        text = pytesseract.image_to_string(image, lang='rus+eng')
        
        if not text.strip():
            logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç")
            return None
        
        logger.info(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(text)}")
        logger.info(f"üìÑ –¢–µ–∫—Å—Ç —á–µ–∫–∞: {text[:200]}...")
        return parse_receipt_text(text)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ–∫–∞: {e}")
        return None

# ===== –°–ò–°–¢–ï–ú–ê –ü–†–û–°–¢–†–ê–ù–°–¢–í =====
def create_personal_space(user_id, user_name):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = get_db_connection()
    
    try:
        if isinstance(conn, sqlite3.Connection):
            c = conn.cursor()
            c.execute('''INSERT INTO financial_spaces (name, description, space_type, created_by, invite_code)
                         VALUES (?, ?, ?, ?, ?)''', 
                     (f"–õ–∏—á–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ {user_name}", "–í–∞—à–µ –ª–∏—á–Ω–æ–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ", "personal", user_id, f"PERSONAL_{user_id}"))
            space_id = c.lastrowid
            
            c.execute('''INSERT INTO space_members (space_id, user_id, user_name, role)
                         VALUES (?, ?, ?, ?)''', (space_id, user_id, user_name, 'owner'))
        else:
            c = conn.cursor()
            c.execute('''INSERT INTO financial_spaces (name, description, space_type, created_by, invite_code)
                         VALUES (%s, %s, %s, %s, %s) RETURNING id''', 
                     (f"–õ–∏—á–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ {user_name}", "–í–∞—à–µ –ª–∏—á–Ω–æ–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ", "personal", user_id, f"PERSONAL_{user_id}"))
            space_id = c.fetchone()[0]
            
            c.execute('''INSERT INTO space_members (space_id, user_id, user_name, role)
                         VALUES (%s, %s, %s, %s)''', (space_id, user_id, user_name, 'owner'))
        
        conn.commit()
        return space_id
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞: {e}")
        return None
    finally:
        conn.close()

def create_financial_space(name, description, space_type, created_by, created_by_name, privacy_settings=None):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"""
    conn = get_db_connection()
    
    if space_type == 'personal':
        return create_personal_space(created_by, created_by_name)
    
    invite_code = generate_invite_code()
    
    if privacy_settings is None:
        if space_type == 'private':
            privacy_settings = '{"view_all": true}'
        else:  # public
            privacy_settings = '{"view_all": false, "show_stats_only": true}'
    
    try:
        if isinstance(conn, sqlite3.Connection):
            c = conn.cursor()
            c.execute('''INSERT INTO financial_spaces (name, description, space_type, created_by, invite_code, privacy_settings)
                         VALUES (?, ?, ?, ?, ?, ?)''', 
                     (name, description, space_type, created_by, invite_code, privacy_settings))
            space_id = c.lastrowid
            
            c.execute('''INSERT INTO space_members (space_id, user_id, user_name, role)
                         VALUES (?, ?, ?, ?)''', (space_id, created_by, created_by_name, 'owner'))
        else:
            c = conn.cursor()
            c.execute('''INSERT INTO financial_spaces (name, description, space_type, created_by, invite_code, privacy_settings)
                         VALUES (%s, %s, %s, %s, %s, %s) RETURNING id''', 
                     (name, description, space_type, created_by, invite_code, privacy_settings))
            space_id = c.fetchone()[0]
            
            c.execute('''INSERT INTO space_members (space_id, user_id, user_name, role)
                         VALUES (%s, %s, %s, %s)''', (space_id, created_by, created_by_name, 'owner'))
        
        conn.commit()
        return space_id, invite_code
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞: {e}")
        return None, None
    finally:
        conn.close()

def generate_invite_code():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    import random
    import string
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))

def join_financial_space(invite_code, user_id, user_name):
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É"""
    conn = get_db_connection()
    
    try:
        if isinstance(conn, sqlite3.Connection):
            c = conn.cursor()
            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ø–æ –∫–æ–¥—É
            c.execute('SELECT id, space_type FROM financial_spaces WHERE invite_code = ? AND is_active = TRUE', (invite_code,))
            result = c.fetchone()
            
            if not result:
                return False, "–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –∫–æ–¥ –Ω–µ–≤–µ—Ä–µ–Ω"
            
            space_id, space_type = result
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            c.execute('SELECT id FROM space_members WHERE space_id = ? AND user_id = ?', (space_id, user_id))
            if c.fetchone():
                return False, "–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            c.execute('''INSERT INTO space_members (space_id, user_id, user_name, role)
                         VALUES (?, ?, ?, ?)''', (space_id, user_id, user_name, 'member'))
        else:
            c = conn.cursor()
            c.execute('SELECT id, space_type FROM financial_spaces WHERE invite_code = %s AND is_active = TRUE', (invite_code,))
            result = c.fetchone()
            
            if not result:
                return False, "–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –∫–æ–¥ –Ω–µ–≤–µ—Ä–µ–Ω"
            
            space_id, space_type = result
            
            c.execute('SELECT id FROM space_members WHERE space_id = %s AND user_id = %s', (space_id, user_id))
            if c.fetchone():
                return False, "–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ"
            
            c.execute('''INSERT INTO space_members (space_id, user_id, user_name, role)
                         VALUES (%s, %s, %s, %s)''', (space_id, user_id, user_name, 'member'))
        
        conn.commit()
        
        space_type_name = {
            'personal': '–ª–∏—á–Ω–æ–µ',
            'private': '–∑–∞–∫—Ä—ã—Ç–æ–µ',
            'public': '–ø—É–±–ª–∏—á–Ω–æ–µ'
        }.get(space_type, space_type)
        
        return True, f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ {space_type_name} –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É"
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É: {e}")
        return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏"
    finally:
        conn.close()

def get_user_spaces(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = get_db_connection()
    
    try:
        if isinstance(conn, sqlite3.Connection):
            query = '''SELECT fs.id, fs.name, fs.description, fs.space_type, fs.invite_code, sm.role
                       FROM financial_spaces fs
                       JOIN space_members sm ON fs.id = sm.space_id
                       WHERE sm.user_id = ? AND fs.is_active = TRUE
                       ORDER BY 
                         CASE fs.space_type 
                           WHEN 'personal' THEN 1 
                           WHEN 'private' THEN 2 
                           ELSE 3 
                         END, fs.created_at DESC'''
            df = pd.read_sql_query(query, conn, params=(user_id,))
        else:
            query = '''SELECT fs.id, fs.name, fs.description, fs.space_type, fs.invite_code, sm.role
                       FROM financial_spaces fs
                       JOIN space_members sm ON fs.id = sm.space_id
                       WHERE sm.user_id = %s AND fs.is_active = TRUE
                       ORDER BY 
                         CASE fs.space_type 
                           WHEN 'personal' THEN 1 
                           WHEN 'private' THEN 2 
                           ELSE 3 
                         END, fs.created_at DESC'''
            df = pd.read_sql_query(query, conn, params=(user_id,))
        
        return df
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤: {e}")
        return pd.DataFrame()
    finally:
        conn.close()

def get_space_members(space_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"""
    conn = get_db_connection()
    
    try:
        if isinstance(conn, sqlite3.Connection):
            query = '''SELECT user_name, role, joined_at 
                       FROM space_members 
                       WHERE space_id = ? 
                       ORDER BY 
                         CASE role 
                           WHEN 'owner' THEN 1 
                           WHEN 'admin' THEN 2 
                           ELSE 3 
                         END, joined_at'''
            df = pd.read_sql_query(query, conn, params=(space_id,))
        else:
            query = '''SELECT user_name, role, joined_at 
                       FROM space_members 
                       WHERE space_id = %s 
                       ORDER BY 
                         CASE role 
                           WHEN 'owner' THEN 1 
                           WHEN 'admin' THEN 2 
                           ELSE 3 
                         END, joined_at'''
            df = pd.read_sql_query(query, conn, params=(space_id,))
        
        return df
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
        return pd.DataFrame()
    finally:
        conn.close()

def get_space_privacy_settings(space_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"""
    conn = get_db_connection()
    
    try:
        if isinstance(conn, sqlite3.Connection):
            c = conn.cursor()
            c.execute('SELECT privacy_settings FROM financial_spaces WHERE id = ?', (space_id,))
            result = c.fetchone()
        else:
            c = conn.cursor()
            c.execute('SELECT privacy_settings FROM financial_spaces WHERE id = %s', (space_id,))
            result = c.fetchone()
        
        if result and result[0]:
            return json.loads(result[0])
        return {"view_all": True, "show_stats_only": False}
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏: {e}")
        return {"view_all": True, "show_stats_only": False}
    finally:
        conn.close()

def ensure_user_has_personal_space(user_id, user_name):
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ª–∏—á–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ"""
    spaces = get_user_spaces(user_id)
    personal_spaces = spaces[spaces['space_type'] == 'personal']
    
    if personal_spaces.empty:
        return create_personal_space(user_id, user_name)
    else:
        return personal_spaces.iloc[0]['id']

# ===== –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –£–ß–ê–°–¢–ù–ò–ö–ê–ú–ò =====
def remove_member_from_space(space_id, user_id, remover_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"""
    conn = get_db_connection()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —É–¥–∞–ª—è—é—â–µ–≥–æ
        if isinstance(conn, sqlite3.Connection):
            c = conn.cursor()
            c.execute('SELECT role FROM space_members WHERE space_id = ? AND user_id = ?', (space_id, remover_id))
            remover_role = c.fetchone()
            
            if not remover_role or remover_role[0] not in ['owner', 'admin']:
                return False, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
            
            # –ù–µ –ø–æ–∑–≤–æ–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü—É —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è
            c.execute('SELECT role FROM space_members WHERE space_id = ? AND user_id = ?', (space_id, user_id))
            target_role = c.fetchone()
            
            if target_role and target_role[0] == 'owner':
                return False, "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"
            
            # –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
            c.execute('DELETE FROM space_members WHERE space_id = ? AND user_id = ?', (space_id, user_id))
        else:
            c = conn.cursor()
            c.execute('SELECT role FROM space_members WHERE space_id = %s AND user_id = %s', (space_id, remover_id))
            remover_role = c.fetchone()
            
            if not remover_role or remover_role[0] not in ['owner', 'admin']:
                return False, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
            
            c.execute('SELECT role FROM space_members WHERE space_id = %s AND user_id = %s', (space_id, user_id))
            target_role = c.fetchone()
            
            if target_role and target_role[0] == 'owner':
                return False, "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"
            
            c.execute('DELETE FROM space_members WHERE space_id = %s AND user_id = %s', (space_id, user_id))
        
        conn.commit()
        return True, "–£—á–∞—Å—Ç–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")
        return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞"
    finally:
        conn.close()

def change_member_role(space_id, user_id, new_role, changer_id):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    conn = get_db_connection()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∏–∑–º–µ–Ω—è—é—â–µ–≥–æ
        if isinstance(conn, sqlite3.Connection):
            c = conn.cursor()
            c.execute('SELECT role FROM space_members WHERE space_id = ? AND user_id = ?', (space_id, changer_id))
            changer_role = c.fetchone()
            
            if not changer_role or changer_role[0] != 'owner':
                return False, "–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å —Ä–æ–ª–∏"
            
            # –ù–µ –ø–æ–∑–≤–æ–ª—è–µ–º –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞
            if user_id == changer_id and new_role != 'owner':
                return False, "–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é —Ä–æ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞"
            
            c.execute('UPDATE space_members SET role = ? WHERE space_id = ? AND user_id = ?', 
                     (new_role, space_id, user_id))
        else:
            c = conn.cursor()
            c.execute('SELECT role FROM space_members WHERE space_id = %s AND user_id = %s', (space_id, changer_id))
            changer_role = c.fetchone()
            
            if not changer_role or changer_role[0] != 'owner':
                return False, "–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å —Ä–æ–ª–∏"
            
            if user_id == changer_id and new_role != 'owner':
                return False, "–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é —Ä–æ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞"
            
            c.execute('UPDATE space_members SET role = %s WHERE space_id = %s AND user_id = %s', 
                     (new_role, space_id, user_id))
        
        conn.commit()
        return True, f"–†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_role}"
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏: {e}")
        return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏"
    finally:
        conn.close()

def leave_space(space_id, user_id):
    """–í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"""
    conn = get_db_connection()
    
    try:
        if isinstance(conn, sqlite3.Connection):
            c = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
            c.execute('SELECT role FROM space_members WHERE space_id = ? AND user_id = ?', (space_id, user_id))
            user_role = c.fetchone()
            
            if user_role and user_role[0] == 'owner':
                # –ï—Å–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥—Ä—É–≥–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏
                c.execute('SELECT COUNT(*) FROM space_members WHERE space_id = ? AND user_id != ?', (space_id, user_id))
                other_members = c.fetchone()[0]
                
                if other_members > 0:
                    return False, "–í–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∫–∏–Ω—É—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏. –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–¥–∞–π—Ç–µ –≤–ª–∞–¥–µ–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
                else:
                    # –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ—Ç - —É–¥–∞–ª—è–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
                    c.execute('DELETE FROM financial_spaces WHERE id = ?', (space_id,))
            
            c.execute('DELETE FROM space_members WHERE space_id = ? AND user_id = ?', (space_id, user_id))
        else:
            c = conn.cursor()
            
            c.execute('SELECT role FROM space_members WHERE space_id = %s AND user_id = %s', (space_id, user_id))
            user_role = c.fetchone()
            
            if user_role and user_role[0] == 'owner':
                c.execute('SELECT COUNT(*) FROM space_members WHERE space_id = %s AND user_id != %s', (space_id, user_id))
                other_members = c.fetchone()[0]
                
                if other_members > 0:
                    return False, "–í–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∫–∏–Ω—É—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏"
                else:
                    c.execute('DELETE FROM financial_spaces WHERE id = %s', (space_id,))
            
            c.execute('DELETE FROM space_members WHERE space_id = %s AND user_id = %s', (space_id, user_id))
        
        conn.commit()
        return True, "–í—ã –≤—ã—à–ª–∏ –∏–∑ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞: {e}")
        return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"
    finally:
        conn.close()

def get_detailed_space_members(space_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"""
    conn = get_db_connection()
    
    try:
        if isinstance(conn, sqlite3.Connection):
            query = '''SELECT sm.user_id, sm.user_name, sm.role, sm.joined_at,
                              (SELECT COUNT(*) FROM expenses WHERE user_id = sm.user_id AND space_id = sm.space_id) as expense_count,
                              (SELECT SUM(amount) FROM expenses WHERE user_id = sm.user_id AND space_id = sm.space_id) as total_spent
                       FROM space_members sm
                       WHERE sm.space_id = ?
                       ORDER BY 
                         CASE sm.role 
                           WHEN 'owner' THEN 1 
                           WHEN 'admin' THEN 2 
                           ELSE 3 
                         END, sm.joined_at'''
            df = pd.read_sql_query(query, conn, params=(space_id,))
        else:
            query = '''SELECT sm.user_id, sm.user_name, sm.role, sm.joined_at,
                              (SELECT COUNT(*) FROM expenses WHERE user_id = sm.user_id AND space_id = sm.space_id) as expense_count,
                              (SELECT SUM(amount) FROM expenses WHERE user_id = sm.user_id AND space_id = sm.space_id) as total_spent
                       FROM space_members sm
                       WHERE sm.space_id = %s
                       ORDER BY 
                         CASE sm.role 
                           WHEN 'owner' THEN 1 
                           WHEN 'admin' THEN 2 
                           ELSE 3 
                         END, sm.joined_at'''
            df = pd.read_sql_query(query, conn, params=(space_id,))
        
        return df
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
        return pd.DataFrame()
    finally:
        conn.close()

# ===== –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø –¢–†–ê–¢ =====
def add_expense(user_id, user_name, amount, category, description="", space_id=None, visibility="full"):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ç—ã –≤ –±–∞–∑—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤"""
    try:
        # –ï—Å–ª–∏ space_id –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏—á–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if space_id is None:
            space_id = ensure_user_has_personal_space(user_id, user_name)
        
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É: {user_name} - {amount} —Ä—É–± - {category} - space: {space_id}")
        
        conn = get_db_connection()
        c = conn.cursor()
        
        if isinstance(conn, sqlite3.Connection):
            c.execute('''INSERT INTO expenses (user_id, user_name, amount, category, description, space_id, visibility)
                         VALUES (?, ?, ?, ?, ?, ?, ?)''',
                      (user_id, user_name, amount, category, description, space_id, visibility))
        else:
            c.execute('''INSERT INTO expenses (user_id, user_name, amount, category, description, space_id, visibility)
                         VALUES (%s, %s, %s, %s, %s, %s, %s)''',
                      (user_id, user_name, amount, category, description, space_id, visibility))
        
        conn.commit()
        conn.close()
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç—Ä–∞—Ç–∞: {user_name} - {amount} —Ä—É–± - {category} - space: {space_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É: {str(e)}")

# ===== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====
def get_main_keyboard(user_id=None):
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —É—á–µ—Ç–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤"""
    web_app_url = os.environ.get('WEB_APP_URL', 'https://ales-good.github.io/Finance-bot/')
    
    if user_id:
        spaces = get_user_spaces(user_id)
        has_multiple_spaces = len(spaces) > 1
    else:
        has_multiple_spaces = False
    
    if has_multiple_spaces:
        keyboard = [
            [KeyboardButton("üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É", web_app=WebAppInfo(url=web_app_url))],
            [KeyboardButton("üè† –ú–æ–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"), KeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏")],
            [KeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ"), KeyboardButton("üîó –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å")],
            [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü")],
            [KeyboardButton("üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞—Ç—ã"), KeyboardButton("üìà –í—ã–≥—Ä—É–∑–∏—Ç—å –≤ Excel")],
            [KeyboardButton("üÜò –ü–æ–º–æ—â—å")]
        ]
    else:
        keyboard = [
            [KeyboardButton("üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É", web_app=WebAppInfo(url=web_app_url))],
            [KeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ")],
            [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü")],
            [KeyboardButton("üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞—Ç—ã"), KeyboardButton("üìà –í—ã–≥—Ä—É–∑–∏—Ç—å –≤ Excel")],
            [KeyboardButton("üÜò –ü–æ–º–æ—â—å")]
        ]
    
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_space_type_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"""
    keyboard = [
        [KeyboardButton("üè† –õ–∏—á–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ")],
        [KeyboardButton("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ó–∞–∫—Ä—ã—Ç–∞—è –≥—Ä—É–ø–ø–∞ (—Å–µ–º—å—è/–¥—Ä—É–∑—å—è)")],
        [KeyboardButton("üåê –ü—É–±–ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ")],
        [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_simple_confirmation_keyboard():
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    keyboard = [
        [KeyboardButton("‚úÖ –î–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å"), KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# ===== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ª–∏—á–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
    ensure_user_has_personal_space(user.id, user.first_name)
    
    welcome_text = f"""
–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤ üí∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π **–º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤**!

üè† **–¢–∏–ø—ã –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤:**
‚Ä¢ üè† **–õ–∏—á–Ω–æ–µ** - —Ç–æ–ª—å–∫–æ –≤–∞—à–∏ —Ç—Ä–∞—Ç—ã (–Ω–∏–∫—Ç–æ –Ω–µ –≤–∏–¥–∏—Ç)
‚Ä¢ üë®‚Äçüë©‚Äçüëß‚Äçüë¶ **–ó–∞–∫—Ä—ã—Ç—ã–µ –≥—Ä—É–ø–ø—ã** - —Å–µ–º—å—è, –¥—Ä—É–∑—å—è (–æ–±—â–∏–µ —Ç—Ä–∞—Ç—ã)
‚Ä¢ üåê **–ü—É–±–ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞** - –∞–Ω–æ–Ω–∏–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üí∏ **–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ üì∏ **–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–µ–∫–æ–≤** - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞
‚Ä¢ üé§ **–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥** - –≥–æ–≤–æ—Ä–∏—Ç–µ —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
‚Ä¢ üìä **–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚Ä¢ üë• **–°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –±—é–¥–∂–µ—Ç—ã** —Å –¥—Ä—É–∑—å—è–º–∏ –∏ —Å–µ–º—å–µ–π
‚Ä¢ üìà **–í—ã–≥—Ä—É–∑–∫–∞ –≤ Excel**

**üöÄ –ù–∞—á–Ω–∏—Ç–µ —Å —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞!**
"""

    await update.message.reply_text(welcome_text, reply_markup=get_main_keyboard(user.id))

async def handle_web_app_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        logger.info("üéØ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ Web App")
        
        data = update.effective_message.web_app_data
        parsed_data = json.loads(data.data)
        user = update.effective_user
        
        logger.info(f"üìä –î–∞–Ω–Ω—ã–µ –∏–∑ Web App: {parsed_data}")
        
        amount = parsed_data.get('amount')
        category = parsed_data.get('category')
        description = parsed_data.get('description', '')
        space_id = context.user_data.get('current_space')
        
        add_expense(user.id, user.first_name, amount, category, description, space_id)
        
        response = f"""‚úÖ **–¢—Ä–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É!**

üíÅ **–ö—Ç–æ:** {user.first_name}
üí∏ **–°—É–º–º–∞:** {amount} —Ä—É–±
üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {category}"""
        
        if description:
            response += f"\nüìù **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:** {description}"
            
        await update.message.reply_text(response, reply_markup=get_main_keyboard(user.id))
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ Web App: {str(e)}")
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–æ—Ä–º—ã: {str(e)}",
            reply_markup=get_main_keyboard()
        )

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ì–û–õ–û–°–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô =====
async def handle_voice_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        voice = update.message.voice
        
        processing_msg = await update.message.reply_text("üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        voice_file = await voice.get_file()
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as temp_file:
            temp_path = temp_file.name
        
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            await voice_file.download_to_drive(temp_path)
            
            # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
            text = await voice_recognizer.transcribe_audio(temp_path)
            
            if not text:
                await processing_msg.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
                    "üí° **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:**\n"
                    "‚Ä¢ –ì–æ–≤–æ—Ä–∏—Ç—å —á–µ—Ç—á–µ –∏ –±–ª–∏–∂–µ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É\n"
                    "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç: '500 –ø—Ä–æ–¥—É–∫—Ç—ã'\n"
                    "‚Ä¢ –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç—Ä–∞—Ç—É —Ç–µ–∫—Å—Ç–æ–º"
                )
                return
            
            await processing_msg.edit_text(f"üé§ **–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:** _{text}_", parse_mode='Markdown')
            
            # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞
            words = text.lower().split()
            amount = None
            category = "–î—Ä—É–≥–æ–µ"
            description_words = []
            
            # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Å—É–º–º—É (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –Ω–∞—á–∞–ª–µ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä—É–±/—Ä—É–±–ª–µ–π)
            for i, word in enumerate(words):
                # –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —Å—É–º–º—É –∏–∑ —á–∏—Å–µ–ª
                cleaned_word = re.sub(r'[^\d]', '', word)
                if cleaned_word:
                    try:
                        potential_amount = int(cleaned_word)
                        if 10 <= potential_amount <= 100000:  # –ë–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
                            amount = potential_amount
                            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–æ–≤–∞ "—Ä—É–±–ª—å", "—Ä—É–±", "—Ä" - —ç—Ç–æ —Ç–æ—á–Ω–æ —Å—É–º–º–∞
                            if any(rub_word in word for rub_word in ['—Ä—É–±', '—Ä', '‚ÇΩ']):
                                break
                            # –ï—Å–ª–∏ —á–∏—Å–ª–æ –≤ –Ω–∞—á–∞–ª–µ –∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–æ–µ - –≤–µ—Ä–æ—è—Ç–Ω–æ —Å—É–º–º–∞
                            elif i == 0 and potential_amount >= 50:
                                break
                    except:
                        pass
            
            # –ï—Å–ª–∏ —Å—É–º–º—É –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            if not amount:
                # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–∏–ø–∞ "–ø—è—Ç—å—Å–æ—Ç —Ä—É–±–ª–µ–π"
                number_words = {
                    '—Å—Ç–æ': 100, '–¥–≤–µ—Å—Ç–∏': 200, '—Ç—Ä–∏—Å—Ç–∞': 300, '—á–µ—Ç—ã—Ä–µ—Å—Ç–∞': 400, '–ø—è—Ç—å—Å–æ—Ç': 500,
                    '—à–µ—Å—Ç—å—Å–æ—Ç': 600, '—Å–µ–º—å—Å–æ—Ç': 700, '–≤–æ—Å–µ–º—å—Å–æ—Ç': 800, '–¥–µ–≤—è—Ç—å—Å–æ—Ç': 900,
                    '—Ç—ã—Å—è—á–∞': 1000, '–¥–≤–µ —Ç—ã—Å—è—á–∏': 2000, '—Ç—Ä–∏ —Ç—ã—Å—è—á–∏': 3000, '–ø—è—Ç—å —Ç—ã—Å—è—á': 5000
                }
                for word, value in number_words.items():
                    if word in text.lower():
                        amount = value
                        break
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            category, confidence = classifier.predict_category(text)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å–ª–æ–≤
            for word in words:
                if not word.isdigit() and word not in ['—Ä—É–±', '—Ä—É–±–ª–µ–π', '—Ä', '‚ÇΩ']:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
                    if word not in ['–Ω–∞', '–∑–∞', '–≤', '–¥–ª—è', '–∫—É–ø–∏–ª', '–ø–æ—Ç—Ä–∞—Ç–∏–ª', '–æ–ø–ª–∞—Ç–∏–ª']:
                        description_words.append(word)
            
            description = ' '.join(description_words) if description_words else "–ì–æ–ª–æ—Å–æ–≤–∞—è —Ç—Ä–∞—Ç–∞"
            
            if amount:
                preview_text = f"""üé§ **–ì–æ–ª–æ—Å–æ–≤–∞—è —Ç—Ä–∞—Ç–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞!**

üí∏ **–°—É–º–º–∞:** {amount} —Ä—É–±
üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {category}"""
                
                if description and description != "–ì–æ–ª–æ—Å–æ–≤–∞—è —Ç—Ä–∞—Ç–∞":
                    preview_text += f"\nüìù **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:** {description}"
                
                await update.message.reply_text(
                    preview_text + "\n\n–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç—É —Ç—Ä–∞—Ç—É?",
                    reply_markup=get_simple_confirmation_keyboard()
                )
                
                context.user_data['pending_voice_expense'] = {
                    'amount': amount, 'category': category, 
                    'description': description, 'text': text
                }
                
            else:
                await update.message.reply_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—É–º–º—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: *{text}*\n\n"
                    "üí° **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞–∑–∞—Ç—å —á–µ—Ç—á–µ:**\n"
                    "‚Ä¢ '500 –ø—Ä–æ–¥—É–∫—Ç—ã'\n" 
                    "‚Ä¢ '1000 —Ç–∞–∫—Å–∏ –¥–æ —Ä–∞–±–æ—Ç—ã'\n"
                    "‚Ä¢ '250 –∫–æ—Ñ–µ —Å –∫—Ä—É–∞—Å—Å–∞–Ω–æ–º'",
                    parse_mode='Markdown',
                    reply_markup=get_main_keyboard(user.id)
                )
                
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(temp_path):
                os.unlink(temp_path)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥.",
            reply_markup=get_main_keyboard(user.id)
        )

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö –§–û–¢–û –ß–ï–ö–û–í =====
async def handle_photo_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        
        if not TESSERACT_AVAILABLE:
            await update.message.reply_text(
                "‚ùå –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–µ–∫–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.\n\n"
                "üí° **–í—ã –º–æ–∂–µ—Ç–µ:**\n"
                "‚Ä¢ –í–≤–µ—Å—Ç–∏ —Ç—Ä–∞—Ç—É –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É\n"
                "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                "‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º: '500 –ø—Ä–æ–¥—É–∫—Ç—ã'",
                reply_markup=get_main_keyboard(user.id)
            )
            return
        
        photo = update.message.photo[-1]
        
        processing_msg = await update.message.reply_text("üì∏ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ —á–µ–∫–∞...")
        
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
            photo_file = await photo.get_file()
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as temp_file:
                temp_path = temp_file.name
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            await photo_file.download_to_drive(temp_path)
            
            # –ß–∏—Ç–∞–µ–º –±–∞–π—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            with open(temp_path, 'rb') as f:
                photo_bytes = f.read()
            
            logger.info(f"üì∑ –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ: {len(photo_bytes)} –±–∞–π—Ç")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ–∫
            receipt_data = await process_receipt_photo(photo_bytes)
            
            if receipt_data and receipt_data['total'] > 0:
                category, confidence = classifier.predict_category(receipt_data.get('store', '—á–µ–∫ –ø–æ–∫—É–ø–∫–∞'))
                store_name = receipt_data.get('store', '')
                description = f"–ß–µ–∫ {store_name}".strip() if store_name else "–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —á–µ–∫"
                
                preview_text = f"""üì∏ **–ß–µ–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω!**

üí∏ **–°—É–º–º–∞:** {receipt_data['total']} —Ä—É–±
üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {category}"""
                
                if store_name:
                    preview_text += f"\nüè™ **–ú–∞–≥–∞–∑–∏–Ω:** {store_name}"

                await processing_msg.delete()
                await update.message.reply_text(
                    preview_text + "\n\n–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞—Ç—É?",
                    reply_markup=get_simple_confirmation_keyboard()
                )
                
                context.user_data['pending_receipt_expense'] = {
                    'amount': receipt_data['total'],
                    'category': category,
                    'description': description,
                    'store': store_name
                }
                
            else:
                await processing_msg.delete()
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —á–µ–∫.\n\n"
                    "üí° **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:**\n"
                    "‚Ä¢ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫ –±–æ–ª–µ–µ —á–µ—Ç–∫–æ\n"
                    "‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Ñ–æ—Ç–æ —Ö–æ—Ä–æ—à–æ –æ—Å–≤–µ—â–µ–Ω–æ\n"
                    "‚Ä¢ –ò–ª–∏ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É",
                    reply_markup=get_main_keyboard(user.id)
                )
                
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if 'temp_path' in locals() and os.path.exists(temp_path):
                os.unlink(temp_path)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {str(e)}")
        try:
            await processing_msg.delete()
        except:
            pass
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –∏–ª–∏ —Ñ–æ—Ä–º—É.",
            reply_markup=get_main_keyboard(user.id)
        )

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø =====
async def handle_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    text = update.message.text
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ–ª–æ—Å–æ–≤—É—é —Ç—Ä–∞—Ç—É
    if context.user_data.get('pending_voice_expense'):
        expense_data = context.user_data['pending_voice_expense']
        
        if text == "‚úÖ –î–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å":
            add_expense(
                user.id, user.first_name, 
                expense_data['amount'], 
                expense_data['category'], 
                expense_data['description']
            )
            
            response = f"""‚úÖ **–ì–æ–ª–æ—Å–æ–≤–∞—è —Ç—Ä–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!**

üíÅ **–ö—Ç–æ:** {user.first_name}
üí∏ **–°—É–º–º–∞:** {expense_data['amount']} —Ä—É–±
üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {expense_data['category']}"""
            
            if expense_data['description'] and expense_data['description'] != "–ì–æ–ª–æ—Å–æ–≤–∞—è —Ç—Ä–∞—Ç–∞":
                response += f"\nüìù **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:** {expense_data['description']}"
                
            await update.message.reply_text(response, reply_markup=get_main_keyboard(user.id))
            context.user_data.pop('pending_voice_expense', None)
            
        elif text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
            await update.message.reply_text(
                "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–π —Ç—Ä–∞—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=get_main_keyboard(user.id)
            )
            context.user_data.pop('pending_voice_expense', None)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞—Ç—É –∏–∑ —á–µ–∫–∞
    if context.user_data.get('pending_receipt_expense'):
        expense_data = context.user_data['pending_receipt_expense']
        
        if text == "‚úÖ –î–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å":
            add_expense(
                user.id, user.first_name, 
                expense_data['amount'], 
                expense_data['category'], 
                expense_data['description']
            )
            
            response = f"""‚úÖ **–¢—Ä–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏–∑ —á–µ–∫–∞!**

üíÅ **–ö—Ç–æ:** {user.first_name}
üí∏ **–°—É–º–º–∞:** {expense_data['amount']} —Ä—É–±
üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {expense_data['category']}"""
            
            if expense_data.get('store'):
                response += f"\nüè™ **–ú–∞–≥–∞–∑–∏–Ω:** {expense_data['store']}"
            elif expense_data['description']:
                response += f"\nüìù **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:** {expense_data['description']}"
                
            await update.message.reply_text(response, reply_markup=get_main_keyboard(user.id))
            context.user_data.pop('pending_receipt_expense', None)
            
        elif text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
            await update.message.reply_text(
                "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=get_main_keyboard(user.id)
            )
            context.user_data.pop('pending_receipt_expense', None)
        return

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–†–û–°–¢–†–ê–ù–°–¢–í =====
async def handle_create_space(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"""
    user = update.effective_user
    
    if context.args:
        # –°–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ (–ø—Ä–æ—Å—Ç–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ–π –≥—Ä—É–ø–ø—ã)
        space_name = ' '.join(context.args)
        space_id, invite_code = create_financial_space(
            space_name, 
            f"–ì—Ä—É–ø–ø–∞ —Å–æ–∑–¥–∞–Ω–∞ {user.first_name}", 
            'private', 
            user.id, 
            user.first_name
        )
        
        if space_id:
            response = f"""üë®‚Äçüë©‚Äçüëß‚Äçüë¶ **–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–∫—Ä—ã—Ç–∞—è –≥—Ä—É–ø–ø–∞!**

üìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** {space_name}
üë§ **–°–æ–∑–¥–∞—Ç–µ–ª—å:** {user.first_name}
üîë **–ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:** `{invite_code}`

üí° –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–¥–æ–º —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏!
üë• –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /space_members {space_id} –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        else:
            response = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"
            
        await update.message.reply_text(response, reply_markup=get_main_keyboard(user.id))
    else:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞
        response = """üè† **–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞**

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞:

üè† **–õ–∏—á–Ω–æ–µ** - —Ç–æ–ª—å–∫–æ –≤–∞—à–∏ —Ç—Ä–∞—Ç—ã
‚Ä¢ –ü–æ–ª–Ω–∞—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ

üë®‚Äçüë©‚Äçüëß‚Äçüë¶ **–ó–∞–∫—Ä—ã—Ç–∞—è –≥—Ä—É–ø–ø–∞** - —Å–µ–º—å—è/–¥—Ä—É–∑—å—è  
‚Ä¢ –û–±—â–∏–µ —Ç—Ä–∞—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ –∫–æ–¥—É
‚Ä¢ –í–∏–¥–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö —Ç—Ä–∞—Ç

üåê **–ü—É–±–ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ** - —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ
‚Ä¢ –ê–Ω–æ–Ω–∏–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º–∏
‚Ä¢ –¢–æ–ª—å–∫–æ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞:"""
        
        await update.message.reply_text(response, reply_markup=get_space_type_keyboard())
        context.user_data['awaiting_space_creation'] = True

async def handle_space_type_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"""
    user = update.effective_user
    text = update.message.text
    
    if not context.user_data.get('awaiting_space_creation'):
        return
    
    space_type_map = {
        "üè† –õ–∏—á–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ": ("personal", "–õ–∏—á–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ"),
        "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ó–∞–∫—Ä—ã—Ç–∞—è –≥—Ä—É–ø–ø–∞ (—Å–µ–º—å—è/–¥—Ä—É–∑—å—è)": ("private", "–ó–∞–∫—Ä—ã—Ç–∞—è –≥—Ä—É–ø–ø–∞"),
        "üåê –ü—É–±–ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ": ("public", "–ü—É–±–ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ")
    }
    
    if text in space_type_map:
        space_type, space_type_name = space_type_map[text]
        
        if space_type == "personal":
            # –õ–∏—á–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —É–∂–µ —Å–æ–∑–¥–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            response = f"""üè† **–õ–∏—á–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ**

–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ª–∏—á–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ! –û–Ω–æ —Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –±–æ—Ç–∞.

–í—Å–µ —Ç—Ä–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ª–∏—á–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ."""
            
            await update.message.reply_text(response, reply_markup=get_main_keyboard(user.id))
        
        else:
            context.user_data['selected_space_type'] = space_type
            context.user_data['selected_space_type_name'] = space_type_name
            
            response = f"""üìù **–°–æ–∑–¥–∞–Ω–∏–µ {space_type_name.lower()}**

–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞:"""
            
            await update.message.reply_text(response)
            context.user_data['awaiting_space_name'] = True
    
    elif text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await update.message.reply_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_keyboard(user.id))
        context.user_data.pop('awaiting_space_creation', None)
    
    context.user_data.pop('awaiting_space_creation', None)

async def handle_space_name_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"""
    user = update.effective_user
    
    if not context.user_data.get('awaiting_space_name'):
        return
    
    space_name = update.message.text
    space_type = context.user_data.get('selected_space_type')
    space_type_name = context.user_data.get('selected_space_type_name')
    
    if space_type in ['private', 'public']:
        space_id, invite_code = create_financial_space(
            space_name,
            f"{space_type_name} —Å–æ–∑–¥–∞–Ω–∞ {user.first_name}",
            space_type,
            user.id,
            user.first_name
        )
        
        if space_id:
            if space_type == 'private':
                response = f"""üë®‚Äçüë©‚Äçüëß‚Äçüë¶ **–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–∫—Ä—ã—Ç–∞—è –≥—Ä—É–ø–ø–∞!**

üìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** {space_name}
üë§ **–°–æ–∑–¥–∞—Ç–µ–ª—å:** {user.first_name}
üîë **–ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:** `{invite_code}`

üí° **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
‚Ä¢ –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≤–∏–¥—è—Ç –≤—Å–µ —Ç—Ä–∞—Ç—ã
‚Ä¢ –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Å–µ–º—å–∏ –∏ –±–ª–∏–∑–∫–∏—Ö –¥—Ä—É–∑–µ–π
‚Ä¢ –ü—Ä–∏–≤–∞—Ç–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ

üë• **–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏:**
`/space_members {space_id}`

üí¨ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–¥–æ–º —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏!"""
            else:  # public
                response = f"""üåê **–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –ø—É–±–ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ!**

üìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** {space_name}
üë§ **–°–æ–∑–¥–∞—Ç–µ–ª—å:** {user.first_name}
üîë **–ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:** `{invite_code}`

üí° **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ –∞–Ω–æ–Ω–∏–º–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–≤–æ–∏—Ö —Ç—Ä–∞—Ç —Å —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º
‚Ä¢ –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≥—Ä—É–ø–ø

üë• –î–µ–ª–∏—Ç–µ—Å—å –∫–æ–¥–æ–º –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞!"""
        else:
            response = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"
    else:
        response = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"
    
    await update.message.reply_text(response, reply_markup=get_main_keyboard(user.id))
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.pop('awaiting_space_name', None)
    context.user_data.pop('selected_space_type', None)
    context.user_data.pop('selected_space_type_name', None)

async def handle_join_space(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É"""
    user = update.effective_user
    
    if context.args:
        invite_code = context.args[0].upper()
        success, message = join_financial_space(invite_code, user.id, user.first_name)
        
        response = f"**{'‚úÖ' if success else '‚ùå'} {message}**"
    else:
        # –ï—Å–ª–∏ –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = update.message.text
        if len(text) == 8 and text.isalnum() and text.isupper():
            invite_code = text
            success, message = join_financial_space(invite_code, user.id, user.first_name)
            response = f"**{'‚úÖ' if success else '‚ùå'} {message}**"
        else:
            response = """üîó **–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É**

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è (8 —Å–∏–º–≤–æ–ª–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä: A1B2C3D4)

–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:
`/join_space –ö–û–î_–ü–†–ò–ì–õ–ê–®–ï–ù–ò–Ø`

üí° **–°–æ–≤–µ—Ç:** –ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤—ã–≥–ª—è–¥–∏—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫: `A1B2C3D4`"""

    await update.message.reply_text(response, reply_markup=get_main_keyboard(user.id))

async def handle_my_spaces(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.effective_user
    spaces_df = get_user_spaces(user.id)
    
    if spaces_df.empty:
        response = """üè† **–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤**

–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–µ –ø–µ—Ä–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É!

üí° **–°–æ–≤–µ—Ç—ã:**
‚Ä¢ üè† **–õ–∏—á–Ω–æ–µ** - —É–∂–µ —Å–æ–∑–¥–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
‚Ä¢ üë®‚Äçüë©‚Äçüëß‚Äçüë¶ **–ó–∞–∫—Ä—ã—Ç–∞—è –≥—Ä—É–ø–ø–∞** - –¥–ª—è —Å–µ–º—å–∏ –∏ –¥—Ä—É–∑–µ–π  
‚Ä¢ üåê **–ü—É–±–ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ** - –¥–ª—è —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—â–µ–Ω–∏—è"""
    else:
        response = "üè† **–í–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞:**\n\n"
        
        for _, space in spaces_df.iterrows():
            # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
            type_emoji = {
                'personal': 'üè†',
                'private': 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶', 
                'public': 'üåê'
            }.get(space['space_type'], 'üìÅ')
            
            # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–æ–ª–∏
            role_emoji = "üëë" if space['role'] == 'owner' else "üë§" if space['role'] == 'admin' else "üôÇ"
            
            response += f"{type_emoji} **{space['name']}** {role_emoji}\n"
            response += f"   üìù {space['description'] or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
            
            if space['space_type'] != 'personal':
                response += f"   üîë –ö–æ–¥: `{space['invite_code']}`\n"
            
            response += f"   üÜî ID: {space['id']}\n\n"
        
        response += "üí° **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:**\n"
        response += "‚Ä¢ `/switch_space ID` - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ\n"
        response += "‚Ä¢ `/space_members ID` - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏\n"
        response += "‚Ä¢ `/join_space –ö–û–î` - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–æ–≤–æ–º—É\n"
        response += "‚Ä¢ –¢—Ä–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ"

    await update.message.reply_text(response, reply_markup=get_main_keyboard(user.id))

async def handle_switch_space(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞–º–∏"""
    user = update.effective_user
    
    if context.args:
        try:
            space_id = int(context.args[0])
            spaces_df = get_user_spaces(user.id)
            
            if space_id in spaces_df['id'].values:
                context.user_data['current_space'] = space_id
                space_info = spaces_df[spaces_df['id'] == space_id].iloc[0]
                space_name = space_info['name']
                space_type = space_info['space_type']
                
                type_names = {
                    'personal': '–ª–∏—á–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ',
                    'private': '–∑–∞–∫—Ä—ã—Ç–∞—è –≥—Ä—É–ø–ø–∞', 
                    'public': '–ø—É–±–ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ'
                }
                
                response = f"‚úÖ **–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ {type_names.get(space_type, '–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ')}:** {space_name}"
            else:
                response = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É"
        except ValueError:
            response = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"
    else:
        response = """üîÑ **–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞**

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:
`/switch_space ID_–ü–†–û–°–¢–†–ê–ù–°–¢–í–ê`

ID –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Å–ø–∏—Å–∫–µ –≤–∞—à–∏—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ (/my_spaces).

üí° **–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é** —Ç—Ä–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –≤–∞—à–µ –ª–∏—á–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ."""

    await update.message.reply_text(response, reply_markup=get_main_keyboard(user.id))

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –£–ß–ê–°–¢–ù–ò–ö–ê–ú–ò =====
async def handle_space_members(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º"""
    user = update.effective_user
    
    if context.args:
        try:
            space_id = int(context.args[0])
            spaces_df = get_user_spaces(user.id)
            
            if space_id not in spaces_df['id'].values:
                await update.message.reply_text(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É",
                    reply_markup=get_main_keyboard(user.id)
                )
                return
            
            await show_space_members_details(update, context, space_id, user.id)
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞",
                reply_markup=get_main_keyboard(user.id)
            )
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
        spaces_df = get_user_spaces(user.id)
        
        if spaces_df.empty:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
                reply_markup=get_main_keyboard(user.id)
            )
            return
        
        response = "üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ:\n\n"
        
        for _, space in spaces_df.iterrows():
            members_count = len(get_space_members(space['id']))
            response += f"üÜî {space['id']} - **{space['name']}** ({members_count} —É—á–∞—Å—Ç.)\n"
        
        response += "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/space_members ID_–ü–†–û–°–¢–†–ê–ù–°–¢–í–ê`"
        
        await update.message.reply_text(response, reply_markup=get_main_keyboard(user.id))

async def show_space_members_details(update: Update, context: ContextTypes.DEFAULT_TYPE, space_id, user_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"""
    try:
        members_df = get_detailed_space_members(space_id)
        space_info_df = get_user_spaces(user_id)
        space_info = space_info_df[space_info_df['id'] == space_id].iloc[0]
        
        if members_df.empty:
            await update.message.reply_text(
                "‚ùå –í –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
                reply_markup=get_main_keyboard(user_id)
            )
            return
        
        response = f"üë• **–£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞**\n**{space_info['name']}**\n\n"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_user_role = members_df[members_df['user_id'] == user_id]['role'].iloc[0]
        can_manage = current_user_role in ['owner', 'admin']
        
        for _, member in members_df.iterrows():
            role_emoji = "üëë" if member['role'] == 'owner' else "üë§" if member['role'] == 'admin' else "üôÇ"
            join_date = datetime.strptime(str(member['joined_at']), '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y')
            
            response += f"{role_emoji} **{member['user_name']}**\n"
            response += f"   üÜî ID: {member['user_id']}\n"
            response += f"   üìä –†–æ–ª—å: {member['role']}\n"
            response += f"   üí∏ –¢—Ä–∞—Ç—ã: {member['expense_count']} —à—Ç., {member['total_spent'] or 0:,.0f} —Ä—É–±\n"
            response += f"   üìÖ –í—Å—Ç—É–ø–∏–ª: {join_date}\n"
            
            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤/–∞–¥–º–∏–Ω–æ–≤ –∏ –Ω–µ –¥–ª—è —Å–µ–±—è)
            if can_manage and member['user_id'] != user_id and member['role'] != 'owner':
                response += f"   üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: "
                response += f"/remove_member_{space_id}_{member['user_id']} üóëÔ∏è"
                if member['role'] == 'member':
                    response += f" /make_admin_{space_id}_{member['user_id']} ‚¨ÜÔ∏è"
                else:
                    response += f" /make_member_{space_id}_{member['user_id']} ‚¨áÔ∏è"
                response += "\n"
            
            response += "\n"
        
        if can_manage:
            response += "**üîß –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:**\n"
            response += "‚Ä¢ `/remove_member_ID_–ü–†–û–°–¢–†–ê–ù–°–¢–í–ê_ID_–£–ß–ê–°–¢–ù–ò–ö–ê` - —É–¥–∞–ª–∏—Ç—å\n"
            response += "‚Ä¢ `/make_admin_ID_–ü–†–û–°–¢–†–ê–ù–°–¢–í–ê_ID_–£–ß–ê–°–¢–ù–ò–ö–ê` - —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º\n"
            response += "‚Ä¢ `/make_member_ID_–ü–†–û–°–¢–†–ê–ù–°–¢–í–ê_ID_–£–ß–ê–°–¢–ù–ò–ö–ê` - —Å–¥–µ–ª–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º\n"
        
        response += f"\n**üîó –ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:** `{space_info['invite_code']}`"
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
        if current_user_role != 'owner':
            response += f"\n\nüö™ –í—ã–π—Ç–∏: /leave_space_{space_id}"
        
        await update.message.reply_text(response, reply_markup=get_main_keyboard(user_id))
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö",
            reply_markup=get_main_keyboard(user_id)
        )

async def handle_remove_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    user = update.effective_user
    text = update.message.text
    
    try:
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /remove_member_SPACEID_USERID
        parts = text.split('_')
        if len(parts) >= 4:
            space_id = int(parts[2])
            target_user_id = int(parts[3])
            
            success, message = remove_member_from_space(space_id, target_user_id, user.id)
            
            if success:
                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                members_df = get_detailed_space_members(space_id)
                target_user_name = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                if not members_df.empty:
                    target_user = members_df[members_df['user_id'] == target_user_id]
                    if not target_user.empty:
                        target_user_name = target_user.iloc[0]['user_name']
                
                response = f"‚úÖ **–£—á–∞—Å—Ç–Ω–∏–∫ —É–¥–∞–ª–µ–Ω**\n\nüë§ {target_user_name} –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞."
            else:
                response = f"‚ùå {message}"
        else:
            response = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã"
        
        await update.message.reply_text(response, reply_markup=get_main_keyboard(user.id))
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞",
            reply_markup=get_main_keyboard(user.id)
        )

async def handle_change_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    user = update.effective_user
    text = update.message.text
    
    try:
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /make_admin_SPACEID_USERID –∏–ª–∏ /make_member_SPACEID_USERID
        parts = text.split('_')
        if len(parts) >= 4:
            command = parts[1]  # admin –∏–ª–∏ member
            space_id = int(parts[2])
            target_user_id = int(parts[3])
            
            new_role = 'admin' if command == 'admin' else 'member'
            success, message = change_member_role(space_id, target_user_id, new_role, user.id)
            
            if success:
                role_name = "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º" if new_role == 'admin' else "—É—á–∞—Å—Ç–Ω–∏–∫–æ–º"
                response = f"‚úÖ **–†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞**\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–ø–µ—Ä—å {role_name}."
            else:
                response = f"‚ùå {message}"
        else:
            response = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã"
        
        await update.message.reply_text(response, reply_markup=get_main_keyboard(user.id))
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏",
            reply_markup=get_main_keyboard(user.id)
        )

async def handle_leave_space(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"""
    user = update.effective_user
    text = update.message.text
    
    try:
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /leave_space_SPACEID
        parts = text.split('_')
        if len(parts) >= 3:
            space_id = int(parts[2])
            
            success, message = leave_space(space_id, user.id)
            
            if success:
                response = f"‚úÖ **–í—ã –≤—ã—à–ª–∏ –∏–∑ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞**\n\n{message}"
                
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–≥–æ
                if context.user_data.get('current_space') == space_id:
                    context.user_data.pop('current_space', None)
            else:
                response = f"‚ùå {message}"
        else:
            response = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã"
        
        await update.message.reply_text(response, reply_markup=get_main_keyboard(user.id))
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞",
            reply_markup=get_main_keyboard(user.id)
        )

async def handle_invite_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏"""
    user = update.effective_user
    
    if context.args:
        try:
            space_id = int(context.args[0])
            spaces_df = get_user_spaces(user.id)
            
            if space_id not in spaces_df['id'].values:
                await update.message.reply_text(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É",
                    reply_markup=get_main_keyboard(user.id)
                )
                return
            
            space_info = spaces_df[spaces_df['id'] == space_id].iloc[0]
            
            response = f"""üîó **–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ**

üìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** {space_info['name']}
üîë **–ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:** `{space_info['invite_code']}`
üë• **–¢–∏–ø:** {get_space_type_display_name(space_info['space_type'])}

**–ö–∞–∫ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å:**
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–≥—É
2. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É:
   `/join_space {space_info['invite_code']}`
3. –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –±–æ—Ç—É: `{space_info['invite_code']}`

üí° **–°–æ–≤–µ—Ç:** –ö–æ–¥ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä—è–º–æ –≤ —á–∞—Ç!"""

            await update.message.reply_text(response, reply_markup=get_main_keyboard(user.id))
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞",
                reply_markup=get_main_keyboard(user.id)
            )
    else:
        response = """üîó **–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤**

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:
`/invite_info ID_–ü–†–û–°–¢–†–ê–ù–°–¢–í–ê`

–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.

üí° **–°–æ–≤–µ—Ç:** –£—á–∞—Å—Ç–Ω–∏–∫–∏ –º–æ–≥—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞–º —Ç–æ–ª—å–∫–æ –ø–æ –∫–æ–¥—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è!"""

        await update.message.reply_text(response, reply_markup=get_main_keyboard(user.id))

def get_space_type_display_name(space_type):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ —Ç–∏–ø–∞ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"""
    names = {
        'personal': '–õ–∏—á–Ω–æ–µ',
        'private': '–ó–∞–∫—Ä—ã—Ç–∞—è –≥—Ä—É–ø–ø–∞',
        'public': '–ü—É–±–ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ'
    }
    return names.get(space_type, space_type)

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–ï–ö–°–¢–ê =====
async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text
    
    logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.first_name}: {text}")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
    if text in ["‚úÖ –î–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"]:
        await handle_confirmation(update, context)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
    if context.user_data.get('awaiting_space_creation'):
        await handle_space_type_selection(update, context)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
    if context.user_data.get('awaiting_space_name'):
        await handle_space_name_input(update, context)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await show_stats(update, context)
    elif text == "üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü":
        await show_monthly_stats(update, context)
    elif text == "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞—Ç—ã":
        await show_list(update, context)
    elif text == "üìà –í—ã–≥—Ä—É–∑–∏—Ç—å –≤ Excel":
        await export_excel(update, context)
    elif text == "üÜò –ü–æ–º–æ—â—å":
        await show_help(update, context)
    elif text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
        await clear_data(update, context)
    # === –ù–û–í–´–ï –ö–ù–û–ü–ö–ò –ü–†–û–°–¢–†–ê–ù–°–¢–í ===
    elif text == "‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ":
        await handle_create_space(update, context)
    elif text == "üè† –ú–æ–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞":
        await handle_my_spaces(update, context)
    elif text == "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏":
        await handle_space_members(update, context)
    elif text == "üîó –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å":
        await handle_invite_info(update, context)
    elif text in ["üè† –õ–∏—á–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ", "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ó–∞–∫—Ä—ã—Ç–∞—è –≥—Ä—É–ø–ø–∞ (—Å–µ–º—å—è/–¥—Ä—É–∑—å—è)", "üåê –ü—É–±–ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ", "‚ùå –û—Ç–º–µ–Ω–∞"]:
        await handle_space_type_selection(update, context)
    # === –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î –£–ü–†–ê–í–õ–ï–ù–ò–Ø –£–ß–ê–°–¢–ù–ò–ö–ê–ú–ò ===
    elif text.startswith('/remove_member_'):
        await handle_remove_member(update, context)
    elif text.startswith('/make_admin_') or text.startswith('/make_member_'):
        await handle_change_role(update, context)
    elif text.startswith('/leave_space_'):
        await handle_leave_space(update, context)
    # === –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–î–û–í –ü–†–ò–ì–õ–ê–®–ï–ù–ò–Ø ===
    elif len(text) == 8 and text.isalnum() and text.isupper():
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        await handle_join_space(update, context)
    else:
        # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—É—é —Ç—Ä–∞—Ç—É
        try:
            parts = text.split()
            if len(parts) >= 2:
                amount = float(parts[0].replace(',', '.'))
                category = parts[1].lower()
                description = " ".join(parts[2:]) if len(parts) > 2 else ""
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                space_id = context.user_data.get('current_space')
                
                add_expense(user.id, user.first_name, amount, category, description, space_id)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
                spaces_df = get_user_spaces(user.id)
                if space_id and space_id in spaces_df['id'].values:
                    space_name = spaces_df[spaces_df['id'] == space_id]['name'].iloc[0]
                    space_info = f"–≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ **{space_name}**"
                else:
                    space_info = "–≤ **–ª–∏—á–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ**"
                
                response = f"""‚úÖ **–¢—Ä–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ {space_info}!**

üíÅ **–ö—Ç–æ:** {user.first_name}
üí∏ **–°—É–º–º–∞:** {amount} —Ä—É–±
üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {category}"""
                
                if description:
                    response += f"\nüìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {description}"
                    
                await update.message.reply_text(response, reply_markup=get_main_keyboard(user.id))
                return
        except ValueError:
            pass
        
        # –ï—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–º–æ—â—å
        await show_help(update, context)

# ===== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –î–†–£–ì–ò–ï –§–£–ù–ö–¶–ò–ò =====
async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        conn = get_db_connection()
        user_id = update.effective_user.id
        space_id = context.user_data.get('current_space')
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
        if space_id:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
            if isinstance(conn, sqlite3.Connection):
                df = pd.read_sql_query(f'''
                    SELECT category, SUM(amount) as total, COUNT(*) as count 
                    FROM expenses 
                    WHERE user_id = {user_id} AND space_id = {space_id}
                    GROUP BY category 
                    ORDER BY total DESC
                ''', conn)
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
                space_info = pd.read_sql_query(f'''
                    SELECT name, space_type FROM financial_spaces WHERE id = {space_id}
                ''', conn).iloc[0]
            else:
                df = pd.read_sql_query(f'''
                    SELECT category, SUM(amount) as total, COUNT(*) as count 
                    FROM expenses 
                    WHERE user_id = {user_id} AND space_id = {space_id}
                    GROUP BY category 
                    ORDER BY total DESC
                ''', conn)
                
                space_info = pd.read_sql_query(f'''
                    SELECT name, space_type FROM financial_spaces WHERE id = {space_id}
                ''', conn).iloc[0]
            
            space_name = space_info['name']
            space_type = space_info['space_type']
        else:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            personal_space_id = ensure_user_has_personal_space(user_id, update.effective_user.first_name)
            
            if isinstance(conn, sqlite3.Connection):
                df = pd.read_sql_query(f'''
                    SELECT category, SUM(amount) as total, COUNT(*) as count 
                    FROM expenses 
                    WHERE user_id = {user_id} AND space_id = {personal_space_id}
                    GROUP BY category 
                    ORDER BY total DESC
                ''', conn)
            else:
                df = pd.read_sql_query(f'''
                    SELECT category, SUM(amount) as total, COUNT(*) as count 
                    FROM expenses 
                    WHERE user_id = {user_id} AND space_id = {personal_space_id}
                    GROUP BY category 
                    ORDER BY total DESC
                ''', conn)
            
            space_name = "–õ–∏—á–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ"
            space_type = "personal"
        
        if df.empty:
            await update.message.reply_text(
                f"üìä –í –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ '{space_name}' –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n"
                "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Ç—Ä–∞—Ç—É! üí∏",
                reply_markup=get_main_keyboard(user_id)
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        plt.figure(figsize=(10, 6))
        plt.pie(df['total'], labels=df['category'], autopct='%1.1f%%')
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
        type_emoji = {
            'personal': 'üè†',
            'private': 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶',
            'public': 'üåê'
        }.get(space_type, 'üìä')
        
        plt.title(f'{type_emoji} –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ç –≤ "{space_name}"')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        chart_path = 'stats.png'
        plt.savefig(chart_path)
        plt.close()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_spent = df['total'].sum()
        stats_text = f"""üìà **–°–¢–ê–¢–ò–°–¢–ò–ö–ê {type_emoji} "{space_name.upper()}"**

üí∞ **–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ:** {total_spent:,.0f} —Ä—É–±
üìù **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞—Ç:** {df['count'].sum()}

**üìã –î–µ—Ç–∞–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:**
"""
        
        for _, row in df.iterrows():
            percentage = (row['total'] / total_spent) * 100
            stats_text += f"‚Ä¢ {row['category']}: {row['total']:,.0f} —Ä—É–± ({percentage:.1f}%)\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º
        with open(chart_path, 'rb') as chart:
            await update.message.reply_photo(
                photo=chart,
                caption=stats_text,
                parse_mode='Markdown',
                reply_markup=get_main_keyboard(user_id)
            )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(chart_path)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}",
            reply_markup=get_main_keyboard(update.effective_user.id)
        )
    finally:
        conn.close()

async def show_monthly_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        conn = get_db_connection()
        user_id = update.effective_user.id
        space_id = context.user_data.get('current_space')
        current_month = datetime.now().strftime('%Y-%m')
        
        if not space_id:
            space_id = ensure_user_has_personal_space(user_id, update.effective_user.first_name)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
        if isinstance(conn, sqlite3.Connection):
            space_info = pd.read_sql_query(f'''
                SELECT name, space_type FROM financial_spaces WHERE id = {space_id}
            ''', conn).iloc[0]
            
            df = pd.read_sql_query(f'''
                SELECT category, SUM(amount) as total
                FROM expenses 
                WHERE user_id = {user_id} AND space_id = {space_id} AND strftime('%Y-%m', date) = '{current_month}'
                GROUP BY category 
                ORDER BY total DESC
            ''', conn)
        else:
            space_info = pd.read_sql_query(f'''
                SELECT name, space_type FROM financial_spaces WHERE id = {space_id}
            ''', conn).iloc[0]
            
            df = pd.read_sql_query(f'''
                SELECT category, SUM(amount) as total
                FROM expenses 
                WHERE user_id = {user_id} AND space_id = {space_id} AND DATE_TRUNC('month', date) = DATE_TRUNC('month', CURRENT_DATE)
                GROUP BY category 
                ORDER BY total DESC
            ''', conn)
        
        if df.empty:
            space_name = space_info['name']
            await update.message.reply_text(
                f"üìÖ –í –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ '{space_name}' –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞—Ç.\n"
                "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Ç—Ä–∞—Ç—É —ç—Ç–æ–≥–æ –º–µ—Å—è—Ü–∞! üí∏",
                reply_markup=get_main_keyboard(user_id)
            )
            return
        
        total_spent = df['total'].sum()
        
        type_emoji = {
            'personal': 'üè†',
            'private': 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶',
            'public': 'üåê'
        }.get(space_info['space_type'], 'üìÖ')
        
        stats_text = f"""{type_emoji} **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê –¢–ï–ö–£–©–ò–ô –ú–ï–°–Ø–¶**
**–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ:** {space_info['name']}

üí∞ **–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ:** {total_spent:,.0f} —Ä—É–±

**üìã –¢—Ä–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:**
"""
        
        for _, row in df.iterrows():
            percentage = (row['total'] / total_spent) * 100
            stats_text += f"‚Ä¢ {row['category']}: {row['total']:,.0f} —Ä—É–± ({percentage:.1f}%)\n"
        
        await update.message.reply_text(stats_text, reply_markup=get_main_keyboard(user_id))
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–µ—Å—è—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}",
            reply_markup=get_main_keyboard(update.effective_user.id)
        )
    finally:
        conn.close()

async def show_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        conn = get_db_connection()
        user_id = update.effective_user.id
        space_id = context.user_data.get('current_space')
        
        if not space_id:
            space_id = ensure_user_has_personal_space(user_id, update.effective_user.first_name)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
        if isinstance(conn, sqlite3.Connection):
            space_info = pd.read_sql_query(f'''
                SELECT name, space_type FROM financial_spaces WHERE id = {space_id}
            ''', conn).iloc[0]
            
            df = pd.read_sql_query(f'''
                SELECT amount, category, description, date
                FROM expenses 
                WHERE user_id = {user_id} AND space_id = {space_id}
                ORDER BY date DESC 
                LIMIT 10
            ''', conn)
        else:
            space_info = pd.read_sql_query(f'''
                SELECT name, space_type FROM financial_spaces WHERE id = {space_id}
            ''', conn).iloc[0]
            
            df = pd.read_sql_query(f'''
                SELECT amount, category, description, date
                FROM expenses 
                WHERE user_id = {user_id} AND space_id = {space_id}
                ORDER BY date DESC 
                LIMIT 10
            ''', conn)
        
        if df.empty:
            space_name = space_info['name']
            await update.message.reply_text(
                f"üìù –í –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ '{space_name}' –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç—Ä–∞—Ç.\n"
                "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Ç—Ä–∞—Ç—É! üí∏",
                reply_markup=get_main_keyboard(user_id)
            )
            return
        
        type_emoji = {
            'personal': 'üè†',
            'private': 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶',
            'public': 'üåê'
        }.get(space_info['space_type'], 'üìù')
        
        list_text = f"""{type_emoji} **–ü–û–°–õ–ï–î–ù–ò–ï –¢–†–ê–¢–´**
**–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ:** {space_info['name']}

"""
        
        for _, row in df.iterrows():
            date = datetime.strptime(str(row['date']), '%Y-%m-%d %H:%M:%S').strftime('%d.%m %H:%M')
            list_text += f"üí∏ **{row['amount']} —Ä—É–±** - {row['category']}\n"
            
            if row['description']:
                list_text += f"   üìã {row['description']}\n"
            
            list_text += f"   üìÖ {date}\n\n"
        
        await update.message.reply_text(list_text, parse_mode='Markdown', reply_markup=get_main_keyboard(user_id))
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞—Ç: {str(e)}")
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞—Ç: {str(e)}",
            reply_markup=get_main_keyboard(update.effective_user.id)
        )
    finally:
        conn.close()

async def export_excel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        conn = get_db_connection()
        user_id = update.effective_user.id
        space_id = context.user_data.get('current_space')
        
        if not space_id:
            space_id = ensure_user_has_personal_space(user_id, update.effective_user.first_name)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
        if isinstance(conn, sqlite3.Connection):
            space_info = pd.read_sql_query(f'''
                SELECT name, space_type FROM financial_spaces WHERE id = {space_id}
            ''', conn).iloc[0]
            
            df = pd.read_sql_query(f'''
                SELECT date, amount, category, description
                FROM expenses 
                WHERE user_id = {user_id} AND space_id = {space_id}
                ORDER BY date DESC
            ''', conn)
        else:
            space_info = pd.read_sql_query(f'''
                SELECT name, space_type FROM financial_spaces WHERE id = {space_id}
            ''', conn).iloc[0]
            
            df = pd.read_sql_query(f'''
                SELECT date, amount, category, description
                FROM expenses 
                WHERE user_id = {user_id} AND space_id = {space_id}
                ORDER BY date DESC
            ''', conn)
        
        if df.empty:
            await update.message.reply_text(
                "üìà –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏.",
                reply_markup=get_main_keyboard(user_id)
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
        excel_path = 'expenses_export.xlsx'
        df.to_excel(excel_path, index=False)
        
        space_name = space_info['name'].replace(' ', '_')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open(excel_path, 'rb') as excel_file:
            await update.message.reply_document(
                document=excel_file,
                filename=f'expenses_{space_name}_{datetime.now().strftime("%Y%m%d_%H%M")}.xlsx',
                caption=f'üìà –í—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ "{space_info["name"]}"',
                reply_markup=get_main_keyboard(user_id)
            )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(excel_path)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –≤ Excel: {str(e)}")
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}",
            reply_markup=get_main_keyboard(update.effective_user.id)
        )
    finally:
        conn.close()

async def clear_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    
    try:
        conn = get_db_connection()
        space_id = context.user_data.get('current_space')
        
        if space_id:
            # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
            if isinstance(conn, sqlite3.Connection):
                c = conn.cursor()
                c.execute('DELETE FROM expenses WHERE user_id = ? AND space_id = ?', (user.id, space_id))
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
                space_name = pd.read_sql_query(f'SELECT name FROM financial_spaces WHERE id = {space_id}', conn).iloc[0]['name']
            else:
                c = conn.cursor()
                c.execute('DELETE FROM expenses WHERE user_id = %s AND space_id = %s', (user.id, space_id))
                
                space_name = pd.read_sql_query(f'SELECT name FROM financial_spaces WHERE id = {space_id}', conn).iloc[0]['name']
            
            conn.commit()
            conn.close()
            
            await update.message.reply_text(
                f"‚úÖ –î–∞–Ω–Ω—ã–µ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ '{space_name}' —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã!\n"
                "–ù–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞ üéØ",
                reply_markup=get_main_keyboard(user.id)
            )
        else:
            # –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if isinstance(conn, sqlite3.Connection):
                c = conn.cursor()
                c.execute('DELETE FROM expenses WHERE user_id = ?', (user.id,))
            else:
                c = conn.cursor()
                c.execute('DELETE FROM expenses WHERE user_id = %s', (user.id,))
            
            conn.commit()
            conn.close()
            
            await update.message.reply_text(
                "‚úÖ –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã!\n"
                "–ù–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞ üéØ",
                reply_markup=get_main_keyboard(user.id)
            )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}",
            reply_markup=get_main_keyboard(user.id)
        )

async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    help_text = """
üÜò **–ü–û–ú–û–©–¨ –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ**

üè† **–°–ò–°–¢–ï–ú–ê –ü–†–û–°–¢–†–ê–ù–°–¢–í:**
‚Ä¢ üè† **–õ–∏—á–Ω–æ–µ** - –≤–∞—à–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —Ç—Ä–∞—Ç—ã (—Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
‚Ä¢ üë®‚Äçüë©‚Äçüëß‚Äçüë¶ **–ó–∞–∫—Ä—ã—Ç—ã–µ –≥—Ä—É–ø–ø—ã** - –æ–±—â–∏–µ —Ç—Ä–∞—Ç—ã —Å —Å–µ–º—å–µ–π/–¥—Ä—É–∑—å—è–º–∏
‚Ä¢ üåê **–ü—É–±–ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞** - –∞–Ω–æ–Ω–∏–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è

üí∏ **–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É:**
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É —Å —Ñ–æ—Ä–º–æ–π - —É–¥–æ–±–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
‚Ä¢ –ò–ª–∏ –ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º: `500 –ø—Ä–æ–¥—É–∫—Ç—ã` –∏–ª–∏ `1500 –∫–∞—Ñ–µ –æ–±–µ–¥`
‚Ä¢ –¢—Ä–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ

üé§ **–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç—Ä–∞—Ç—ã
‚Ä¢ –ü—Ä–∏–º–µ—Ä: "500 –ø—Ä–æ–¥—É–∫—Ç—ã —Ö–ª–µ–± –º–æ–ª–æ–∫–æ"

üì∏ **–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–µ–∫–æ–≤:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
‚Ä¢ –ë–æ—Ç –Ω–∞–π–¥–µ—Ç —Å—É–º–º—É –∏ –º–∞–≥–∞–∑–∏–Ω

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** - –ø–æ —Ç–µ–∫—É—â–µ–º—É –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É
‚Ä¢ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü** - –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
‚Ä¢ **–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞—Ç—ã** - –∏—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π

üîÑ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞–º–∏:**
‚Ä¢ `/my_spaces` - —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤
‚Ä¢ `/switch_space ID` - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ  
‚Ä¢ `/join_space –ö–û–î` - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –ø–æ –∫–æ–¥—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
‚Ä¢ `/create_space` - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ

üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏:**
‚Ä¢ `/space_members ID` - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
‚Ä¢ `/invite_info ID` - –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
‚Ä¢ –í–ª–∞–¥–µ–ª—å—Ü—ã –º–æ–≥—É—Ç: —É–¥–∞–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤
‚Ä¢ –ê–¥–º–∏–Ω—ã –º–æ–≥—É—Ç: —É–¥–∞–ª—è—Ç—å –æ–±—ã—á–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

üìà **Excel** - –ø–æ–ª–Ω–∞—è –≤—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞

üóëÔ∏è **–û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ** - —É–¥–∞–ª–∏—Ç—å —Ç—Ä–∞—Ç—ã (–≤ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –∏–ª–∏ –≤—Å–µ)

**üí° –°–æ–≤–µ—Ç—ã:**
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ü–µ–ª–µ–π
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–µ–¥–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –≤ –∑–∞–∫—Ä—ã—Ç—ã–µ –≥—Ä—É–ø–ø—ã —Ç–æ–ª—å–∫–æ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ª—é–¥–µ–π
‚Ä¢ –í–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∫–∏–Ω—É—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ø–æ–∫–∞ –≤ –Ω–µ–º –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏
"""
    await update.message.reply_text(help_text, reply_markup=get_main_keyboard(user.id))

# ===== –ó–ê–ü–£–°–ö –ë–û–¢–ê =====
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    BOT_TOKEN = os.environ.get('BOT_TOKEN', '7911885739:AAGrMekWmLgz_ej8JDFqG-CbDA5Nie7vKFc')
    
    if not BOT_TOKEN:
        logger.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_web_app_data))
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("clear", clear_data))
    application.add_handler(CommandHandler("create_space", handle_create_space))
    application.add_handler(CommandHandler("join_space", handle_join_space))
    application.add_handler(CommandHandler("my_spaces", handle_my_spaces))
    application.add_handler(CommandHandler("switch_space", handle_switch_space))
    application.add_handler(CommandHandler("space_members", handle_space_members))
    application.add_handler(CommandHandler("invite_info", handle_invite_info))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo_message))
    application.add_handler(MessageHandler(filters.VOICE, handle_voice_message))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    port = int(os.environ.get('PORT', 8443))
    
    if 'RAILWAY_STATIC_URL' in os.environ or 'HEROKU_APP_NAME' in os.environ:
        # Production - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ–±—Ö—É–∫–∏
        webhook_url = os.environ.get('WEBHOOK_URL', '')
        if webhook_url:
            application.run_webhook(
                listen="0.0.0.0",
                port=port,
                url_path=BOT_TOKEN,
                webhook_url=f"{webhook_url}/{BOT_TOKEN}"
            )
        else:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling (production)")
            application.run_polling()
    else:
        # Development - polling
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling (development)")
        application.run_polling()

if __name__ == "__main__":
    main()
