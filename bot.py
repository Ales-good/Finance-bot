# Flask imports
from flask import Flask, request, jsonify, Response, send_file  # ‚Üê –î–û–ë–ê–í–¨–¢–ï send_file
import logging
from threading import Thread
import time

# –î—Ä—É–≥–∏–µ –∏–º–ø–æ—Ä—Ç—ã
import sqlite3
import pandas as pd
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, WebAppInfo
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import os
import json
import tempfile
import re
import io
import subprocess
from PIL import Image, ImageEnhance, ImageFilter
import speech_recognition as sr
import numpy as np
import psycopg2
from urllib.parse import urlparse
import random
import string
from flask_cors import CORS
import hashlib
import hmac
import asyncio
import traceback

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Flask app –¥–ª—è API
flask_app = Flask(__name__)
CORS(flask_app)

# ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====
BOT_TOKEN = os.environ.get('BOT_TOKEN', '7911885739:AAGrMekWmLgz_ej8JDFqG-CbDA5Nie7vKFc')
WEB_APP_URL = os.environ.get('WEB_APP_URL', 'https://web-production-4c423.up.railway.app/webapp')
DEV_MODE = os.environ.get('DEV_MODE', 'False').lower() == 'true'  # –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# ===== –ù–û–í–´–ï –ö–û–ù–°–¢–ê–ù–¢–´ –î–õ–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô =====
BUDGET_ALERT_THRESHOLDS = [0.8, 0.9, 1.0]  # 80%, 90%, 100%
DAILY_REPORT_HOUR = 20  # –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ (20:00)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
def test_postgresql_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"""
    try:
        if 'DATABASE_URL' in os.environ:
            conn = get_db_connection()
            if conn and not isinstance(conn, sqlite3.Connection):
                logger.info("‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
                conn.close()
                return True
            else:
                logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite –≤–º–µ—Å—Ç–æ PostgreSQL")
                return False
        else:
            logger.warning("‚ö†Ô∏è DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
        return False

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
test_postgresql_connection()

# –£–±–µ–¥–∏—Å—å —á—Ç–æ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ
def migrate_from_sqlite_to_postgresql():
    """–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ PostgreSQL –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
    if 'DATABASE_URL' not in os.environ:
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ PostgreSQL
        conn_pg = get_db_connection()
        if isinstance(conn_pg, sqlite3.Connection):
            return  # –≠—Ç–æ SQLite, –Ω–µ –º–∏–≥—Ä–∏—Ä—É–µ–º
            
        cursor_pg = conn_pg.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
        cursor_pg.execute("SELECT COUNT(*) FROM financial_spaces")
        count = cursor_pg.fetchone()[0]
        
        if count > 0:
            logger.info("‚úÖ –í PostgreSQL —É–∂–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ, –º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞")
            conn_pg.close()
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ SQLite
        sqlite_path = 'finance.db'
        if os.path.exists(sqlite_path):
            conn_sqlite = sqlite3.connect(sqlite_path)
            cursor_sqlite = conn_sqlite.cursor()
            
            # –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
            cursor_sqlite.execute("SELECT * FROM financial_spaces WHERE is_active = 1")
            spaces = cursor_sqlite.fetchall()
            
            for space in spaces:
                cursor_pg.execute('''
                    INSERT INTO financial_spaces (id, name, description, space_type, created_by, created_at, invite_code, is_active)
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
                ''', space)
            
            # –ú–∏–≥—Ä–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            cursor_sqlite.execute("SELECT * FROM space_members")
            members = cursor_sqlite.fetchall()
            
            for member in members:
                cursor_pg.execute('''
                    INSERT INTO space_members (id, space_id, user_id, user_name, role, joined_at)
                    VALUES (%s, %s, %s, %s, %s, %s)
                ''', member)
            
            # –ú–∏–≥—Ä–∏—Ä—É–µ–º —Ç—Ä–∞—Ç—ã
            cursor_sqlite.execute("SELECT * FROM expenses")
            expenses = cursor_sqlite.fetchall()
            
            for expense in expenses:
                cursor_pg.execute('''
                    INSERT INTO expenses (id, user_id, user_name, space_id, amount, category, description, date, currency)
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
                ''', expense)
            
            conn_pg.commit()
            conn_sqlite.close()
            logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ PostgreSQL –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        conn_pg.close()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")


# ===== –í–ê–ñ–ù–û: –î–û–ë–ê–í–¨–¢–ï –ú–ê–†–®–†–£–¢–´ –ü–û–°–õ–ï –°–û–ó–î–ê–ù–ò–Ø flask_app =====

@flask_app.route('/')  # ‚Üê –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï flask_app –≤–º–µ—Å—Ç–æ app
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å Web App"""
    try:
        return send_file('index.html')
    except FileNotFoundError:
        # Fallback –µ—Å–ª–∏ HTML —Ñ–∞–π–ª–∞ –Ω–µ—Ç
        return {
            "status": "ok", 
            "message": "Finance Bot API is running",
            "webapp_url": "https://web-production-4c423.up.railway.app/webapp"
        }

@flask_app.route('/webapp')  # ‚Üê –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï flask_app –≤–º–µ—Å—Ç–æ app
def webapp():
    """Web App endpoint"""
    return send_file('index.html')

# ===== –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø WEBAPP DATA =====
def validate_webapp_data(init_data):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram WebApp"""
    try:
        # –í—Å–µ–≥–¥–∞ –ª–æ–≥–∏—Ä—É–µ–º —á—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç
        logger.info(f"üîê –ü–æ–ª—É—á–µ–Ω—ã WebApp –¥–∞–Ω–Ω—ã–µ: '{init_data}'")
        
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ, –Ω–æ –º—ã –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ - –æ—Ç–∫–ª–æ–Ω—è–µ–º
        if not init_data or init_data == '':
            logger.warning("‚ùå –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ WebApp")
            # –í—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.warning("‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏")
            return True
            
        # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
        if 'user=' not in init_data:
            logger.warning("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ user –≤ WebApp –¥–∞–Ω–Ω—ã—Ö")
            return False
        
        logger.info("‚úÖ WebApp –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—à–ª–∏ –±–∞–∑–æ–≤—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ WebApp –¥–∞–Ω–Ω—ã—Ö: {e}")
        # –í—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        return True

def get_user_from_init_data(init_data):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ initData —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
    try:
        # –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if DEV_MODE and (not init_data or init_data == ''):
            logger.info("üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return {
                'id': 123456789,
                'first_name': 'TestUser',
                'username': 'testuser',
                'last_name': 'Test',
                'language_code': 'ru'
            }
            
        logger.info(f"üîç –ü–∞—Ä—Å–∏–º initData: {init_data[:200]}...")
        
        params = {}
        for item in init_data.split('&'):
            if '=' in item:
                key, value = item.split('=', 1)
                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL-encoded –∑–Ω–∞—á–µ–Ω–∏—è
                try:
                    params[key] = value
                except:
                    params[key] = value
        
        logger.info(f"üìã –ù–∞–π–¥–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {list(params.keys())}")
        
        if 'user' in params:
            user_data_str = params['user']
            # –°–ù–ê–ß–ê–õ–ê –¥–µ–∫–æ–¥–∏—Ä—É–µ–º URL-encoding, –ü–û–¢–û–ú JSON
            try:
                user_data_str_decoded = user_data_str.replace('%22', '"').replace('%7B', '{').replace('%7D', '}').replace('%2C', ',').replace('%3A', ':')
                user_data = json.loads(user_data_str_decoded)
            except:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
                try:
                    user_data = json.loads(user_data_str)
                except:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å user data: {user_data_str}")
                    return None
            
            
            return {
                'id': user_data.get('id'),
                'first_name': user_data.get('first_name'),
                'username': user_data.get('username'),
                'last_name': user_data.get('last_name', ''),
                'language_code': user_data.get('language_code', 'ru')
            }
        else:
            logger.warning("‚ùå –ü–æ–ª–µ 'user' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ initData")
            
    except json.JSONDecodeError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ initData: {e}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ initData: {e}")
    
    return None

# ===== –ù–ê–°–¢–†–û–ô–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• =====


def check_database_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î...")
    
    if 'DATABASE_URL' not in os.environ:
        logger.error("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return False
    
    db_url = os.environ['DATABASE_URL']
    logger.info(f"üìä DATABASE_URL: {db_url}")
    
    try:
        conn = get_db_connection()
        
        if isinstance(conn, sqlite3.Connection):
            logger.error("‚ùå‚ùå‚ùå –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø SQLITE! PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
            logger.error("‚ùå‚ùå‚ùå –ü—Ä–æ–≤–µ—Ä—å DATABASE_URL –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Railway!")
            return False
        else:
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–∞–±–ª–∏—Ü
            cursor = conn.cursor()
            cursor.execute("SELECT NOW() as time, version() as version")
            result = cursor.fetchone()
            logger.info(f"üïí –í—Ä–µ–º—è –ë–î: {result[0]}")
            logger.info(f"üìã –í–µ—Ä—Å–∏—è PostgreSQL: {result[1].split(',')[0]}")
            
            conn.close()
            return True
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
        return False

def get_db_connection():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∫ PostgreSQL (–±–µ–∑ SQLite fallback)"""
    if 'DATABASE_URL' not in os.environ:
        raise Exception("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω! –î–æ–±–∞–≤—å –≤ Railway Variables")
    
    database_url = os.environ['DATABASE_URL']
    logger.info(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL: {database_url}")
    
    try:
        parsed_url = urlparse(database_url)
        conn = psycopg2.connect(
            database=parsed_url.path[1:],
            user=parsed_url.username,
            password=parsed_url.password,
            host=parsed_url.hostname,
            port=parsed_url.port,
            sslmode='require'
        )
        logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL!")
        return conn
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
        raise

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    conn = get_db_connection()
    
    try:
        # –°–ù–ê–ß–ê–õ–ê –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if isinstance(conn, sqlite3.Connection):
            logger.info("üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite")
            db_type = "sqlite"
        else:
            logger.info("üêò –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è PostgreSQL")
            db_type = "postgresql"
        
        c = conn.cursor()
        
        if db_type == "sqlite":
            # SQLite
            c.execute('''CREATE TABLE IF NOT EXISTS financial_spaces
                         (id INTEGER PRIMARY KEY AUTOINCREMENT,
                          name TEXT NOT NULL,
                          description TEXT,
                          space_type TEXT DEFAULT 'personal',
                          created_by INTEGER,
                          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                          invite_code TEXT UNIQUE,
                          is_active BOOLEAN DEFAULT TRUE)''')
            
            c.execute('''CREATE TABLE IF NOT EXISTS space_members
                         (id INTEGER PRIMARY KEY AUTOINCREMENT,
                          space_id INTEGER,
                          user_id INTEGER,
                          user_name TEXT,
                          role TEXT DEFAULT 'member',
                          joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                          FOREIGN KEY (space_id) REFERENCES financial_spaces (id))''')
            
            c.execute('''CREATE TABLE IF NOT EXISTS expenses
                         (id INTEGER PRIMARY KEY AUTOINCREMENT,
                          user_id INTEGER, 
                          user_name TEXT,
                          space_id INTEGER,
                          amount REAL, 
                          category TEXT, 
                          description TEXT, 
                          date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                          currency TEXT DEFAULT 'RUB',
                          FOREIGN KEY (space_id) REFERENCES financial_spaces (id))''')
            
            c.execute('''CREATE TABLE IF NOT EXISTS budgets
                         (id INTEGER PRIMARY KEY AUTOINCREMENT,
                          user_id INTEGER,
                          space_id INTEGER,
                          amount REAL,
                          month_year TEXT,
                          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                          currency TEXT DEFAULT 'RUB',
                          FOREIGN KEY (space_id) REFERENCES financial_spaces (id))''')
            
            c.execute('''CREATE TABLE IF NOT EXISTS budget_alerts
                         (id INTEGER PRIMARY KEY AUTOINCREMENT,
                          user_id INTEGER,
                          space_id INTEGER,
                          budget_amount REAL,
                          spent_amount REAL,
                          percentage REAL,
                          alert_type TEXT,
                          sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                          FOREIGN KEY (space_id) REFERENCES financial_spaces (id))''')
            
            c.execute('''CREATE TABLE IF NOT EXISTS user_categories
                         (id INTEGER PRIMARY KEY AUTOINCREMENT,
                          user_id INTEGER,
                          space_id INTEGER,
                          category_name TEXT,
                          category_icon TEXT,
                          is_custom BOOLEAN DEFAULT TRUE,
                          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                          FOREIGN KEY (space_id) REFERENCES financial_spaces (id))''')
            
        else:
            # PostgreSQL - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –∫–æ–¥
            c.execute('''CREATE TABLE IF NOT EXISTS financial_spaces (
                         id SERIAL PRIMARY KEY,
                         name TEXT NOT NULL,
                         description TEXT,
                         space_type TEXT DEFAULT 'personal',
                         created_by BIGINT,
                         created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                         invite_code TEXT UNIQUE,
                         is_active BOOLEAN DEFAULT TRUE
                     )''')
            
            c.execute('''CREATE TABLE IF NOT EXISTS space_members (
                         id SERIAL PRIMARY KEY,
                         space_id INTEGER REFERENCES financial_spaces(id),
                         user_id BIGINT,
                         user_name TEXT,
                         role TEXT DEFAULT 'member',
                         joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                     )''')
            
            c.execute('''CREATE TABLE IF NOT EXISTS expenses (
                         id SERIAL PRIMARY KEY,
                         user_id BIGINT,
                         user_name TEXT,
                         space_id INTEGER REFERENCES financial_spaces(id),
                         amount REAL,
                         category TEXT,
                         description TEXT,
                         date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                         currency TEXT DEFAULT 'RUB'
                     )''')
            
            c.execute('''CREATE TABLE IF NOT EXISTS budgets (
                         id SERIAL PRIMARY KEY,
                         user_id BIGINT,
                         space_id INTEGER REFERENCES financial_spaces(id),
                         amount REAL,
                         month_year TEXT,
                         created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                         currency TEXT DEFAULT 'RUB'
                     )''')
            
            c.execute('''CREATE TABLE IF NOT EXISTS budget_alerts (
                         id SERIAL PRIMARY KEY,
                         user_id BIGINT,
                         space_id INTEGER REFERENCES financial_spaces(id),
                         budget_amount REAL,
                         spent_amount REAL,
                         percentage REAL,
                         alert_type TEXT,
                         sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                     )''')
            
            c.execute('''CREATE TABLE IF NOT EXISTS user_categories (
                         id SERIAL PRIMARY KEY,
                         user_id BIGINT,
                         space_id INTEGER REFERENCES financial_spaces(id),
                         category_name TEXT,
                         category_icon TEXT,
                         is_custom BOOLEAN DEFAULT TRUE,
                         created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                     )''')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        if db_type == "sqlite":
            c.execute("SELECT name FROM sqlite_master WHERE type='table'")
        else:
            c.execute("SELECT table_name FROM information_schema.tables WHERE table_schema = 'public'")
        
        tables = c.fetchall()
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ: {len(tables)}")
        for table in tables:
            logger.info(f"   - {table[0]}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        default_categories = [
            ('–ü—Ä–æ–¥—É–∫—Ç—ã', 'üõí'),
            ('–ö–∞—Ñ–µ', '‚òï'),
            ('–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', 'üöó'),
            ('–î–æ–º', 'üè†'),
            ('–û–¥–µ–∂–¥–∞', 'üëï'),
            ('–ó–¥–æ—Ä–æ–≤—å–µ', 'üè•'),
            ('–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', 'üé¨'),
            ('–ü–æ–¥–ø–∏—Å–∫–∏', 'üì±'),
            ('–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', 'üìö'),
            ('–î—Ä—É–≥–æ–µ', '‚ùì')
        ]
        
        for category_name, icon in default_categories:
            if db_type == "sqlite":
                c.execute('''INSERT OR IGNORE INTO user_categories 
                             (user_id, space_id, category_name, category_icon, is_custom) 
                             VALUES (0, 0, ?, ?, FALSE)''', (category_name, icon))
            else:
                # –î–ª—è PostgreSQL –∏—Å–ø–æ–ª—å–∑—É–µ–º ON CONFLICT
                c.execute('''INSERT INTO user_categories 
                             (user_id, space_id, category_name, category_icon, is_custom) 
                             VALUES (0, 0, %s, %s, FALSE)
                             ON CONFLICT DO NOTHING''', (category_name, icon))
        
        conn.commit()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
        if conn:
            conn.rollback()
    finally:
        if conn:
            conn.close()

# ===== –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô =====
async def check_budget_alerts():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±—é–¥–∂–µ—Ç–µ"""
    try:
        conn = get_db_connection()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        current_month = datetime.now().strftime('%Y-%m')
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ–º –±—é–¥–∂–µ—Ç–∞
        if isinstance(conn, sqlite3.Connection):
            query = '''
                SELECT b.user_id, b.space_id, b.amount as budget, 
                       COALESCE(SUM(e.amount), 0) as spent,
                       fs.name as space_name,
                       sm.user_name
                FROM budgets b
                JOIN financial_spaces fs ON b.space_id = fs.id
                JOIN space_members sm ON b.user_id = sm.user_id AND b.space_id = sm.space_id
                LEFT JOIN expenses e ON b.user_id = e.user_id AND b.space_id = e.space_id 
                                    AND strftime('%Y-%m', e.date) = ?
                WHERE b.month_year = ? AND fs.is_active = TRUE
                GROUP BY b.user_id, b.space_id, b.amount, fs.name, sm.user_name
            '''
            df = pd.read_sql_query(query, conn, params=(current_month, current_month))
        else:
            query = '''
                SELECT b.user_id, b.space_id, b.amount as budget, 
                       COALESCE(SUM(e.amount), 0) as spent,
                       fs.name as space_name,
                       sm.user_name
                FROM budgets b
                JOIN financial_spaces fs ON b.space_id = fs.id
                JOIN space_members sm ON b.user_id = sm.user_id AND b.space_id = sm.space_id
                LEFT JOIN expenses e ON b.user_id = e.user_id AND b.space_id = e.space_id 
                                    AND DATE_TRUNC('month', e.date) = DATE_TRUNC('month', CURRENT_DATE)
                WHERE b.month_year = %s AND fs.is_active = TRUE
                GROUP BY b.user_id, b.space_id, b.amount, fs.name, sm.user_name
            '''
            df = pd.read_sql_query(query, conn, params=(current_month,))
        
        conn.close()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        application = Application.builder().token(BOT_TOKEN).build()
        
        for _, row in df.iterrows():
            user_id = int(row['user_id'])
            space_id = int(row['space_id'])
            budget = float(row['budget'])
            spent = float(row['spent'])
            space_name = row['space_name']
            user_name = row['user_name']
            
            percentage = spent / budget if budget > 0 else 0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            for threshold in BUDGET_ALERT_THRESHOLDS:
                if percentage >= threshold:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    if not was_alert_sent_today(user_id, space_id, threshold):
                        message = generate_budget_alert(percentage, budget, spent, space_name, threshold)
                        try:
                            await application.bot.send_message(
                                chat_id=user_id,
                                text=message
                            )
                            log_budget_alert(user_id, space_id, budget, spent, percentage, f"{int(threshold*100)}%")
                            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name} ({user_id})")
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ check_budget_alerts: {e}")

def was_alert_sent_today(user_id, space_id, threshold):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è"""
    conn = get_db_connection()
    try:
        today = datetime.now().strftime('%Y-%m-%d')
        if isinstance(conn, sqlite3.Connection):
            query = '''SELECT 1 FROM budget_alerts 
                      WHERE user_id = ? AND space_id = ? AND alert_type = ? 
                      AND DATE(sent_at) = ?'''
            df = pd.read_sql_query(query, conn, params=(user_id, space_id, f"{int(threshold*100)}%", today))
        else:
            query = '''SELECT 1 FROM budget_alerts 
                      WHERE user_id = %s AND space_id = %s AND alert_type = %s 
                      AND DATE(sent_at) = %s'''
            df = pd.read_sql_query(query, conn, params=(user_id, space_id, f"{int(threshold*100)}%", today))
        
        return not df.empty
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        return False
    finally:
        conn.close()

def log_budget_alert(user_id, space_id, budget_amount, spent_amount, percentage, alert_type):
    """–õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    conn = get_db_connection()
    try:
        if isinstance(conn, sqlite3.Connection):
            conn.execute('''INSERT INTO budget_alerts 
                          (user_id, space_id, budget_amount, spent_amount, percentage, alert_type)
                          VALUES (?, ?, ?, ?, ?, ?)''',
                        (user_id, space_id, budget_amount, spent_amount, percentage, alert_type))
        else:
            conn.cursor().execute('''INSERT INTO budget_alerts 
                                   (user_id, space_id, budget_amount, spent_amount, percentage, alert_type)
                                   VALUES (%s, %s, %s, %s, %s, %s)''',
                                 (user_id, space_id, budget_amount, spent_amount, percentage, alert_type))
        conn.commit()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    finally:
        conn.close()

def generate_budget_alert(percentage, budget, spent, space_name, threshold):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    if threshold == 0.8:
        return (
            f"‚ö†Ô∏è **–ë–ª–∏–∑–∫–æ –∫ –ª–∏–º–∏—Ç—É –±—é–¥–∂–µ—Ç–∞!**\n\n"
            f"–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ: {space_name}\n"
            f"–ë—é–¥–∂–µ—Ç: {budget:.2f}\n"  # –£–ë–†–ê–õ–ò ‚ÇΩ
            f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {spent:.2f} ({percentage:.1%})\n"  # –£–ë–†–ê–õ–ò ‚ÇΩ
            f"–û—Å—Ç–∞–ª–æ—Å—å: {budget - spent:.2f}\n\n"  # –£–ë–†–ê–õ–ò ‚ÇΩ
            f"–í—ã –∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–ª–∏ 80% –±—é–¥–∂–µ—Ç–∞!"
        )
    elif threshold == 0.9:
        return (
            f"üö® **–ü–æ—á—Ç–∏ –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –±—é–¥–∂–µ—Ç!**\n\n"
            f"–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ: {space_name}\n"
            f"–ë—é–¥–∂–µ—Ç: {budget:.2f}\n"  # –£–ë–†–ê–õ–ò ‚ÇΩ
            f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {spent:.2f} ({percentage:.1%})\n"  # –£–ë–†–ê–õ–ò ‚ÇΩ
            f"–û—Å—Ç–∞–ª–æ—Å—å: {budget - spent:.2f}\n\n"  # –£–ë–†–ê–õ–ò ‚ÇΩ
            f"–û—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ 10% –±—é–¥–∂–µ—Ç–∞!"
        )
    else:  # 100%
        return (
            f"üî¥ **–ë—é–¥–∂–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω!**\n\n"
            f"–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ: {space_name}\n"
            f"–ë—é–¥–∂–µ—Ç: {budget:.2f}\n"  # –£–ë–†–ê–õ–ò ‚ÇΩ
            f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {spent:.2f} ({percentage:.1%})\n"  # –£–ë–†–ê–õ–ò ‚ÇΩ
            f"–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ: {spent - budget:.2f}\n\n"  # –£–ë–†–ê–õ–ò ‚ÇΩ
            f"–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±—é–¥–∂–µ—Ç!"
        )

async def send_daily_reports():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤"""
    try:
        conn = get_db_connection()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if isinstance(conn, sqlite3.Connection):
            query = '''SELECT DISTINCT user_id, user_name FROM space_members'''
            df = pd.read_sql_query(query, conn)
        else:
            query = '''SELECT DISTINCT user_id, user_name FROM space_members'''
            df = pd.read_sql_query(query, conn)
        
        conn.close()
        
        application = Application.builder().token(BOT_TOKEN).build()
        
        for _, row in df.iterrows():
            user_id = int(row['user_id'])
            user_name = row['user_name']
            
            try:
                report = generate_daily_report(user_id)
                await application.bot.send_message(
                    chat_id=user_id,
                    text=report,
                    parse_mode='HTML'
                )
                logger.info(f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {user_name}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ {user_id}: {e}")
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_daily_reports: {e}")

def generate_daily_report(user_id):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    conn = get_db_connection()
    
    try:
        today = datetime.now().strftime('%Y-%m-%d')
        
        if isinstance(conn, sqlite3.Connection):
            # –†–∞—Å—Ö–æ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            today_query = '''SELECT COALESCE(SUM(amount), 0) as today_spent 
                           FROM expenses 
                           WHERE user_id = ? AND DATE(date) = ?'''
            today_df = pd.read_sql_query(today_query, conn, params=(user_id, today))
            
            # –†–∞—Å—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é
            week_query = '''SELECT COALESCE(SUM(amount), 0) as week_spent 
                          FROM expenses 
                          WHERE user_id = ? AND date >= DATE('now', '-7 days')'''
            week_df = pd.read_sql_query(week_query, conn, params=(user_id,))
            
            # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
            spaces_query = '''SELECT COUNT(DISTINCT space_id) as active_spaces 
                            FROM space_members WHERE user_id = ?'''
            spaces_df = pd.read_sql_query(spaces_query, conn, params=(user_id,))
            
        else:
            today_query = '''SELECT COALESCE(SUM(amount), 0) as today_spent 
                           FROM expenses 
                           WHERE user_id = %s AND DATE(date) = %s'''
            today_df = pd.read_sql_query(today_query, conn, params=(user_id, today))
            
            week_query = '''SELECT COALESCE(SUM(amount), 0) as week_spent 
                          FROM expenses 
                          WHERE user_id = %s AND date >= CURRENT_DATE - INTERVAL '7 days'''
            week_df = pd.read_sql_query(week_query, conn, params=(user_id,))
            
            spaces_query = '''SELECT COUNT(DISTINCT space_id) as active_spaces 
                            FROM space_members WHERE user_id = %s'''
            spaces_df = pd.read_sql_query(spaces_query, conn, params=(user_id,))
        
        today_spent = today_df.iloc[0]['today_spent'] if not today_df.empty else 0
        week_spent = week_df.iloc[0]['week_spent'] if not week_df.empty else 0
        active_spaces = spaces_df.iloc[0]['active_spaces'] if not spaces_df.empty else 0
        
        report = (
            f"üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç</b>\n\n"
            f"üí∏ <b>–°–µ–≥–æ–¥–Ω—è:</b> {today_spent:.2f} \n"
            f"üìÖ <b>–ó–∞ –Ω–µ–¥–µ–ª—é:</b> {week_spent:.2f} \n"
            f"üë• <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤:</b> {active_spaces}\n\n"
            f"<i>–•–æ—Ä–æ—à–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π! üí´</i>"
        )
        
        return report
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        return "üìä –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç —Å–µ–≥–æ–¥–Ω—è."
    finally:
        conn.close()

def start_notification_scheduler():
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    def scheduler():
        while True:
            now = datetime.now()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—é–¥–∂–µ—Ç –∫–∞–∂–¥—ã–π —á–∞—Å
            if now.minute == 0:
                asyncio.run(check_budget_alerts())
            
            # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –≤ 20:00
            if now.hour == DAILY_REPORT_HOUR and now.minute == 0:
                asyncio.run(send_daily_reports())
            
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    
    thread = Thread(target=scheduler, daemon=True)
    thread.start()
    logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")

# ===== –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –§–£–ù–ö–¶–ò–ò (–°–û–•–†–ê–ù–ï–ù–´ –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô) =====
def check_tesseract_installation():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Tesseract"""
    try:
        result = subprocess.run(['tesseract', '--version'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            logger.info("‚úÖ Tesseract –¥–æ—Å—Ç—É–ø–µ–Ω –≤ PATH")
            return True
        else:
            logger.warning("‚ùå Tesseract –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH")
            return False
    except FileNotFoundError:
        logger.warning("‚ùå Tesseract –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ PATH")
        return False

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é Tesseract OCR...")
TESSERACT_AVAILABLE = check_tesseract_installation()

if TESSERACT_AVAILABLE:
    try:
        import pytesseract
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–∏ –∫ Tesseract (–¥–ª—è Windows)
        if os.name == 'nt':  # Windows
            possible_paths = [
                r'C:\Program Files\Tesseract-OCR\tesseract.exe',
                r'C:\Users\*\AppData\Local\Programs\Tesseract-OCR\tesseract.exe'
            ]
            for path in possible_paths:
                if os.path.exists(path):
                    pytesseract.pytesseract.tesseract_cmd = path
                    break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        pytesseract.get_tesseract_version()
        logger.info("‚úÖ Tesseract OCR –¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception as e:
        TESSERACT_AVAILABLE = False
        logger.warning(f"‚ùå Tesseract OCR –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
else:
    logger.warning("‚ö†Ô∏è Tesseract –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–µ–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")

def preprocess_image_for_ocr(image):
    """–£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è OCR"""
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ grayscale
        if image.mode != 'L':
            image = image.convert('L')
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        width, height = image.size
        if width < 1000 or height < 1000:
            new_size = (width * 2, height * 2)
            image = image.resize(new_size, Image.Resampling.LANCZOS)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å
        enhancer = ImageEnhance.Contrast(image)
        image = enhancer.enhance(2.0)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–µ–∑–∫–æ—Å—Ç—å
        image = image.filter(ImageFilter.SHARPEN)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—é
        image = image.point(lambda x: 0 if x < 128 else 255, '1')
        
        return image
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return image

def parse_receipt_text(text):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —á–µ–∫–∞"""
    logger.info("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—Å—Ç —á–µ–∫–∞...")
    
    lines = text.split('\n')
    receipt_data = {
        'total': 0,
        'store': None,
        'date': None,
        'items': [],
        'raw_text': text
    }
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—É–º–º (—É–ª—É—á—à–µ–Ω–Ω—ã–µ)
    total_patterns = [
        r'(?:–∏—Ç–æ–≥–æ|–≤—Å–µ–≥–æ|—Å—É–º–º–∞|–∫\s*–æ–ø–ª–∞—Ç–µ|total|–∏—Ç–æ–≥|—á–µ–∫)[^\d]*(\d+[.,]\d{2})',
        r'(\d+[.,]\d{2})\s*(?:—Ä—É–±|—Ä|‚ÇΩ|rur|rub|r|—Ä—É–±–ª–µ–π)',
        r'(?:—Ü–µ–Ω–∞|—Å—Ç–æ–∏–º–æ—Å—Ç—å|–æ–ø–ª–∞—Ç|–≤–Ω–µ—Å–µ–Ω)[^\d]*(\d+[.,]\d{2})',
        r'(\d+[.,]\d{2})\s*$',  # –ß–∏—Å–ª–∞ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
    ]
    
    # –ü–æ–∏—Å–∫ –º–∞–≥–∞–∑–∏–Ω–∞
    store_keywords = ['–º–∞–≥–∞–∑–∏–Ω', '—Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç', '—Ç–æ—Ä–≥–æ–≤—ã–π', '—Ü–µ–Ω—Ç—Ä', '–∞–ø—Ç–µ–∫–∞', '–∫–∞—Ñ–µ', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω']
    
    # –ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
    for line in lines:
        line_clean = re.sub(r'[^\w\s\d.,]', '', line.lower())
        
        # –ü–æ–∏—Å–∫ —Å—É–º–º—ã
        for pattern in total_patterns:
            matches = re.findall(pattern, line_clean, re.IGNORECASE)
            if matches:
                try:
                    amount_str = matches[-1].replace(',', '.')
                    amount_str = re.sub(r'[^\d.]', '', amount_str)
                    amount = float(amount_str)
                    # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é —Å—É–º–º—É
                    if 10 <= amount <= 50000 and amount > receipt_data['total']:
                        receipt_data['total'] = amount
                        logger.info(f"üí∞ –ù–∞–π–¥–µ–Ω–∞ —Å—É–º–º–∞: {amount}")
                        break
                except ValueError:
                    continue
        
        # –ü–æ–∏—Å–∫ –º–∞–≥–∞–∑–∏–Ω–∞
        if not receipt_data['store']:
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤
            if any(keyword in line_clean for keyword in store_keywords):
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
                receipt_data['store'] = line.strip()[:50]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                logger.info(f"üè™ –ù–∞–π–¥–µ–Ω –º–∞–≥–∞–∑–∏–Ω: {receipt_data['store']}")
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ - —Å—Ç—Ä–æ–∫–∏ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ (—á–∞—Å—Ç–æ —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏—è)
            if line.strip().isupper() and len(line.strip()) > 3 and len(line.strip()) < 30:
                receipt_data['store'] = line.strip()
                logger.info(f"üè™ –ù–∞–π–¥–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ (–≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä): {receipt_data['store']}")
    
    return receipt_data

async def process_receipt_photo(image_bytes):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ —á–µ–∫–∞ —á–µ—Ä–µ–∑ Tesseract —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
    if not TESSERACT_AVAILABLE:
        logger.warning("‚ùå Tesseract –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —á–µ–∫–æ–≤")
        return None
    
    try:
        logger.info("üîç –†–∞—Å–ø–æ–∑–Ω–∞—é —á–µ–∫ —á–µ—Ä–µ–∑ Tesseract...")
        
        image = Image.open(io.BytesIO(image_bytes))
        
        # –£–ª—É—á—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image = preprocess_image_for_ocr(image)
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OCR
        configs = [
            r'--oem 3 --psm 6',
            r'--oem 3 --psm 4', 
            r'--oem 3 --psm 8',
            r'--oem 3 --psm 6 -c tessedit_char_whitelist=0123456789.,—Ä—É–±–†–£–ë–∫–ö—Ç–¢‚ÇΩ'
        ]
        
        best_text = ""
        for config in configs:
            try:
                text = pytesseract.image_to_string(image, lang='rus+eng', config=config)
                if len(text.strip()) > len(best_text.strip()):
                    best_text = text
            except Exception as e:
                logger.warning(f"‚ùå –û—à–∏–±–∫–∞ OCR —Å –∫–æ–Ω—Ñ–∏–≥–æ–º {config}: {e}")
                continue
        
        if not best_text.strip():
            logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç")
            return None
        
        logger.info(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(best_text)}")
        logger.info(f"üìÑ –¢–µ–∫—Å—Ç —á–µ–∫–∞: {best_text[:300]}...")
        
        return parse_receipt_text(best_text)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ–∫–∞: {e}")
        return None

# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
def is_user_in_space(user_id, space_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ"""
    conn = get_db_connection()
    
    try:
        if isinstance(conn, sqlite3.Connection):
            query = '''SELECT 1 FROM space_members WHERE user_id = ? AND space_id = ?'''
            df = pd.read_sql_query(query, conn, params=(user_id, space_id))
        else:
            query = '''SELECT 1 FROM space_members WHERE user_id = %s AND space_id = %s'''
            df = pd.read_sql_query(query, conn, params=(user_id, space_id))
        
        return not df.empty
    except Exception as e:
        logger.error(f"‚ùå Error checking user in space: {e}")
        return False
    finally:
        conn.close()

def is_user_admin_in_space(user_id, space_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ"""
    conn = get_db_connection()
    
    try:
        if isinstance(conn, sqlite3.Connection):
            query = '''SELECT role FROM space_members WHERE user_id = ? AND space_id = ?'''
            df = pd.read_sql_query(query, conn, params=(user_id, space_id))
        else:
            query = '''SELECT role FROM space_members WHERE user_id = %s AND space_id = %s'''
            df = pd.read_sql_query(query, conn, params=(user_id, space_id))
        
        if not df.empty:
            role = df.iloc[0]['role']
            return role in ['owner', 'admin']
        return False
    except Exception as e:
        logger.error(f"‚ùå Error checking admin rights: {e}")
        return False
    finally:
        conn.close()

def create_personal_space(user_id, user_name):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"""
    conn = get_db_connection()
    
    try:
        if isinstance(conn, sqlite3.Connection):
            c = conn.cursor()
            c.execute('''INSERT INTO financial_spaces (name, description, space_type, created_by, invite_code)
                         VALUES (?, ?, ?, ?, ?)''', 
                     (f"–õ–∏—á–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ {user_name}", "–í–∞—à–µ –ª–∏—á–Ω–æ–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ", "personal", user_id, f"PERSONAL_{user_id}"))
            space_id = c.lastrowid
            
            c.execute('''INSERT INTO space_members (space_id, user_id, user_name, role)
                         VALUES (?, ?, ?, ?)''', (space_id, user_id, user_name, 'owner'))
        else:
            c = conn.cursor()
            c.execute('''INSERT INTO financial_spaces (name, description, space_type, created_by, invite_code)
                         VALUES (%s, %s, %s, %s, %s) RETURNING id''', 
                     (f"–õ–∏—á–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ {user_name}", "–í–∞—à–µ –ª–∏—á–Ω–æ–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ", "personal", user_id, f"PERSONAL_{user_id}"))
            space_id = c.fetchone()[0]
            
            c.execute('''INSERT INTO space_members (space_id, user_id, user_name, role)
                         VALUES (%s, %s, %s, %s)''', (space_id, user_id, user_name, 'owner'))
        
        conn.commit()
        return space_id
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞: {e}")
        return None
    finally:
        conn.close()

def create_financial_space(name, description, space_type, created_by, created_by_name):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    conn = None
    try:
        conn = get_db_connection()
        invite_code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
        
        logger.info(f"üîß –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞: {name}, —Ç–∏–ø: {space_type}, created_by: {created_by}")
        
        if isinstance(conn, sqlite3.Connection):
            # SQLite
            c = conn.cursor()
            c.execute('''INSERT INTO financial_spaces (name, description, space_type, created_by, invite_code)
                         VALUES (?, ?, ?, ?, ?)''', 
                     (name, description, space_type, created_by, invite_code))
            space_id = c.lastrowid
            
            c.execute('''INSERT INTO space_members (space_id, user_id, user_name, role)
                         VALUES (?, ?, ?, ?)''', 
                     (space_id, created_by, created_by_name, 'owner'))
            
        else:
            # PostgreSQL
            c = conn.cursor()
            c.execute('''INSERT INTO financial_spaces (name, description, space_type, created_by, invite_code)
                         VALUES (%s, %s, %s, %s, %s) RETURNING id''', 
                     (name, description, space_type, created_by, invite_code))
            space_id = c.fetchone()[0]
            
            c.execute('''INSERT INTO space_members (space_id, user_id, user_name, role)
                         VALUES (%s, %s, %s, %s)''', 
                     (space_id, created_by, created_by_name, 'owner'))
        
        conn.commit()
        logger.info(f"‚úÖ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: ID {space_id}, –∫–æ–¥: {invite_code}")
        return space_id, invite_code
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞: {e}")
        import traceback
        logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
        
        if conn:
            conn.rollback()
            
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        logger.error(f"üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: name={name}, type={space_type}, user={created_by}")
        return None, None
        
    finally:
        if conn:
            conn.close()

def add_expense(user_id, user_name, amount, category, description="", space_id=None, currency="RUB"):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ç—ã –≤ –±–∞–∑—É"""
    try:
        if space_id is None:
            space_id = ensure_user_has_personal_space(user_id, user_name)
        
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É: {user_name} - {amount} {currency} - {category} - space: {space_id}")
        
        conn = get_db_connection()
        c = conn.cursor()
        
        if isinstance(conn, sqlite3.Connection):
            c.execute('''INSERT INTO expenses (user_id, user_name, amount, category, description, space_id, currency)
                         VALUES (?, ?, ?, ?, ?, ?, ?)''',
                      (user_id, user_name, amount, category, description, space_id, currency))
        else:
            c.execute('''INSERT INTO expenses (user_id, user_name, amount, category, description, space_id, currency)
                         VALUES (%s, %s, %s, %s, %s, %s, %s)''',
                      (user_id, user_name, amount, category, description, space_id, currency))
        
        conn.commit()
        conn.close()
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç—Ä–∞—Ç–∞: {user_name} - {amount} {currency} - {category} - space: {space_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É: {str(e)}")

def ensure_user_has_personal_space(user_id, user_name):
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ª–∏—á–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ"""
    conn = get_db_connection()
    
    try:
        if isinstance(conn, sqlite3.Connection):
            query = '''SELECT fs.id FROM financial_spaces fs
                       JOIN space_members sm ON fs.id = sm.space_id
                       WHERE sm.user_id = ? AND fs.space_type = 'personal' AND fs.is_active = TRUE'''
            df = pd.read_sql_query(query, conn, params=(user_id,))
        else:
            query = '''SELECT fs.id FROM financial_spaces fs
                       JOIN space_members sm ON fs.id = sm.space_id
                       WHERE sm.user_id = %s AND fs.space_type = 'personal' AND fs.is_active = TRUE'''
            df = pd.read_sql_query(query, conn, params=(user_id,))
        
        if not df.empty:
            return df.iloc[0]['id']
        else:
            return create_personal_space(user_id, user_name)
            
    except Exception as e:
        logger.error(f"‚ùå Error ensuring personal space: {e}")
        return create_personal_space(user_id, user_name)
    finally:
        conn.close()

def remove_member_from_space(space_id, user_id, remover_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"""
    conn = get_db_connection()
    
    try:
        if isinstance(conn, sqlite3.Connection):
            c = conn.cursor()
            c.execute('DELETE FROM space_members WHERE space_id = ? AND user_id = ?', (space_id, user_id))
        else:
            c = conn.cursor()
            c.execute('DELETE FROM space_members WHERE space_id = %s AND user_id = %s', (space_id, user_id))
        
        conn.commit()
        return True, "–£—á–∞—Å—Ç–Ω–∏–∫ —É–¥–∞–ª–µ–Ω"
    except Exception as e:
        logger.error(f"‚ùå Error removing member: {e}")
        return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏"
    finally:
        conn.close()

def set_user_budget(user_id, space_id, amount, currency="RUB"):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—é–¥–∂–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = get_db_connection()
    
    try:
        current_month = datetime.now().strftime('%Y-%m')
        
        if isinstance(conn, sqlite3.Connection):
            c = conn.cursor()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –±—é–¥–∂–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü
            c.execute('SELECT id FROM budgets WHERE user_id = ? AND space_id = ? AND month_year = ?', 
                     (user_id, space_id, current_month))
            existing = c.fetchone()
            
            if existing:
                c.execute('UPDATE budgets SET amount = ?, currency = ? WHERE id = ?', (amount, currency, existing[0]))
            else:
                c.execute('INSERT INTO budgets (user_id, space_id, amount, month_year, currency) VALUES (?, ?, ?, ?, ?)',
                         (user_id, space_id, amount, current_month, currency))
        else:
            c = conn.cursor()
            c.execute('SELECT id FROM budgets WHERE user_id = %s AND space_id = %s AND month_year = %s', 
                     (user_id, space_id, current_month))
            existing = c.fetchone()
            
            if existing:
                c.execute('UPDATE budgets SET amount = %s, currency = %s WHERE id = %s', (amount, currency, existing[0]))
            else:
                c.execute('INSERT INTO budgets (user_id, space_id, amount, month_year, currency) VALUES (%s, %s, %s, %s, %s)',
                         (user_id, space_id, amount, current_month, currency))
        
        conn.commit()
        return True
    except Exception as e:
        logger.error(f"‚ùå Error setting budget: {e}")
        return False
    finally:
        conn.close()

def get_user_budget(user_id, space_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = get_db_connection()
    
    try:
        current_month = datetime.now().strftime('%Y-%m')
        
        if isinstance(conn, sqlite3.Connection):
            query = '''SELECT amount, currency FROM budgets WHERE user_id = ? AND space_id = ? AND month_year = ?'''
            df = pd.read_sql_query(query, conn, params=(user_id, space_id, current_month))
        else:
            query = '''SELECT amount, currency FROM budgets WHERE user_id = %s AND space_id = %s AND month_year = %s'''
            df = pd.read_sql_query(query, conn, params=(user_id, space_id, current_month))
        
        if not df.empty:
            return float(df.iloc[0]['amount']), df.iloc[0]['currency']
        else:
            return 0, 'RUB'
    except Exception as e:
        logger.error(f"‚ùå Error getting budget: {e}")
        return 0, 'RUB'
    finally:
        conn.close()

# ===== –ú–∏–≥—Ä–∞—Ü–∏—è API endpoints =====
# ===== –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ =====
@flask_app.route('/debug/database')
def debug_database():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
    try:
        conn = get_db_connection()
        
        if isinstance(conn, sqlite3.Connection):
            db_type = "SQLite"
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º SQLite
            cursor = conn.cursor()
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
            tables = cursor.fetchall()
        else:
            db_type = "PostgreSQL"
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º PostgreSQL
            cursor = conn.cursor()
            cursor.execute("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public'
            """)
            tables = cursor.fetchall()
        
        conn.close()
        
        return jsonify({
            'status': 'success',
            'database_type': db_type,
            'tables': [table[0] for table in tables],
            'tables_count': len(tables),
            'database_url_exists': 'DATABASE_URL' in os.environ
        })
        
    except Exception as e:
        return jsonify({
            'status': 'error',
            'error': str(e)
        }), 500

# ===== –ù–û–í–´–ï API –î–õ–Ø –†–ê–°–®–ò–†–ï–ù–ù–û–ô –ê–ù–ê–õ–ò–¢–ò–ö–ò =====
@flask_app.route('/get_advanced_analytics', methods=['POST'])
def api_get_advanced_analytics():
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è–º–∏"""
    try:
        data = request.json
        init_data = data.get('initData')
        space_id = data.get('spaceId')
        period = data.get('period', 30)
        analytics_type = data.get('type', 'overview')
        
        if not validate_webapp_data(init_data):
            return jsonify({'error': 'Invalid data'}), 401
            
        user_data = get_user_from_init_data(init_data)
        if not user_data:
            return jsonify({'error': 'User not found'}), 401
            
        if space_id and not is_user_in_space(user_data['id'], space_id):
            return jsonify({'error': 'Access denied'}), 403
        
        conn = get_db_connection()
        
        # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        current_month = datetime.now().strftime('%Y-%m')
        
        if space_id:
            # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
            if isinstance(conn, sqlite3.Connection):
                # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                total_query = '''SELECT COALESCE(SUM(amount), 0) as total_spent, 
                                COUNT(*) as total_count,
                                AVG(amount) as avg_expense
                         FROM expenses 
                         WHERE space_id = ? AND date >= DATE('now', ?)'''
                total_df = pd.read_sql_query(total_query, conn, params=(space_id, f'-{period} days'))
                
                # –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                categories_query = '''SELECT category, SUM(amount) as total, COUNT(*) as count
                              FROM expenses 
                              WHERE space_id = ? AND date >= DATE('now', ?)
                              GROUP BY category 
                              ORDER BY total DESC'''
                categories_df = pd.read_sql_query(categories_query, conn, params=(space_id, f'-{period} days'))
                
                # –ü–æ –¥–Ω—è–º (–¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞)
                daily_query = '''SELECT DATE(date) as day, SUM(amount) as total
                         FROM expenses 
                         WHERE space_id = ? AND date >= DATE('now', ?)
                         GROUP BY DATE(date) 
                         ORDER BY day'''
                daily_df = pd.read_sql_query(daily_query, conn, params=(space_id, f'-{period} days'))
                
                # –ü–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
                members_query = '''SELECT user_name, SUM(amount) as total, COUNT(*) as count
                           FROM expenses 
                           WHERE space_id = ? AND date >= DATE('now', ?)
                           GROUP BY user_name 
                           ORDER BY total DESC'''
                members_df = pd.read_sql_query(members_query, conn, params=(space_id, f'-{period} days'))
                
            else:
                # PostgreSQL –≤–µ—Ä—Å–∏—è
                total_query = '''SELECT COALESCE(SUM(amount), 0) as total_spent, 
                                COUNT(*) as total_count,
                                AVG(amount) as avg_expense
                         FROM expenses 
                         WHERE space_id = %s AND date >= CURRENT_DATE - INTERVAL %s'''
                total_df = pd.read_sql_query(total_query, conn, params=(space_id, f'{period} days'))
                
                categories_query = '''SELECT category, SUM(amount) as total, COUNT(*) as count
                              FROM expenses 
                              WHERE space_id = %s AND date >= CURRENT_DATE - INTERVAL %s
                              GROUP BY category 
                              ORDER BY total DESC'''
                categories_df = pd.read_sql_query(categories_query, conn, params=(space_id, f'{period} days'))
                
                daily_query = '''SELECT DATE(date) as day, SUM(amount) as total
                         FROM expenses 
                         WHERE space_id = %s AND date >= CURRENT_DATE - INTERVAL %s
                         GROUP BY DATE(date) 
                         ORDER BY day'''
                daily_df = pd.read_sql_query(daily_query, conn, params=(space_id, f'{period} days'))
                
                members_query = '''SELECT user_name, SUM(amount) as total, COUNT(*) as count
                           FROM expenses 
                           WHERE space_id = %s AND date >= CURRENT_DATE - INTERVAL %s
                           GROUP BY user_name 
                           ORDER BY total DESC'''
                members_df = pd.read_sql_query(members_query, conn, params=(space_id, f'{period} days'))
        else:
            # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if isinstance(conn, sqlite3.Connection):
                total_query = '''SELECT COALESCE(SUM(amount), 0) as total_spent, 
                                COUNT(*) as total_count,
                                AVG(amount) as avg_expense
                         FROM expenses 
                         WHERE user_id = ? AND date >= DATE('now', ?)'''
                total_df = pd.read_sql_query(total_query, conn, params=(user_data['id'], f'-{period} days'))
                
                categories_query = '''SELECT category, SUM(amount) as total, COUNT(*) as count
                              FROM expenses 
                              WHERE user_id = ? AND date >= DATE('now', ?)
                              GROUP BY category 
                              ORDER BY total DESC'''
                categories_df = pd.read_sql_query(categories_query, conn, params=(user_data['id'], f'-{period} days'))
                
                daily_query = '''SELECT DATE(date) as day, SUM(amount) as total
                         FROM expenses 
                         WHERE user_id = ? AND date >= DATE('now', ?)
                         GROUP BY DATE(date) 
                         ORDER BY day'''
                daily_df = pd.read_sql_query(daily_query, conn, params=(user_data['id'], f'-{period} days'))
                
            else:
                total_query = '''SELECT COALESCE(SUM(amount), 0) as total_spent, 
                                COUNT(*) as total_count,
                                AVG(amount) as avg_expense
                         FROM expenses 
                         WHERE user_id = %s AND date >= CURRENT_DATE - INTERVAL %s'''
                total_df = pd.read_sql_query(total_query, conn, params=(user_data['id'], f'{period} days'))
                
                categories_query = '''SELECT category, SUM(amount) as total, COUNT(*) as count
                              FROM expenses 
                              WHERE user_id = %s AND date >= CURRENT_DATE - INTERVAL %s
                              GROUP BY category 
                              ORDER BY total DESC'''
                categories_df = pd.read_sql_query(categories_query, conn, params=(user_data['id'], f'{period} days'))
                
                daily_query = '''SELECT DATE(date) as day, SUM(amount) as total
                         FROM expenses 
                         WHERE user_id = %s AND date >= CURRENT_DATE - INTERVAL %s
                         GROUP BY DATE(date) 
                         ORDER BY day'''
                daily_df = pd.read_sql_query(daily_query, conn, params=(user_data['id'], f'{period} days'))
        
        conn.close()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        result = {
            'overview': {
                'total_spent': float(total_df.iloc[0]['total_spent']) if not total_df.empty else 0,
                'total_count': int(total_df.iloc[0]['total_count']) if not total_df.empty else 0,
                'avg_expense': float(total_df.iloc[0]['avg_expense']) if not total_df.empty else 0
            },
            'categories': [],
            'daily_data': daily_df.to_dict('records'),
            'members': []
        }
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
        for _, row in categories_df.iterrows():
            result['categories'].append({
                'name': row['category'],
                'total': float(row['total']),
                'count': int(row['count']),
                'percentage': float(row['total']) / result['overview']['total_spent'] if result['overview']['total_spent'] > 0 else 0
            })
        
        # –£—á–∞—Å—Ç–Ω–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤)
        if space_id and not members_df.empty:
            for _, row in members_df.iterrows():
                result['members'].append({
                    'name': row['user_name'],
                    'total': float(row['total']),
                    'count': int(row['count']),
                    'percentage': float(row['total']) / result['overview']['total_spent'] if result['overview']['total_spent'] > 0 else 0
                })
        
        return jsonify(result)
        
    except Exception as e:
        logger.error(f"‚ùå API Error in get_advanced_analytics: {e}")
        return jsonify({'error': 'Internal server error'}), 500

@flask_app.route('/get_user_categories', methods=['POST'])
def api_get_user_categories():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        data = request.json
        init_data = data.get('initData')
        space_id = data.get('spaceId')
        
        if not validate_webapp_data(init_data):
            return jsonify({'error': 'Invalid data'}), 401
            
        user_data = get_user_from_init_data(init_data)
        if not user_data:
            return jsonify({'error': 'User not found'}), 401
        
        conn = get_db_connection()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if isinstance(conn, sqlite3.Connection):
            default_query = '''SELECT category_name, category_icon FROM user_categories 
                             WHERE is_custom = FALSE'''
            default_df = pd.read_sql_query(default_query, conn)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            custom_query = '''SELECT category_name, category_icon FROM user_categories 
                            WHERE user_id = ? AND (space_id = ? OR space_id = 0) AND is_custom = TRUE'''
            custom_df = pd.read_sql_query(custom_query, conn, params=(user_data['id'], space_id if space_id else 0))
        else:
            default_query = '''SELECT category_name, category_icon FROM user_categories 
                             WHERE is_custom = FALSE'''
            default_df = pd.read_sql_query(default_query, conn)
            
            custom_query = '''SELECT category_name, category_icon FROM user_categories 
                            WHERE user_id = %s AND (space_id = %s OR space_id = 0) AND is_custom = TRUE'''
            custom_df = pd.read_sql_query(custom_query, conn, params=(user_data['id'], space_id if space_id else 0))
        
        conn.close()
        
        categories = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for _, row in default_df.iterrows():
            categories.append({
                'name': row['category_name'],
                'icon': row['category_icon'],
                'isCustom': False
            })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for _, row in custom_df.iterrows():
            categories.append({
                'name': row['category_name'],
                'icon': row['category_icon'],
                'isCustom': True
            })
        
        return jsonify({'categories': categories})
        
    except Exception as e:
        logger.error(f"‚ùå API Error in get_user_categories: {e}")
        return jsonify({'error': 'Internal server error'}), 500

@flask_app.route('/add_user_category', methods=['POST'])
def api_add_user_category():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        data = request.json
        init_data = data.get('initData')
        space_id = data.get('spaceId')
        category_name = data.get('categoryName')
        category_icon = data.get('categoryIcon', 'üìÅ')
        
        if not validate_webapp_data(init_data):
            return jsonify({'error': 'Invalid data'}), 401
            
        user_data = get_user_from_init_data(init_data)
        if not user_data:
            return jsonify({'error': 'User not found'}), 401
            
        if not category_name:
            return jsonify({'error': 'Category name is required'}), 400
        
        conn = get_db_connection()
        
        if isinstance(conn, sqlite3.Connection):
            conn.execute('''INSERT INTO user_categories (user_id, space_id, category_name, category_icon, is_custom)
                         VALUES (?, ?, ?, ?, TRUE)''',
                      (user_data['id'], space_id if space_id else 0, category_name, category_icon))
        else:
            conn.cursor().execute('''INSERT INTO user_categories (user_id, space_id, category_name, category_icon, is_custom)
                         VALUES (%s, %s, %s, %s, TRUE)''',
                      (user_data['id'], space_id if space_id else 0, category_name, category_icon))
        
        conn.commit()
        conn.close()
        
        return jsonify({'success': True, 'message': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞'})
        
    except Exception as e:
        logger.error(f"‚ùå API Error in add_user_category: {e}")
        return jsonify({'error': 'Internal server error'}), 500

@flask_app.route('/export_to_excel', methods=['POST'])
def api_export_to_excel():
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏"""
    logger.info("üéØ START EXPORT TO EXCEL")
    
    try:
        data = request.json
        init_data = data.get('initData')
        space_id = data.get('spaceId')
        period = data.get('period', 30)
        
        if not validate_webapp_data(init_data):
            return jsonify({'error': 'Invalid data'}), 401
            
        user_data = get_user_from_init_data(init_data)
        if not user_data:
            return jsonify({'error': 'User not found'}), 401
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
        conn = get_db_connection()
        
        if isinstance(conn, sqlite3.Connection):
            query = '''SELECT e.date, e.amount, e.currency, e.category, e.description, e.user_name, fs.name as space_name
                      FROM expenses e
                      JOIN financial_spaces fs ON e.space_id = fs.id
                      WHERE e.space_id = ? AND e.date >= DATE('now', ?)
                      ORDER BY e.date DESC'''
            df = pd.read_sql_query(query, conn, params=(space_id, f'-{period} days'))
        else:
            query = '''SELECT e.date, e.amount, e.currency, e.category, e.description, e.user_name, fs.name as space_name
                      FROM expenses e
                      JOIN financial_spaces fs ON e.space_id = fs.id
                      WHERE e.space_id = %s AND e.date >= CURRENT_DATE - INTERVAL '%s days'
                      ORDER BY e.date DESC'''
            df = pd.read_sql_query(query, conn, params=(space_id, period))
        
        conn.close()
        
        logger.info(f"üìä Found {len(df)} records")
        
        if df.empty:
            return jsonify({'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞'}), 404
        
        # –°–æ–∑–¥–∞–µ–º Excel —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            # –û—Å–Ω–æ–≤–Ω–æ–π –ª–∏—Å—Ç —Å —Ç—Ä–∞—Ç–∞–º–∏
            df.to_excel(writer, sheet_name='–¢—Ä–∞—Ç—ã', index=False)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            total_with_comments = len(df[df['description'].notna() & (df['description'] != '')])
            
            summary_data = {
                '–ú–µ—Ç—Ä–∏–∫–∞': ['–í—Å–µ–≥–æ —Ç—Ä–∞—Ç', '–¢—Ä–∞—Ç —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏', '–°—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤', '–°—Ä–µ–¥–Ω–∏–π —á–µ–∫', '–ü–µ—Ä–∏–æ–¥'],
                '–ó–Ω–∞—á–µ–Ω–∏–µ': [
                    len(df),
                    f"{total_with_comments} ({total_with_comments/len(df)*100:.1f}%)",
                    f"{df['amount'].sum():.2f} ",
                    f"{df['amount'].mean():.2f} ",
                    f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ {period} –¥–Ω–µ–π"
                ]
            }
            summary_df = pd.DataFrame(summary_data)
            summary_df.to_excel(writer, sheet_name='–°–≤–æ–¥–∫–∞', index=False)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ª–∏—Å—Ç —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            if total_with_comments > 0:
                comments_analysis = df[df['description'].notna() & (df['description'] != '')].copy()
                if not comments_analysis.empty:
                    comments_analysis['description_length'] = comments_analysis['description'].str.len()
                    comments_stats = {
                        '–ú–µ—Ç—Ä–∏–∫–∞': ['–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è', '–ú–∞–∫—Å. –¥–ª–∏–Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è', '–ú–∏–Ω. –¥–ª–∏–Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'],
                        '–ó–Ω–∞—á–µ–Ω–∏–µ': [
                            f"{comments_analysis['description_length'].mean():.1f} —Å–∏–º–≤.",
                            f"{comments_analysis['description_length'].max()} —Å–∏–º–≤.",
                            f"{comments_analysis['description_length'].min()} —Å–∏–º–≤."
                        ]
                    }
                    comments_df = pd.DataFrame(comments_stats)
                    comments_df.to_excel(writer, sheet_name='–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏', index=False)
        
        excel_data = output.getvalue()
        logger.info(f"‚úÖ Excel created with comments, size: {len(excel_data)} bytes")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤—Ä–µ–º–µ–Ω–Ω–æ
        with tempfile.NamedTemporaryFile(delete=False, suffix='.xlsx') as temp_file:
            temp_file.write(excel_data)
            temp_path = temp_file.name
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ Telegram Bot
        try:
            from telegram import Bot
            import asyncio
            
            bot = Bot(token=BOT_TOKEN)
            user_id = user_data['id']
            filename = f"finance_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
            with open(temp_path, 'rb') as file:
                # –°–æ–∑–¥–∞–µ–º event loop –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                
                try:
                    loop.run_until_complete(
                        bot.send_document(
                            chat_id=user_id,
                            document=file,
                            filename=filename,
                            caption=f"üìä –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç\nüíº –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ ID: {space_id}\nüìÖ –ü–µ—Ä–∏–æ–¥: {period} –¥–Ω–µ–π\nüìà –ó–∞–ø–∏—Å–µ–π: {len(df)}\nüí¨ –¢—Ä–∞—Ç —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏: {total_with_comments}"
                        )
                    )
                    logger.info(f"‚úÖ File sent via Telegram bot to user {user_id}")
                    
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    import os
                    os.unlink(temp_path)
                    
                    return jsonify({
                        'success': True,
                        'message': '–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram.',
                        'sent_via_bot': True,
                        'stats': {
                            'total_expenses': len(df),
                            'expenses_with_comments': total_with_comments,
                            'total_amount': df['amount'].sum(),
                            'period_days': period
                        }
                    })
                    
                finally:
                    loop.close()
                    
        except Exception as e:
            logger.error(f"‚ùå Telegram send failed: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ –±–æ—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º base64
            import base64
            excel_b64 = base64.b64encode(excel_data).decode('utf-8')
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            import os
            if os.path.exists(temp_path):
                os.unlink(temp_path)
            
            return jsonify({
                'success': True,
                'message': '–§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é',
                'download_url': f'data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{excel_b64}',
                'filename': f"finance_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                'sent_via_bot': False,
                'stats': {
                    'total_expenses': len(df),
                    'expenses_with_comments': total_with_comments,
                    'total_amount': df['amount'].sum(),
                    'period_days': period
                }
            })
        
    except Exception as e:
        logger.error(f"üí• Export failed: {e}")
        import traceback
        logger.error(f"üîç Traceback: {traceback.format_exc()}")
        return jsonify({'error': f'Export failed: {str(e)}'}), 500


@flask_app.route('/get_expenses_list', methods=['POST'])
def api_get_expenses_list():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞—Ç —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏"""
    try:
        data = request.json
        init_data = data.get('initData')
        space_id = data.get('spaceId')
        period = data.get('period', 30)
        
        if not validate_webapp_data(init_data):
            return jsonify({'error': 'Invalid data'}), 401
            
        user_data = get_user_from_init_data(init_data)
        if not user_data:
            return jsonify({'error': 'User not found'}), 401
            
        if space_id and not is_user_in_space(user_data['id'], space_id):
            return jsonify({'error': 'Access denied'}), 403
        
        conn = get_db_connection()
        
        # –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º e.id –≤ SELECT!
        if isinstance(conn, sqlite3.Connection):
            query = '''SELECT e.id, e.date, e.amount, e.currency, e.category, e.description, e.user_name
                      FROM expenses e
                      WHERE e.space_id = ? AND e.date >= DATE('now', ?)
                      ORDER BY e.date DESC'''
            df = pd.read_sql_query(query, conn, params=(space_id, f'-{period} days'))
        else:
            query = '''SELECT e.id, e.date, e.amount, e.currency, e.category, e.description, e.user_name
                      FROM expenses e
                      WHERE e.space_id = %s AND e.date >= CURRENT_DATE - INTERVAL '%s days'
                      ORDER BY e.date DESC'''
            df = pd.read_sql_query(query, conn, params=(space_id, period))
        
        conn.close()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        expenses = []
        for _, row in df.iterrows():
            expenses.append({
                'id': row['id'],  # –¢–ï–ü–ï–†–¨ ID –ë–£–î–ï–¢ –ü–ï–†–ï–î–ê–í–ê–¢–¨–°–Ø!
                'date': row['date'],
                'amount': row['amount'],
                'currency': row['currency'],
                'category': row['category'],
                'description': row['description'],
                'user_name': row['user_name']
            })
        
        return jsonify({'expenses': expenses})
        
    except Exception as e:
        print(f"Error in get_expenses_list: {e}")
        return jsonify({'error': 'Internal server error'}), 500
    
# ===== –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï API ENDPOINTS (–°–û–•–†–ê–ù–ï–ù–´ –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô) =====
@flask_app.route('/delete_expense', methods=['POST', 'OPTIONS'])
def api_delete_expense():
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ç—ã - –û–¢–õ–ê–î–û–ß–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    try:
        if request.method == 'OPTIONS':
            return '', 200
            
        print("=== üóëÔ∏è DELETE EXPENSE DEBUG ===")
        data = request.json or {}
        print(f"üì¶ Raw data: {data}")
        
        init_data = data.get('initData')
        expense_id = data.get('expenseId')
        
        print(f"üîç Delete expense request:")
        print(f"   expense_id: {expense_id} (type: {type(expense_id)})")
        print(f"   init_data: {init_data[:100] if init_data else 'None'}")
        
        # –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ expense_id –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
        if not expense_id:
            print("‚ùå ERROR: expense_id is required but not provided")
            return jsonify({'error': 'Expense ID is required'}), 400
            
        try:
            expense_id = int(expense_id)
        except (ValueError, TypeError):
            print(f"‚ùå ERROR: expense_id must be integer, got {expense_id}")
            return jsonify({'error': 'Expense ID must be a number'}), 400
        
        if not validate_webapp_data(init_data):
            print("‚ùå ERROR: Invalid webapp data")
            return jsonify({'error': 'Invalid data'}), 401
            
        user_data = get_user_from_init_data(init_data)
        if not user_data:
            print("‚ùå ERROR: User not found")
            return jsonify({'error': 'User not found'}), 401
            
        user_id = user_data['id']
        print(f"üë§ User ID: {user_id}")
        
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # –ü–†–û–í–ï–†–ö–ê 1: –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç—Ä–∞—Ç–∞
        if isinstance(conn, sqlite3.Connection):
            cursor.execute('SELECT id, user_id, space_id FROM expenses WHERE id = ?', (expense_id,))
        else:
            cursor.execute('SELECT id, user_id, space_id FROM expenses WHERE id = %s', (expense_id,))
        
        expense = cursor.fetchone()
        print(f"üìä Expense check: {expense}")
        
        if not expense:
            conn.close()
            print(f"‚ùå ERROR: Expense {expense_id} not found in database")
            return jsonify({'error': '–¢—Ä–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}), 404
        
        # –ü–†–û–í–ï–†–ö–ê 2: –ò–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
        # –í–∞—Ä–∏–∞–Ω—Ç 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–ª —Ç—Ä–∞—Ç—É
        # –í–∞—Ä–∏–∞–Ω—Ç 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Å—Ç–æ–∏—Ç –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ —Ç—Ä–∞—Ç—ã
        if isinstance(conn, sqlite3.Connection):
            cursor.execute('''
                SELECT e.id FROM expenses e 
                LEFT JOIN space_members sm ON e.space_id = sm.space_id 
                WHERE e.id = ? AND (e.user_id = ? OR sm.user_id = ?)
            ''', (expense_id, user_id, user_id))
        else:
            cursor.execute('''
                SELECT e.id FROM expenses e 
                LEFT JOIN space_members sm ON e.space_id = sm.space_id 
                WHERE e.id = %s AND (e.user_id = %s OR sm.user_id = %s)
            ''', (expense_id, user_id, user_id))
        
        permission_check = cursor.fetchone()
        print(f"üîê Permission check: {permission_check}")
        
        if not permission_check:
            conn.close()
            print(f"‚ùå ERROR: User {user_id} has no permission to delete expense {expense_id}")
            return jsonify({'error': '–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–π —Ç—Ä–∞—Ç—ã'}), 403
        
        # –£–î–ê–õ–ï–ù–ò–ï
        if isinstance(conn, sqlite3.Connection):
            cursor.execute('DELETE FROM expenses WHERE id = ?', (expense_id,))
        else:
            cursor.execute('DELETE FROM expenses WHERE id = %s', (expense_id,))
        
        deleted_count = cursor.rowcount
        conn.commit()
        conn.close()
        
        if deleted_count > 0:
            print(f"‚úÖ SUCCESS: Expense {expense_id} deleted by user {user_id}")
            return jsonify({
                'success': True, 
                'message': '–¢—Ä–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞',
                'deleted_expense_id': expense_id
            })
        else:
            print(f"‚ùå ERROR: No rows affected during deletion")
            return jsonify({'error': '–¢—Ä–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}), 404
        
    except Exception as e:
        print(f"üí• CRITICAL ERROR in delete_expense: {str(e)}")
        import traceback
        traceback.print_exc()
        return jsonify({'error': 'Internal server error'}), 500

@flask_app.route('/')
def health_check():
    """Health check endpoint"""
    return jsonify({
        'status': 'ok', 
        'message': 'Finance Bot API is running',
        'timestamp': datetime.now().isoformat(),
        'version': '1.0',
        'dev_mode': DEV_MODE
    })

@flask_app.route('/get_user_spaces', methods=['POST'])
def api_get_user_spaces():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        data = request.json
        if not data:
            return jsonify({'error': 'No JSON data provided'}), 400
            
        init_data = data.get('initData')
        
        logger.info(f"üì¶ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å get_user_spaces: {data.keys()}")
        
        if not validate_webapp_data(init_data):
            logger.warning("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è WebApp –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
            return jsonify({'error': 'Invalid data'}), 401
            
        user_data = get_user_from_init_data(init_data)
        if not user_data:
            logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return jsonify({'error': 'User not found'}), 401
            
        user_id = user_data['id']
        logger.info(f"üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
        
        conn = get_db_connection()
        
        if isinstance(conn, sqlite3.Connection):
            query = '''SELECT fs.id, fs.name, fs.description, fs.space_type, fs.invite_code,
                              COUNT(DISTINCT sm.user_id) as member_count
                       FROM financial_spaces fs
                       JOIN space_members sm ON fs.id = sm.space_id
                       WHERE sm.user_id = ? AND fs.is_active = TRUE
                       GROUP BY fs.id
                       ORDER BY fs.space_type, fs.created_at DESC'''
            df = pd.read_sql_query(query, conn, params=(user_id,))
        else:
            query = '''SELECT fs.id, fs.name, fs.description, fs.space_type, fs.invite_code,
                              COUNT(DISTINCT sm.user_id) as member_count
                       FROM financial_spaces fs
                       JOIN space_members sm ON fs.id = sm.space_id
                       WHERE sm.user_id = %s AND fs.is_active = TRUE
                       GROUP BY fs.id
                       ORDER BY fs.space_type, fs.created_at DESC'''
            df = pd.read_sql_query(query, conn, params=(user_id,))
        
        conn.close()
        
        spaces = []
        for _, row in df.iterrows():
            spaces.append({
                'id': int(row['id']),
                'name': row['name'],
                'description': row['description'],
                'space_type': row['space_type'],
                'invite_code': row['invite_code'],
                'member_count': int(row['member_count']) if row['member_count'] else 1
            })
        
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤: {len(spaces)}")
        return jsonify({'spaces': spaces})
        
    except Exception as e:
        logger.error(f"‚ùå API Error in get_user_spaces: {e}")
        return jsonify({'error': 'Internal server error'}), 500

@flask_app.route('/debug_user_membership', methods=['POST'])
def debug_user_membership():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —á–ª–µ–Ω—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞—Ö"""
    try:
        data = request.json
        init_data = data.get('initData')
        
        if not validate_webapp_data(init_data):
            return jsonify({'error': 'Invalid data'}), 401
            
        user_data = get_user_from_init_data(init_data)
        user_id = user_data['id']
        
        conn = get_db_connection()
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if isinstance(conn, sqlite3.Connection):
            members_query = '''SELECT sm.space_id, sm.role, fs.name, fs.is_active 
                              FROM space_members sm
                              JOIN financial_spaces fs ON sm.space_id = fs.id
                              WHERE sm.user_id = ?'''
            members_df = pd.read_sql_query(members_query, conn, params=(user_id,))
        else:
            members_query = '''SELECT sm.space_id, sm.role, fs.name, fs.is_active 
                              FROM space_members sm
                              JOIN financial_spaces fs ON sm.space_id = fs.id
                              WHERE sm.user_id = %s'''
            members_df = pd.read_sql_query(members_query, conn, params=(user_id,))
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ "–°–µ–º—å—è" (ID: 1)
        if isinstance(conn, sqlite3.Connection):
            family_query = '''SELECT fs.id, fs.name, fs.is_active, 
                             (SELECT COUNT(*) FROM space_members WHERE space_id = fs.id AND user_id = ?) as is_member
                             FROM financial_spaces fs 
                             WHERE fs.id = ?'''
            family_df = pd.read_sql_query(family_query, conn, params=(user_id, 1))
        else:
            family_query = '''SELECT fs.id, fs.name, fs.is_active, 
                             (SELECT COUNT(*) FROM space_members WHERE space_id = fs.id AND user_id = %s) as is_member
                             FROM financial_spaces fs 
                             WHERE fs.id = %s'''
            family_df = pd.read_sql_query(family_query, conn, params=(user_id, 1))
        
        conn.close()
        
        return jsonify({
            'user_id': user_id,
            'all_memberships': members_df.to_dict('records'),
            'family_space_check': family_df.to_dict('records') if not family_df.empty else [],
            'debug_info': {
                'total_memberships': len(members_df),
                'family_space_exists': not family_df.empty,
                'family_is_active': family_df.iloc[0]['is_active'] if not family_df.empty else False,
                'user_in_family': family_df.iloc[0]['is_member'] > 0 if not family_df.empty else False
            }
        })
        
    except Exception as e:
        logger.error(f"‚ùå Debug error: {e}")
        return jsonify({'error': str(e)}), 500

@flask_app.route('/get_space_members', methods=['POST'])
def api_get_space_members():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"""
    try:
        data = request.json
        if not data:
            return jsonify({'error': 'No JSON data provided'}), 400
            
        init_data = data.get('initData')
        space_id = data.get('spaceId')
        
        logger.info(f"üì¶ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å get_space_members: space_id={space_id}")
        
        if not validate_webapp_data(init_data):
            return jsonify({'error': 'Invalid data'}), 401
            
        user_data = get_user_from_init_data(init_data)
        if not user_data:
            return jsonify({'error': 'User not found'}), 401
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Å—Ç–æ–∏—Ç –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
        if not is_user_in_space(user_data['id'], space_id):
            return jsonify({'error': 'Access denied'}), 403
        
        conn = get_db_connection()
        
        if isinstance(conn, sqlite3.Connection):
            query = '''SELECT user_id, user_name, role, joined_at 
                       FROM space_members 
                       WHERE space_id = ?
                       ORDER BY 
                         CASE role 
                           WHEN 'owner' THEN 1 
                           WHEN 'admin' THEN 2 
                           ELSE 3 
                         END, joined_at'''
            df = pd.read_sql_query(query, conn, params=(space_id,))
        else:
            query = '''SELECT user_id, user_name, role, joined_at 
                       FROM space_members 
                       WHERE space_id = %s
                       ORDER BY 
                         CASE role 
                           WHEN 'owner' THEN 1 
                           WHEN 'admin' THEN 2 
                           ELSE 3 
                         END, joined_at'''
            df = pd.read_sql_query(query, conn, params=(space_id,))
        
        conn.close()
        
        members = []
        for _, row in df.iterrows():
            members.append({
                'user_id': int(row['user_id']),
                'user_name': row['user_name'],
                'role': row['role'],
                'joined_at': row['joined_at'].isoformat() if hasattr(row['joined_at'], 'isoformat') else str(row['joined_at'])
            })
        
        return jsonify({'members': members})
        
    except Exception as e:
        logger.error(f"‚ùå API Error in get_space_members: {e}")
        return jsonify({'error': 'Internal server error'}), 500

@flask_app.route('/create_space', methods=['POST'])
def api_create_space():
    """API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"""
    try:
        data = request.json
        if not data:
            return jsonify({'error': 'No JSON data provided'}), 400
            
        init_data = data.get('initData')
        name = data.get('name')
        space_type = data.get('type')
        description = data.get('description', '')
        
        logger.info(f"üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞: {name}, —Ç–∏–ø: {space_type}")
        logger.info(f"üì¶ –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞: {data}")
        
        if not validate_webapp_data(init_data):
            logger.warning("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è WebApp –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
            return jsonify({'error': 'Invalid data'}), 401
            
        user_data = get_user_from_init_data(init_data)
        if not user_data:
            logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return jsonify({'error': 'User not found'}), 401
            
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data}")
            
        if not name or not space_type:
            logger.warning("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
            return jsonify({'error': 'Missing required fields'}), 400
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
        result = create_financial_space(
            name, description, space_type, 
            user_data['id'], user_data['first_name']
        )
        
        if result and result[0] is not None:
            space_id, invite_code = result
            logger.info(f"‚úÖ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–æ: {space_id}, –∫–æ–¥: {invite_code}")
            return jsonify({
                'success': True,
                'space_id': space_id,
                'invite_code': invite_code
            })
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ - —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ None")
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            return jsonify({
                'error': 'Failed to create space - database error',
                'details': 'Check database connection and logs'
            }), 500
            
    except Exception as e:
        logger.error(f"‚ùå API Error in create_space: {e}")
        import traceback
        logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
        return jsonify({'error': f'Internal server error: {str(e)}'}), 500


@flask_app.route('/delete_space', methods=['POST'])
def api_delete_space():
    """API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"""
    try:
        data = request.json
        if not data:
            return jsonify({'error': 'No JSON data provided'}), 400
            
        init_data = data.get('initData')
        space_id = data.get('spaceId')
        
        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞: {space_id}")
        
        if not validate_webapp_data(init_data):
            return jsonify({'error': 'Invalid data'}), 401
            
        user_data = get_user_from_init_data(init_data)
        if not user_data:
            return jsonify({'error': 'User not found'}), 401
            
        if not space_id:
            return jsonify({'error': 'Missing space ID'}), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        conn = get_db_connection()
        if isinstance(conn, sqlite3.Connection):
            query = '''SELECT role FROM space_members WHERE space_id = ? AND user_id = ?'''
            df = pd.read_sql_query(query, conn, params=(space_id, user_data['id']))
        else:
            query = '''SELECT role FROM space_members WHERE space_id = %s AND user_id = %s'''
            df = pd.read_sql_query(query, conn, params=(space_id, user_data['id']))
        
        if df.empty or df.iloc[0]['role'] != 'owner':
            return jsonify({'error': '–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ'}), 403
        
        # –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ - –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–µ
        if isinstance(conn, sqlite3.Connection):
            c = conn.cursor()
            c.execute('UPDATE financial_spaces SET is_active = FALSE WHERE id = ?', (space_id,))
        else:
            c = conn.cursor()
            c.execute('UPDATE financial_spaces SET is_active = FALSE WHERE id = %s', (space_id,))
        
        conn.commit()
        conn.close()
        
        return jsonify({'success': True, 'message': '–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–æ'})
        
    except Exception as e:
        logger.error(f"‚ùå API Error in delete_space: {e}")
        return jsonify({'error': 'Internal server error'}), 500


@flask_app.route('/add_expense', methods=['POST'])
def api_add_expense():
    """API –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞—Ç—ã"""
    try:
        data = request.json
        if not data:
            return jsonify({'error': 'No JSON data provided'}), 400
            
        init_data = data.get('initData')
        amount = data.get('amount')
        category = data.get('category')
        description = data.get('description', '')
        space_id = data.get('spaceId')
        currency = data.get('currency', 'RUB')
        
        logger.info(f"üí∞ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ç—ã: {amount} {currency}, –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
        
        if not validate_webapp_data(init_data):
            return jsonify({'error': 'Invalid data'}), 401
            
        user_data = get_user_from_init_data(init_data)
        if not user_data:
            return jsonify({'error': 'User not found'}), 401
            
        if not amount or not category or not space_id:
            return jsonify({'error': 'Missing required fields'}), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Å—Ç–æ–∏—Ç –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
        if not is_user_in_space(user_data['id'], space_id):
            return jsonify({'error': 'Access denied'}), 403
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞—Ç—É
        add_expense(
            user_data['id'], user_data['first_name'],
            float(amount), category, description, int(space_id), currency
        )
        
        return jsonify({'success': True})
            
    except Exception as e:
        logger.error(f"‚ùå API Error in add_expense: {e}")
        return jsonify({'error': 'Internal server error'}), 500

@flask_app.route('/get_analytics', methods=['POST'])
def api_get_analytics():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    try:
        data = request.json
        if not data:
            return jsonify({'error': 'No JSON data provided'}), 400
            
        init_data = data.get('initData')
        space_id = data.get('spaceId')
        user_id = data.get('userId')
        
        logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: space_id={space_id}, user_id={user_id}")
        
        if not validate_webapp_data(init_data):
            return jsonify({'error': 'Invalid data'}), 401
            
        user_data = get_user_from_init_data(init_data)
        if not user_data:
            return jsonify({'error': 'User not found'}), 401
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Å—Ç–æ–∏—Ç –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
        if not is_user_in_space(user_data['id'], space_id):
            return jsonify({'error': 'Access denied'}), 403
        
        conn = get_db_connection()
        
        # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
        if isinstance(conn, sqlite3.Connection):
            users_query = '''SELECT DISTINCT user_id, user_name FROM space_members WHERE space_id = ?'''
            users_df = pd.read_sql_query(users_query, conn, params=(space_id,))
        else:
            users_query = '''SELECT DISTINCT user_id, user_name FROM space_members WHERE space_id = %s'''
            users_df = pd.read_sql_query(users_query, conn, params=(space_id,))
        
        users = []
        for _, row in users_df.iterrows():
            users.append({
                'id': int(row['user_id']),
                'name': row['user_name']
            })
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        if user_id:
            if isinstance(conn, sqlite3.Connection):
                query = '''SELECT category, SUM(amount) as total, COUNT(*) as count
                           FROM expenses 
                           WHERE space_id = ? AND user_id = ?
                           GROUP BY category 
                           ORDER BY total DESC'''
                df = pd.read_sql_query(query, conn, params=(space_id, user_id))
                
                count_query = '''SELECT COUNT(*) as total_count FROM expenses WHERE space_id = ? AND user_id = ?'''
                count_df = pd.read_sql_query(count_query, conn, params=(space_id, user_id))
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –¥–ª—è –±—é–¥–∂–µ—Ç–∞
                total_spent_query = '''SELECT COALESCE(SUM(amount), 0) as total_spent FROM expenses WHERE space_id = ? AND user_id = ? AND strftime('%Y-%m', date) = strftime('%Y-%m', 'now')'''
                total_spent_df = pd.read_sql_query(total_spent_query, conn, params=(space_id, user_id))
            else:
                query = '''SELECT category, SUM(amount) as total, COUNT(*) as count
                           FROM expenses 
                           WHERE space_id = %s AND user_id = %s
                           GROUP BY category 
                           ORDER BY total DESC'''
                df = pd.read_sql_query(query, conn, params=(space_id, user_id))
                
                count_query = '''SELECT COUNT(*) as total_count FROM expenses WHERE space_id = %s AND user_id = %s'''
                count_df = pd.read_sql_query(count_query, conn, params=(space_id, user_id))
                
                total_spent_query = '''SELECT COALESCE(SUM(amount), 0) as total_spent FROM expenses WHERE space_id = %s AND user_id = %s AND DATE_TRUNC('month', date) = DATE_TRUNC('month', CURRENT_DATE)'''
                total_spent_df = pd.read_sql_query(total_spent_query, conn, params=(space_id, user_id))
        else:
            if isinstance(conn, sqlite3.Connection):
                query = '''SELECT category, SUM(amount) as total, COUNT(*) as count
                           FROM expenses 
                           WHERE space_id = ?
                           GROUP BY category 
                           ORDER BY total DESC'''
                df = pd.read_sql_query(query, conn, params=(space_id,))
                
                count_query = '''SELECT COUNT(*) as total_count FROM expenses WHERE space_id = ?'''
                count_df = pd.read_sql_query(count_query, conn, params=(space_id,))
                
                total_spent_query = '''SELECT COALESCE(SUM(amount), 0) as total_spent FROM expenses WHERE space_id = ? AND strftime('%Y-%m', date) = strftime('%Y-%m', 'now')'''
                total_spent_df = pd.read_sql_query(total_spent_query, conn, params=(space_id,))
            else:
                query = '''SELECT category, SUM(amount) as total, COUNT(*) as count
                           FROM expenses 
                           WHERE space_id = %s
                           GROUP BY category 
                           ORDER BY total DESC'''
                df = pd.read_sql_query(query, conn, params=(space_id,))
                
                count_query = '''SELECT COUNT(*) as total_count FROM expenses WHERE space_id = %s'''
                count_df = pd.read_sql_query(count_query, conn, params=(space_id,))
                
                total_spent_query = '''SELECT COALESCE(SUM(amount), 0) as total_spent FROM expenses WHERE space_id = %s AND DATE_TRUNC('month', date) = DATE_TRUNC('month', CURRENT_DATE)'''
                total_spent_df = pd.read_sql_query(total_spent_query, conn, params=(space_id,))
        
        conn.close()
        
        categories = []
        for _, row in df.iterrows():
            categories.append({
                'name': row['category'],
                'total': float(row['total']),
                'count': int(row['count'])
            })
        
        total_count = int(count_df.iloc[0]['total_count']) if not count_df.empty else 0
        total_spent = float(total_spent_df.iloc[0]['total_spent']) if not total_spent_df.empty else 0
        
        # –ü–æ–ª—É—á–∞–µ–º –±—é–¥–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        budget, currency = get_user_budget(user_data['id'], space_id)
        
        return jsonify({
            'categories': categories,
            'total_count': total_count,
            'total_spent': total_spent,
            'budget': budget,
            'currency': currency,
            'users': users
        })
        
    except Exception as e:
        logger.error(f"‚ùå API Error in get_analytics: {e}")
        return jsonify({'error': 'Internal server error'}), 500

@flask_app.route('/set_budget', methods=['POST'])
def api_set_budget():
    """API –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±—é–¥–∂–µ—Ç–∞"""
    try:
        data = request.json
        if not data:
            return jsonify({'error': 'No JSON data provided'}), 400
            
        init_data = data.get('initData')
        space_id = data.get('spaceId')
        amount = data.get('amount')
        currency = data.get('currency', 'RUB')
        
        logger.info(f"üéØ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—é–¥–∂–µ—Ç–∞: {amount} {currency} –¥–ª—è space_id={space_id}")
        
        if not validate_webapp_data(init_data):
            return jsonify({'error': 'Invalid data'}), 401
            
        user_data = get_user_from_init_data(init_data)
        if not user_data:
            return jsonify({'error': 'User not found'}), 401
            
        if not amount or not space_id:
            return jsonify({'error': 'Missing required fields'}), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Å—Ç–æ–∏—Ç –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
        if not is_user_in_space(user_data['id'], space_id):
            return jsonify({'error': 'Access denied'}), 403
        
        success = set_user_budget(user_data['id'], space_id, float(amount), currency)
        
        return jsonify({'success': success})
            
    except Exception as e:
        logger.error(f"‚ùå API Error in set_budget: {e}")
        return jsonify({'error': 'Internal server error'}), 500

@flask_app.route('/join_space', methods=['POST'])
def api_join_space():
    """API –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É –ø–æ –∫–æ–¥—É"""
    try:
        data = request.json
        logger.info(f"üë• Join space request: {data}")
        
        init_data = data.get('initData')
        invite_code = data.get('inviteCode')
        
        logger.info(f"üîë Invite code: {invite_code}")
        
        if not validate_webapp_data(init_data):
            logger.warning("‚ùå Validation failed")
            return jsonify({'error': 'Invalid data'}), 401
            
        user_data = get_user_from_init_data(init_data)
        if not user_data:
            logger.warning("‚ùå User not found")
            return jsonify({'error': 'User not found'}), 401
            
        if not invite_code:
            logger.warning("‚ùå No invite code provided")
            return jsonify({'error': 'Missing invite code'}), 400
        
        conn = get_db_connection()
        logger.info("‚úÖ Database connected")
        
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ø–æ –∫–æ–¥—É
        if isinstance(conn, sqlite3.Connection):
            space_query = '''SELECT id, name, space_type FROM financial_spaces WHERE invite_code = ? AND is_active = TRUE'''
            space_df = pd.read_sql_query(space_query, conn, params=(invite_code,))
        else:
            space_query = '''SELECT id, name, space_type FROM financial_spaces WHERE invite_code = %s AND is_active = TRUE'''
            space_df = pd.read_sql_query(space_query, conn, params=(invite_code,))
        
        logger.info(f"üîç Found spaces: {len(space_df)}")
        
        if space_df.empty:
            logger.warning(f"‚ùå Space not found for code: {invite_code}")
            return jsonify({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}), 404
        
        space_id = int(space_df.iloc[0]['id'])  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ int
        space_name = str(space_df.iloc[0]['name'])  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ string
        space_type = str(space_df.iloc[0]['space_type'])  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ string
        
        logger.info(f"üè† Space found: {space_name} (ID: {space_id})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
        if isinstance(conn, sqlite3.Connection):
            member_query = '''SELECT 1 FROM space_members WHERE space_id = ? AND user_id = ?'''
            member_df = pd.read_sql_query(member_query, conn, params=(space_id, user_data['id']))
        else:
            member_query = '''SELECT 1 FROM space_members WHERE space_id = %s AND user_id = %s'''
            member_df = pd.read_sql_query(member_query, conn, params=(space_id, user_data['id']))
        
        if not member_df.empty:
            logger.info(f"‚ÑπÔ∏è User {user_data['id']} already in space {space_id} - returning success")
            # –í–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
            return jsonify({
                'success': True,
                'space_id': space_id,
                'space_name': space_name,
                'space_type': space_type,
                'already_member': True  # –§–ª–∞–≥ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –±—ã–ª —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
            })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
        if isinstance(conn, sqlite3.Connection):
            c = conn.cursor()
            c.execute('''INSERT INTO space_members (space_id, user_id, user_name, role)
                         VALUES (?, ?, ?, ?)''', 
                     (space_id, user_data['id'], user_data['first_name'], 'member'))
        else:
            c = conn.cursor()
            c.execute('''INSERT INTO space_members (space_id, user_id, user_name, role)
                         VALUES (%s, %s, %s, %s)''', 
                     (space_id, user_data['id'], user_data['first_name'], 'member'))
        
        conn.commit()
        conn.close()
        
        logger.info(f"‚úÖ User {user_data['id']} joined space {space_id}")
        
        return jsonify({
            'success': True,
            'space_id': space_id,
            'space_name': space_name,
            'space_type': space_type,
            'already_member': False
        })
        
    except Exception as e:
        logger.error(f"‚ùå API Error in join_space: {e}")
        import traceback
        logger.error(f"üîç Traceback: {traceback.format_exc()}")
        return jsonify({'error': f'Internal server error: {str(e)}'}), 500

@flask_app.route('/debug_space_status', methods=['POST'])
def debug_space_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"""
    try:
        data = request.json
        space_id = data.get('spaceId')
        
        conn = get_db_connection()
        
        if isinstance(conn, sqlite3.Connection):
            query = '''SELECT id, name, is_active, invite_code FROM financial_spaces WHERE id = ?'''
            space_df = pd.read_sql_query(query, conn, params=(space_id,))
        else:
            query = '''SELECT id, name, is_active, invite_code FROM financial_spaces WHERE id = %s'''
            space_df = pd.read_sql_query(query, conn, params=(space_id,))
        
        conn.close()
        
        if space_df.empty:
            return jsonify({'error': 'Space not found'}), 404
        
        space = space_df.iloc[0]
        return jsonify({
            'space_id': int(space['id']),
            'name': str(space['name']),
            'is_active': bool(space['is_active']),
            'invite_code': str(space['invite_code'])
        })
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@flask_app.route('/remove_member', methods=['POST'])
def api_remove_member():
    """API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"""
    try:
        data = request.json
        if not data:
            return jsonify({'error': 'No JSON data provided'}), 400
            
        init_data = data.get('initData')
        space_id = data.get('spaceId')
        target_user_id = data.get('targetUserId')
        
        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {target_user_id} –∏–∑ space_id={space_id}")
        
        if not validate_webapp_data(init_data):
            return jsonify({'error': 'Invalid data'}), 401
            
        user_data = get_user_from_init_data(init_data)
        if not user_data:
            return jsonify({'error': 'User not found'}), 401
            
        if not space_id or not target_user_id:
            return jsonify({'error': 'Missing required fields'}), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not is_user_admin_in_space(user_data['id'], space_id):
            return jsonify({'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤'}), 403
        
        # –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
        if user_data['id'] == target_user_id:
            return jsonify({'error': '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è'}), 400
        
        success, message = remove_member_from_space(space_id, target_user_id, user_data['id'])
        
        return jsonify({'success': success, 'message': message})
        
    except Exception as e:
        logger.error(f"‚ùå API Error in remove_member: {e}")
        return jsonify({'error': 'Internal server error'}), 500
@flask_app.route('/delete_user_category', methods=['POST'])
def api_delete_user_category():
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        data = request.json
        init_data = data.get('initData')
        space_id = data.get('spaceId')
        category_name = data.get('categoryName')
        
        if not validate_webapp_data(init_data):
            return jsonify({'error': 'Invalid data'}), 401
            
        user_data = get_user_from_init_data(init_data)
        if not user_data:
            return jsonify({'error': 'User not found'}), 401
            
        if not category_name:
            return jsonify({'error': 'Category name is required'}), 400
        
        conn = get_db_connection()
        
        if isinstance(conn, sqlite3.Connection):
            # –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            result = conn.execute('''DELETE FROM user_categories 
                                   WHERE user_id = ? AND (space_id = ? OR space_id = 0) 
                                   AND category_name = ? AND is_custom = TRUE''',
                                (user_data['id'], space_id if space_id else 0, category_name))
            
            deleted_count = result.rowcount
        else:
            cursor = conn.cursor()
            cursor.execute('''DELETE FROM user_categories 
                           WHERE user_id = %s AND (space_id = %s OR space_id = 0) 
                           AND category_name = %s AND is_custom = TRUE''',
                         (user_data['id'], space_id if space_id else 0, category_name))
            
            deleted_count = cursor.rowcount
        
        conn.commit()
        conn.close()
        
        if deleted_count > 0:
            return jsonify({'success': True, 'message': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞'})
        else:
            return jsonify({'error': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é'}), 404
        
    except Exception as e:
        logger.error(f"‚ùå API Error in delete_user_category: {e}")
        return jsonify({'error': 'Internal server error'}), 500
    

@flask_app.route('/debug/postgres')
def debug_postgres():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
        cursor.execute("SELECT COUNT(*) as spaces_count FROM financial_spaces")
        spaces_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) as expenses_count FROM expenses")
        expenses_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT name FROM financial_spaces LIMIT 5")
        spaces = [row[0] for row in cursor.fetchall()]
        
        conn.close()
        
        return jsonify({
            "status": "success",
            "database": "PostgreSQL",
            "spaces_count": spaces_count,
            "expenses_count": expenses_count,
            "spaces": spaces,
            "message": f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {spaces_count} –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –∏ {expenses_count} —Ç—Ä–∞—Ç"
        })
        
    except Exception as e:
        return jsonify({
            "status": "error",
            "error": str(e)
        }), 500
# ===== TELEGRAM BOT HANDLERS (–°–û–•–†–ê–ù–ï–ù–´ –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô) =====
async def check_if_new_user(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–æ–≤—ã–π –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    conn = get_db_connection()
    try:
        if isinstance(conn, sqlite3.Connection):
            query = '''SELECT COUNT(*) as count FROM space_members WHERE user_id = ?'''
            result = pd.read_sql_query(query, conn, params=(user_id,))
        else:
            query = '''SELECT COUNT(*) as count FROM space_members WHERE user_id = %s'''
            result = pd.read_sql_query(query, conn, params=(user_id,))
        
        count = result.iloc[0]['count']
        return count == 0  # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π - –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    except Exception as e:
        logger.error(f"‚ùå Error checking if user is new: {e}")
        return True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º –Ω–æ–≤—ã–º
    finally:
        conn.close()



async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    
    # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê
    print(f"=== üöÄ START COMMAND CALLED ===")
    print(f"üë§ User: {user.id} - {user.first_name}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏–ª–∏ –æ–±—ã—á–Ω—ã–π —Å—Ç–∞—Ä—Ç
    args = context.args
    if args and args[0].startswith('invite_'):
        print(f"üéØ Invite detected: {args[0]}")
        await handle_invite_start(update, context)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    spaces_count, total_expenses, last_expense_amount = await get_user_statistics(user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    is_new_user = await check_if_new_user(user.id)
    
    if is_new_user:
        welcome_text = (
            f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n\n"
            "ü§ñ <b>Finance Tracker</b> - —ç—Ç–æ –º–æ—â–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞–¥ –≤–∞—à–∏–º–∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏!\n\n"
            "üí´ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
            "‚Ä¢ üí∞ <b>–£–º–Ω—ã–π —É—á–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤</b> - –ª–µ–≥–∫–æ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–π—Ç–µ —Ç—Ä–∞—Ç—ã\n"
            "‚Ä¢ üë• <b>–°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞</b> - –≤–µ–¥–∏—Ç–µ –æ–±—â–∏–π –±—é–¥–∂–µ—Ç —Å —Å–µ–º—å–µ–π, –¥—Ä—É–∑—å—è–º–∏ –∏–ª–∏ –∫–æ–ª–ª–µ–≥–∞–º–∏\n"
            "‚Ä¢ üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</b> - –Ω–∞–≥–ª—è–¥–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏, –æ—Ç—á–µ—Ç—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n"
            "‚Ä¢ üéØ <b>–ì–∏–±–∫–∏–µ –±—é–¥–∂–µ—Ç—ã</b> - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ –ª–∏–º–∏—Ç—ã –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏\n"
            "‚Ä¢ üè∑Ô∏è <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b> - —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤\n"
            "‚Ä¢ üìà <b>–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π</b> - –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—Ä–∞—Ç —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏\n"
            "‚Ä¢ üì§ <b>–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</b> - –≤—ã–≥—Ä—É–∂–∞–π—Ç–µ –æ—Ç—á–µ—Ç—ã –≤ Excel –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞\n"
            "‚Ä¢ üîî <b>–£–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b> - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –±—é–¥–∂–µ—Ç–µ\n\n"
            
            "üöÄ <b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å:</b>\n"
            "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>¬´–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ç—Ä–µ–∫–µ—Ä¬ª</b> –≤ –º–µ–Ω—é –±–æ—Ç–∞\n"
            "2. –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–µ –ø–µ—Ä–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ (–ª–∏—á–Ω–æ–µ –∏–ª–∏ –æ–±—â–µ–µ)\n"
            "3. –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à–∏ –ø–µ—Ä–≤—ã–µ —Ç—Ä–∞—Ç—ã\n"
            "4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –±—é–¥–∂–µ—Ç –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤\n"
            "5. –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –≤ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞\n\n"
            
            "üì± <b>–£–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:</b>\n"
            "‚Ä¢ üè† <b>–ì–ª–∞–≤–Ω–∞—è</b> - –æ–±–∑–æ—Ä —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è\n"
            "‚Ä¢ üë• <b>–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞</b> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏—á–Ω—ã–º–∏ –∏ –≥—Ä—É–ø–ø–æ–≤—ã–º–∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏\n"
            "‚Ä¢ üí∏ <b>–¢—Ä–∞—Ç—ã</b> - –±—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤\n"
            "‚Ä¢ üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</b> - –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –∏ –≥—Ä–∞—Ñ–∏–∫–∏\n"
            "‚Ä¢ ‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ –±—é–¥–∂–µ—Ç–∞–º–∏\n\n"
            
            
            "–ù–∞—á–Ω–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–≤–æ–±–æ–¥–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! üí™"
        )
    else:
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_text = f"üí´ <b>–í–∞—à–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        stats_text += f"‚Ä¢ üè† –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤: {spaces_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö\n"
        stats_text += f"‚Ä¢ üìà –¢—Ä–∞—Ç –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {total_expenses} –æ–ø–µ—Ä–∞—Ü–∏–π\n"
        
        if last_expense_amount > 0:
            stats_text += f"‚Ä¢ üí∞ –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞—Ç–∞: {last_expense_amount} —Ä—É–±\n\n"
        else:
            stats_text += f"‚Ä¢ üí∞ –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞—Ç–∞: –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞—Ç\n\n"
        
        welcome_text = (
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}! üëã\n\n"
            "ü§ñ <b>Finance Tracker</b> –≤—Å–µ–≥–¥–∞ –ø–æ–¥ —Ä—É–∫–æ–π!\n\n"
            f"{stats_text}"
            
            "üìä <b>–ß—Ç–æ –Ω–æ–≤–æ–≥–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å:</b>\n"
            "‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è —Å–µ–º—å–∏ –∏–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞\n"
            "‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–µ—Å—è—á–Ω—ã–π –±—é–¥–∂–µ—Ç –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤\n"
            "‚Ä¢ –ò–∑—É—á–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n"
            "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞\n"
            "‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç\n\n"
            
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ <b>¬´–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ç—Ä–µ–∫–µ—Ä¬ª</b> –≤ –º–µ–Ω—é!"
        )
    
    # –û–¢–ü–†–ê–í–õ–Ø–ï–ú –°–û–û–ë–©–ï–ù–ò–ï –ë–ï–ó –ö–õ–ê–í–ò–ê–¢–£–†–´
    print(f"üì® Sending welcome message to user {user.id} (no keyboard)")
    await update.message.reply_text(
        welcome_text,
        parse_mode='HTML'
    )
    print("‚úÖ Welcome message sent successfully (no keyboard)")

async def get_user_statistics(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = get_db_connection()
    try:
        if isinstance(conn, sqlite3.Connection):
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤
            spaces_query = '''SELECT COUNT(DISTINCT space_id) as spaces_count 
                            FROM space_members WHERE user_id = ?'''
            spaces_df = pd.read_sql_query(spaces_query, conn, params=(user_id,))
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞—Ç
            expenses_query = '''SELECT COUNT(*) as total_expenses 
                              FROM expenses WHERE user_id = ?'''
            expenses_df = pd.read_sql_query(expenses_query, conn, params=(user_id,))
            
            # –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞—Ç–∞
            last_expense_query = '''SELECT amount FROM expenses 
                                  WHERE user_id = ? 
                                  ORDER BY date DESC LIMIT 1'''
            last_expense_df = pd.read_sql_query(last_expense_query, conn, params=(user_id,))
        else:
            # PostgreSQL –≤–µ—Ä—Å–∏—è
            spaces_query = '''SELECT COUNT(DISTINCT space_id) as spaces_count 
                            FROM space_members WHERE user_id = %s'''
            spaces_df = pd.read_sql_query(spaces_query, conn, params=(user_id,))
            
            expenses_query = '''SELECT COUNT(*) as total_expenses 
                              FROM expenses WHERE user_id = %s'''
            expenses_df = pd.read_sql_query(expenses_query, conn, params=(user_id,))
            
            last_expense_query = '''SELECT amount FROM expenses 
                                  WHERE user_id = %s 
                                  ORDER BY date DESC LIMIT 1'''
            last_expense_df = pd.read_sql_query(last_expense_query, conn, params=(user_id,))
        
        spaces_count = spaces_df.iloc[0]['spaces_count'] if not spaces_df.empty else 0
        total_expenses = expenses_df.iloc[0]['total_expenses'] if not expenses_df.empty else 0
        last_expense_amount = last_expense_df.iloc[0]['amount'] if not last_expense_df.empty else 0
        
        return spaces_count, total_expenses, last_expense_amount
        
    except Exception as e:
        logger.error(f"‚ùå Error getting user statistics: {e}")
        return 0, 0, 0
    finally:
        conn.close()

async def test_welcome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
    await start(update, context)

async def debug_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞"""
    user = update.effective_user
    user_id = user.id
    
    conn = get_db_connection()
    try:
        if isinstance(conn, sqlite3.Connection):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º space_members
            query = '''SELECT COUNT(*) as count FROM space_members WHERE user_id = ?'''
            result = pd.read_sql_query(query, conn, params=(user_id,))
        else:
            query = '''SELECT COUNT(*) as count FROM space_members WHERE user_id = %s'''
            result = pd.read_sql_query(query, conn, params=(user_id,))
        
        count = result.iloc[0]['count']
        
        await update.message.reply_text(
            f"üîç <b>–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
            f"üë§ ID: {user_id}\n"
            f"üìõ –ò–º—è: {user.first_name}\n"
            f"üè† –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤: {count}\n"
            f"üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {count == 0}",
            parse_mode='HTML'
        )
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
    finally:
        conn.close()
        



        
async def handle_invite_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º"""
    user = update.effective_user
    args = context.args
    
    if args and args[0].startswith('invite_'):
        invite_code = args[0].replace('invite_', '')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        conn = get_db_connection()
        try:
            if isinstance(conn, sqlite3.Connection):
                space_query = '''SELECT id, name FROM financial_spaces WHERE invite_code = ? AND is_active = TRUE'''
                space_df = pd.read_sql_query(space_query, conn, params=(invite_code,))
            else:
                space_query = '''SELECT id, name FROM financial_spaces WHERE invite_code = %s AND is_active = TRUE'''
                space_df = pd.read_sql_query(space_query, conn, params=(invite_code,))
            
            if not space_df.empty:
                space_id = space_df.iloc[0]['id']
                space_name = space_df.iloc[0]['name']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                if isinstance(conn, sqlite3.Connection):
                    member_query = '''SELECT 1 FROM space_members WHERE space_id = ? AND user_id = ?'''
                    member_df = pd.read_sql_query(member_query, conn, params=(space_id, user.id))
                else:
                    member_query = '''SELECT 1 FROM space_members WHERE space_id = %s AND user_id = %s'''
                    member_df = pd.read_sql_query(member_query, conn, params=(space_id, user.id))
                
                if member_df.empty:
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if isinstance(conn, sqlite3.Connection):
                        c = conn.cursor()
                        c.execute('''INSERT INTO space_members (space_id, user_id, user_name, role)
                                     VALUES (?, ?, ?, ?)''', 
                                 (space_id, user.id, user.first_name, 'member'))
                    else:
                        c = conn.cursor()
                        c.execute('''INSERT INTO space_members (space_id, user_id, user_name, role)
                                     VALUES (%s, %s, %s, %s)''', 
                                 (space_id, user.id, user.first_name, 'member'))
                    conn.commit()
                    
                    # –£–õ–£–ß–®–ï–ù–ù–û–ï –ü–†–ò–í–ï–¢–°–¢–í–ò–ï –î–õ–Ø –ü–†–ò–ì–õ–ê–®–ï–ù–ù–´–•
                    welcome_text = (
                        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, {user.first_name}!\n\n"
                        f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É: <b>{space_name}</b>\n\n"
                        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                        "‚Ä¢ üìä –í–∏–¥–µ—Ç—å –æ–±—â–∏–µ —Ç—Ä–∞—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
                        "‚Ä¢ üí∏ –î–æ–±–∞–≤–ª—è—Ç—å —Å–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã\n"
                        "‚Ä¢ üìà –°–ª–µ–¥–∏—Ç—å –∑–∞ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π\n"
                        "‚Ä¢ üéØ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –±—é–¥–∂–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏\n\n"
                        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ç—Ä–µ–∫–µ—Ä –∏ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É!"
                    )
                else:
                    welcome_text = f"‚ÑπÔ∏è –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ: <b>{space_name}</b>"
                
                await update.message.reply_text(
                    welcome_text,
                    reply_markup=ReplyKeyboardMarkup([
                        [KeyboardButton("üìä –û—Ç–∫—Ä—ã—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ç—Ä–µ–∫–µ—Ä", web_app=WebAppInfo(url=WEB_APP_URL))]
                    ], resize_keyboard=True),
                    parse_mode='HTML'
                )
            else:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É")
        finally:
            conn.close()
    else:
        await start(update, context)

async def handle_web_app_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        user = update.effective_user
        data = update.message.web_app_data.data
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        parsed_data = json.loads(data)
        action = parsed_data.get('action')
        
        if action == 'add_expense':
            amount = parsed_data.get('amount')
            category = parsed_data.get('category')
            description = parsed_data.get('description', '')
            
            add_expense(user.id, user.first_name, amount, category, description)
            
            await update.message.reply_text(
                f"‚úÖ –¢—Ä–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n"
                f"üí∏ –°—É–º–º–∞: {amount} —Ä—É–±\n"
                f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description if description else '–Ω–µ—Ç'}"
            )
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö")


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —Å —á–µ–∫–æ–º"""
    user = update.effective_user
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
        photo_file = await update.message.photo[-1].get_file()
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as temp_file:
            await photo_file.download_to_drive(temp_file.name)
            
            # –ß–∏—Ç–∞–µ–º –±–∞–π—Ç—ã
            with open(temp_file.name, 'rb') as f:
                image_bytes = f.read()
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(temp_file.name)
        
        await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —á–µ–∫...")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ–∫
        receipt_data = await process_receipt_photo(image_bytes)
        
        if receipt_data and receipt_data['total'] > 0:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            keyboard = [
                [KeyboardButton(f"‚úÖ –î–∞, –¥–æ–±–∞–≤–∏—Ç—å {receipt_data['total']} —Ä—É–±")],
                [KeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
            
            message_text = f"üìÑ –ß–µ–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω!\n\n"
            if receipt_data['store']:
                message_text += f"üè™ –ú–∞–≥–∞–∑–∏–Ω: {receipt_data['store']}\n"
            message_text += f"üí∞ –°—É–º–º–∞: {receipt_data['total']} —Ä—É–±\n\n"
            message_text += "–î–æ–±–∞–≤–∏—Ç—å —ç—Ç—É —Ç—Ä–∞—Ç—É?"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ–∫–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data['pending_receipt'] = receipt_data
            
            await update.message.reply_text(message_text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—É–º–º—É —á–µ–∫–∞. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ç—Ä–∞—Ç—É –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."
            )
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ–∫–∞")

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = update.effective_user
    
    try:
        voice_file = await update.message.voice.get_file()
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix='.ogg') as temp_file:
            await voice_file.download_to_drive(temp_file.name)
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
        r = sr.Recognizer()
        with sr.AudioFile(temp_file.name) as source:
            audio = r.record(source)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(temp_file.name)
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç
        text = r.recognize_google(audio, language='ru-RU')
        
        await update.message.reply_text(f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text}")
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        amount_match = re.search(r'(\d+)\s*(?:—Ä—É–±|—Ä|‚ÇΩ)', text.lower())
        category_match = re.search(r'(–µ–¥–∞|–ø—Ä–æ–¥—É–∫—Ç—ã|—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç|–∫–∞—Ñ–µ|—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è|–æ–¥–µ–∂–¥–∞|–¥—Ä—É–≥–æ–µ)', text.lower())
        
        if amount_match:
            amount = float(amount_match.group(1))
            category = category_match.group(1) if category_match else '–¥—Ä—É–≥–æ–µ'
            
            add_expense(user.id, user.first_name, amount, category, f"–ì–æ–ª–æ—Å–æ–≤–æ–µ: {text}")
            
            await update.message.reply_text(
                f"‚úÖ –¢—Ä–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n"
                f"üí∏ –°—É–º–º–∞: {amount} —Ä—É–±\n"
                f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}"
            )
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—É–º–º—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: '500 —Ä—É–±–ª–µ–π –Ω–∞ –µ–¥—É'"
            )
            
    except sr.UnknownValueError:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ–∫–∞
    if 'pending_receipt' in context.user_data and text.startswith('‚úÖ –î–∞'):
        receipt_data = context.user_data['pending_receipt']
        
        add_expense(
            user.id, user.first_name, 
            receipt_data['total'], 
            '–ø–æ–∫—É–ø–∫–∏', 
            f"–ß–µ–∫: {receipt_data['store'] or '–º–∞–≥–∞–∑–∏–Ω'}"
        )
        
        await update.message.reply_text(
            f"‚úÖ –¢—Ä–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n"
            f"üí∏ –°—É–º–º–∞: {receipt_data['total']} —Ä—É–±\n"
            f"üè™ –ú–∞–≥–∞–∑–∏–Ω: {receipt_data['store'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
        )
        
        del context.user_data['pending_receipt']
        return
    
    elif 'pending_receipt' in context.user_data and text.startswith('‚ùå –ù–µ—Ç'):
        await update.message.reply_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ")
        del context.user_data['pending_receipt']
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å—Ç—ã—Ö –∫–æ–º–∞–Ω–¥
    if text.lower() in ['–ø–æ–º–æ—â—å', 'help', '–∫–æ–º–∞–Ω–¥—ã']:
        await update.message.reply_text(
            "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É <b>¬´–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ç—Ä–µ–∫–µ—Ä¬ª</b> –≤ –º–µ–Ω—é –±–æ—Ç–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º\n"
            "üí´ <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
            "‚úÖ –£—á–µ—Ç –ª–∏—á–Ω—ã—Ö –∏ —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö —Ç—Ä–∞—Ç\n"
            "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "üéØ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—é–¥–∂–µ—Ç–æ–≤\n"
            "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏\n"
            "üîî –£–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±—é–¥–∂–µ—Ç–µ\n"
            "üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel",
            parse_mode='HTML'
        )
    else:
        # –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        await update.message.reply_text(
            "ü§ñ –Ø —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É <b>¬´–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ç—Ä–µ–∫–µ—Ä¬ª</b> –≤ –º–µ–Ω—é –±–æ—Ç–∞ "
            "–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.",
            parse_mode='HTML'
        )

# ===== –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø =====
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    if not BOT_TOKEN:
        logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–î –ü–ï–†–í–´–ú –î–ï–õ–û–ú
    if not check_database_connection():
        logger.error("üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL!")
        logger.error("üî¥ –ü—Ä–æ–≤–µ—Ä—å DATABASE_URL –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Railway!")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    logger.info("üóÉÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    init_db()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("test", test_welcome))
    application.add_handler(CommandHandler("debug", debug_user))
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_web_app_data))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.VOICE, handle_voice))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    import threading
    port = int(os.environ.get('PORT', 5000))
    
    def run_flask():
        flask_app.run(host='0.0.0.0', port=port, debug=False, use_reloader=False)
    
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()
    logger.info(f"üåê Flask API –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    try:
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        asyncio.run(application.bot.delete_webhook(drop_pending_updates=True))
        logger.info("‚úÖ –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        application.run_polling(
            allowed_updates=Update.ALL_TYPES,
            close_loop=False
        )
    except Exception as e:
        logger.error(f"üî¥ –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
        time.sleep(10)
        main()  # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
    except Exception as e:
        logger.error(f"üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == '__main__':
    main()
