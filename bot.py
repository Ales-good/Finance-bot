import sqlite3
import pandas as pd
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, WebAppInfo
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import os
import json
import tempfile
import re
import io
import subprocess
from PIL import Image, ImageEnhance, ImageFilter
import speech_recognition as sr
import numpy as np
import psycopg2
from urllib.parse import urlparse
import logging
from flask import Flask, request, jsonify
import random
import string
import threading
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Flask app –¥–ª—è API
flask_app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
bot_instance = None
application = None

# ===== –ù–ê–°–¢–†–û–ô–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• =====
def get_db_connection():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    if 'DATABASE_URL' in os.environ:
        try:
            database_url = os.environ['DATABASE_URL']
            parsed_url = urlparse(database_url)
            conn = psycopg2.connect(
                database=parsed_url.path[1:],
                user=parsed_url.username,
                password=parsed_url.password,
                host=parsed_url.hostname,
                port=parsed_url.port,
                sslmode='require'
            )
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ PostgreSQL")
            return conn
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
            return sqlite3.connect('finance.db', check_same_thread=False)
    else:
        return sqlite3.connect('finance.db', check_same_thread=False)

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_db_connection()
    
    if isinstance(conn, sqlite3.Connection):
        # SQLite
        c = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤
        c.execute('''CREATE TABLE IF NOT EXISTS financial_spaces
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      name TEXT NOT NULL,
                      description TEXT,
                      space_type TEXT DEFAULT 'personal',
                      created_by INTEGER,
                      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                      invite_code TEXT UNIQUE,
                      is_active BOOLEAN DEFAULT TRUE)''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤
        c.execute('''CREATE TABLE IF NOT EXISTS space_members
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      space_id INTEGER,
                      user_id INTEGER,
                      user_name TEXT,
                      role TEXT DEFAULT 'member',
                      joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                      FOREIGN KEY (space_id) REFERENCES financial_spaces (id))''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
        c.execute('''CREATE TABLE IF NOT EXISTS expenses
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      user_id INTEGER, 
                      user_name TEXT,
                      space_id INTEGER,
                      amount REAL, 
                      category TEXT, 
                      description TEXT, 
                      date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                      FOREIGN KEY (space_id) REFERENCES financial_spaces (id))''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –±—é–¥–∂–µ—Ç–æ–≤
        c.execute('''CREATE TABLE IF NOT EXISTS budgets
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      user_id INTEGER,
                      space_id INTEGER,
                      amount REAL,
                      month_year TEXT,
                      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                      FOREIGN KEY (space_id) REFERENCES financial_spaces (id))''')
        
    else:
        # PostgreSQL
        c = conn.cursor()
        
        c.execute('''CREATE TABLE IF NOT EXISTS financial_spaces
                     (id SERIAL PRIMARY KEY,
                      name TEXT NOT NULL,
                      description TEXT,
                      space_type TEXT DEFAULT 'personal',
                      created_by BIGINT,
                      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                      invite_code TEXT UNIQUE,
                      is_active BOOLEAN DEFAULT TRUE)''')
        
        c.execute('''CREATE TABLE IF NOT EXISTS space_members
                     (id SERIAL PRIMARY KEY,
                      space_id INTEGER REFERENCES financial_spaces(id),
                      user_id BIGINT,
                      user_name TEXT,
                      role TEXT DEFAULT 'member',
                      joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
        
        c.execute('''CREATE TABLE IF NOT EXISTS expenses
                     (id SERIAL PRIMARY KEY,
                      user_id BIGINT, 
                      user_name TEXT,
                      space_id INTEGER REFERENCES financial_spaces(id),
                      amount REAL, 
                      category TEXT, 
                      description TEXT, 
                      date TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
        
        c.execute('''CREATE TABLE IF NOT EXISTS budgets
                     (id SERIAL PRIMARY KEY,
                      user_id BIGINT,
                      space_id INTEGER REFERENCES financial_spaces(id),
                      amount REAL,
                      month_year TEXT,
                      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
    
    conn.commit()
    conn.close()
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# ===== –í–ê–õ–ò–î–ê–¶–ò–Ø WEBAPP DATA =====
def validate_webapp_data(init_data):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram WebApp"""
    try:
        if not init_data:
            return False
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ WebApp –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def get_user_from_init_data(init_data):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ initData"""
    try:
        params = {}
        for item in init_data.split('&'):
            if '=' in item:
                key, value = item.split('=', 1)
                params[key] = value
        
        if 'user' in params:
            user_data = json.loads(params['user'])
            return {
                'id': user_data.get('id'),
                'first_name': user_data.get('first_name'),
                'username': user_data.get('username')
            }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ initData: {e}")
    
    return None

# ===== –£–õ–£–ß–®–ï–ù–ù–û–ï –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–ï –ß–ï–ö–û–í =====
def check_tesseract_installation():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Tesseract"""
    try:
        result = subprocess.run(['tesseract', '--version'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            logger.info("‚úÖ Tesseract –¥–æ—Å—Ç—É–ø–µ–Ω –≤ PATH")
            return True
        else:
            logger.warning("‚ùå Tesseract –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH")
            return False
    except FileNotFoundError:
        logger.warning("‚ùå Tesseract –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ PATH")
        return False

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é Tesseract OCR...")
TESSERACT_AVAILABLE = check_tesseract_installation()

if TESSERACT_AVAILABLE:
    try:
        import pytesseract
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–∏ –∫ Tesseract (–¥–ª—è Windows)
        if os.name == 'nt':  # Windows
            possible_paths = [
                r'C:\Program Files\Tesseract-OCR\tesseract.exe',
                r'C:\Users\*\AppData\Local\Programs\Tesseract-OCR\tesseract.exe'
            ]
            for path in possible_paths:
                if os.path.exists(path):
                    pytesseract.pytesseract.tesseract_cmd = path
                    break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        pytesseract.get_tesseract_version()
        logger.info("‚úÖ Tesseract OCR –¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception as e:
        TESSERACT_AVAILABLE = False
        logger.warning(f"‚ùå Tesseract OCR –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
else:
    logger.warning("‚ö†Ô∏è Tesseract –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–µ–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")

def preprocess_image_for_ocr(image):
    """–£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è OCR"""
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ grayscale
        if image.mode != 'L':
            image = image.convert('L')
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        width, height = image.size
        if width < 1000 or height < 1000:
            new_size = (width * 2, height * 2)
            image = image.resize(new_size, Image.Resampling.LANCZOS)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å
        enhancer = ImageEnhance.Contrast(image)
        image = enhancer.enhance(2.0)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–µ–∑–∫–æ—Å—Ç—å
        image = image.filter(ImageFilter.SHARPEN)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—é
        image = image.point(lambda x: 0 if x < 128 else 255, '1')
        
        return image
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return image

def parse_receipt_text(text):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —á–µ–∫–∞"""
    logger.info("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—Å—Ç —á–µ–∫–∞...")
    
    lines = text.split('\n')
    receipt_data = {
        'total': 0,
        'store': None,
        'date': None,
        'items': [],
        'raw_text': text
    }
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—É–º–º (—É–ª—É—á—à–µ–Ω–Ω—ã–µ)
    total_patterns = [
        r'(?:–∏—Ç–æ–≥–æ|–≤—Å–µ–≥–æ|—Å—É–º–º–∞|–∫\s*–æ–ø–ª–∞—Ç–µ|total|–∏—Ç–æ–≥|—á–µ–∫)[^\d]*(\d+[.,]\d{2})',
        r'(\d+[.,]\d{2})\s*(?:—Ä—É–±|—Ä|‚ÇΩ|rur|rub|r|—Ä—É–±–ª–µ–π)',
        r'(?:—Ü–µ–Ω–∞|—Å—Ç–æ–∏–º–æ—Å—Ç—å|–æ–ø–ª–∞—Ç|–≤–Ω–µ—Å–µ–Ω)[^\d]*(\d+[.,]\d{2})',
        r'(\d+[.,]\d{2})\s*$',  # –ß–∏—Å–ª–∞ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
    ]
    
    # –ü–æ–∏—Å–∫ –º–∞–≥–∞–∑–∏–Ω–∞
    store_keywords = ['–º–∞–≥–∞–∑–∏–Ω', '—Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç', '—Ç–æ—Ä–≥–æ–≤—ã–π', '—Ü–µ–Ω—Ç—Ä', '–∞–ø—Ç–µ–∫–∞', '–∫–∞—Ñ–µ', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω']
    
    # –ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
    for line in lines:
        line_clean = re.sub(r'[^\w\s\d.,]', '', line.lower())
        
        # –ü–æ–∏—Å–∫ —Å—É–º–º—ã
        for pattern in total_patterns:
            matches = re.findall(pattern, line_clean, re.IGNORECASE)
            if matches:
                try:
                    amount_str = matches[-1].replace(',', '.')
                    amount_str = re.sub(r'[^\d.]', '', amount_str)
                    amount = float(amount_str)
                    # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é —Å—É–º–º—É
                    if 10 <= amount <= 50000 and amount > receipt_data['total']:
                        receipt_data['total'] = amount
                        logger.info(f"üí∞ –ù–∞–π–¥–µ–Ω–∞ —Å—É–º–º–∞: {amount}")
                        break
                except ValueError:
                    continue
        
        # –ü–æ–∏—Å–∫ –º–∞–≥–∞–∑–∏–Ω–∞
        if not receipt_data['store']:
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤
            if any(keyword in line_clean for keyword in store_keywords):
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
                receipt_data['store'] = line.strip()[:50]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                logger.info(f"üè™ –ù–∞–π–¥–µ–Ω –º–∞–≥–∞–∑–∏–Ω: {rece_data['store']}")
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ - —Å—Ç—Ä–æ–∫–∏ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ (—á–∞—Å—Ç–æ —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏—è)
            if line.strip().isupper() and len(line.strip()) > 3 and len(line.strip()) < 30:
                receipt_data['store'] = line.strip()
                logger.info(f"üè™ –ù–∞–π–¥–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ (–≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä): {receipt_data['store']}")
    
    return receipt_data

async def process_receipt_photo(image_bytes):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ —á–µ–∫–∞ —á–µ—Ä–µ–∑ Tesseract —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
    if not TESSERACT_AVAILABLE:
        logger.warning("‚ùå Tesseract –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —á–µ–∫–æ–≤")
        return None
    
    try:
        logger.info("üîç –†–∞—Å–ø–æ–∑–Ω–∞—é —á–µ–∫ —á–µ—Ä–µ–∑ Tesseract...")
        
        image = Image.open(io.BytesIO(image_bytes))
        
        # –£–ª—É—á—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image = preprocess_image_for_ocr(image)
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OCR
        configs = [
            r'--oem 3 --psm 6',
            r'--oem 3 --psm 4', 
            r'--oem 3 --psm 8',
            r'--oem 3 --psm 6 -c tessedit_char_whitelist=0123456789.,—Ä—É–±–†–£–ë–∫–ö—Ç–¢‚ÇΩ'
        ]
        
        best_text = ""
        for config in configs:
            try:
                text = pytesseract.image_to_string(image, lang='rus+eng', config=config)
                if len(text.strip()) > len(best_text.strip()):
                    best_text = text
            except Exception as e:
                logger.warning(f"‚ùå –û—à–∏–±–∫–∞ OCR —Å –∫–æ–Ω—Ñ–∏–≥–æ–º {config}: {e}")
                continue
        
        if not best_text.strip():
            logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç")
            return None
        
        logger.info(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(best_text)}")
        logger.info(f"üìÑ –¢–µ–∫—Å—Ç —á–µ–∫–∞: {best_text[:300]}...")
        
        return parse_receipt_text(best_text)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ–∫–∞: {e}")
        return None

# ===== API ENDPOINTS =====
@flask_app.route('/get_user_spaces', methods=['POST'])
def api_get_user_spaces():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        data = request.json
        init_data = data.get('initData')
        
        if not validate_webapp_data(init_data):
            return jsonify({'error': 'Invalid data'}), 401
            
        user_data = get_user_from_init_data(init_data)
        if not user_data:
            return jsonify({'error': 'User not found'}), 401
            
        user_id = user_data['id']
        
        conn = get_db_connection()
        
        if isinstance(conn, sqlite3.Connection):
            query = '''SELECT fs.id, fs.name, fs.description, fs.space_type, fs.invite_code,
                              COUNT(DISTINCT sm.user_id) as member_count
                       FROM financial_spaces fs
                       JOIN space_members sm ON fs.id = sm.space_id
                       WHERE sm.user_id = ? AND fs.is_active = TRUE
                       GROUP BY fs.id
                       ORDER BY fs.space_type, fs.created_at DESC'''
            df = pd.read_sql_query(query, conn, params=(user_id,))
        else:
            query = '''SELECT fs.id, fs.name, fs.description, fs.space_type, fs.invite_code,
                              COUNT(DISTINCT sm.user_id) as member_count
                       FROM financial_spaces fs
                       JOIN space_members sm ON fs.id = sm.space_id
                       WHERE sm.user_id = %s AND fs.is_active = TRUE
                       GROUP BY fs.id
                       ORDER BY fs.space_type, fs.created_at DESC'''
            df = pd.read_sql_query(query, conn, params=(user_id,))
        
        conn.close()
        
        spaces = []
        for _, row in df.iterrows():
            spaces.append({
                'id': int(row['id']),
                'name': row['name'],
                'description': row['description'],
                'space_type': row['space_type'],
                'invite_code': row['invite_code'],
                'member_count': int(row['member_count']) if row['member_count'] else 1
            })
        
        return jsonify({'spaces': spaces})
        
    except Exception as e:
        logger.error(f"‚ùå API Error in get_user_spaces: {e}")
        return jsonify({'error': 'Internal server error'}), 500

@flask_app.route('/get_space_members', methods=['POST'])
def api_get_space_members():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"""
    try:
        data = request.json
        init_data = data.get('initData')
        space_id = data.get('spaceId')
        
        if not validate_webapp_data(init_data):
            return jsonify({'error': 'Invalid data'}), 401
            
        user_data = get_user_from_init_data(init_data)
        if not user_data:
            return jsonify({'error': 'User not found'}), 401
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Å—Ç–æ–∏—Ç –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
        if not is_user_in_space(user_data['id'], space_id):
            return jsonify({'error': 'Access denied'}), 403
        
        conn = get_db_connection()
        
        if isinstance(conn, sqlite3.Connection):
            query = '''SELECT user_id, user_name, role, joined_at 
                       FROM space_members 
                       WHERE space_id = ?
                       ORDER BY 
                         CASE role 
                           WHEN 'owner' THEN 1 
                           WHEN 'admin' THEN 2 
                           ELSE 3 
                         END, joined_at'''
            df = pd.read_sql_query(query, conn, params=(space_id,))
        else:
            query = '''SELECT user_id, user_name, role, joined_at 
                       FROM space_members 
                       WHERE space_id = %s
                       ORDER BY 
                         CASE role 
                           WHEN 'owner' THEN 1 
                           WHEN 'admin' THEN 2 
                           ELSE 3 
                         END, joined_at'''
            df = pd.read_sql_query(query, conn, params=(space_id,))
        
        conn.close()
        
        members = []
        for _, row in df.iterrows():
            members.append({
                'user_id': int(row['user_id']),
                'user_name': row['user_name'],
                'role': row['role'],
                'joined_at': row['joined_at'].isoformat() if hasattr(row['joined_at'], 'isoformat') else str(row['joined_at'])
            })
        
        return jsonify({'members': members})
        
    except Exception as e:
        logger.error(f"‚ùå API Error in get_space_members: {e}")
        return jsonify({'error': 'Internal server error'}), 500

@flask_app.route('/create_space', methods=['POST'])
def api_create_space():
    """API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"""
    try:
        data = request.json
        init_data = data.get('initData')
        name = data.get('name')
        space_type = data.get('type')
        description = data.get('description', '')
        
        logger.info(f"üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞: {name}, —Ç–∏–ø: {space_type}")
        
        if not validate_webapp_data(init_data):
            return jsonify({'error': 'Invalid data'}), 401
            
        user_data = get_user_from_init_data(init_data)
        if not user_data:
            return jsonify({'error': 'User not found'}), 401
            
        if not name or not space_type:
            return jsonify({'error': 'Missing required fields'}), 400
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
        result = create_financial_space(
            name, description, space_type, 
            user_data['id'], user_data['first_name']
        )
        
        if result and result[0] is not None:
            space_id, invite_code = result
            logger.info(f"‚úÖ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–æ: {space_id}, –∫–æ–¥: {invite_code}")
            return jsonify({
                'success': True,
                'space_id': space_id,
                'invite_code': invite_code
            })
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ - —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ None")
            return jsonify({'error': 'Failed to create space - check database connection'}), 500
            
    except Exception as e:
        logger.error(f"‚ùå API Error in create_space: {e}")
        import traceback
        logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
        return jsonify({'error': f'Internal server error: {str(e)}'}), 500

@flask_app.route('/add_expense', methods=['POST'])
def api_add_expense():
    """API –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞—Ç—ã"""
    try:
        data = request.json
        init_data = data.get('initData')
        amount = data.get('amount')
        category = data.get('category')
        description = data.get('description', '')
        space_id = data.get('spaceId')
        
        if not validate_webapp_data(init_data):
            return jsonify({'error': 'Invalid data'}), 401
            
        user_data = get_user_from_init_data(init_data)
        if not user_data:
            return jsonify({'error': 'User not found'}), 401
            
        if not amount or not category or not space_id:
            return jsonify({'error': 'Missing required fields'}), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Å—Ç–æ–∏—Ç –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
        if not is_user_in_space(user_data['id'], space_id):
            return jsonify({'error': 'Access denied'}), 403
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞—Ç—É
        add_expense(
            user_data['id'], user_data['first_name'],
            float(amount), category, description, int(space_id)
        )
        
        return jsonify({'success': True})
            
    except Exception as e:
        logger.error(f"‚ùå API Error in add_expense: {e}")
        return jsonify({'error': 'Internal server error'}), 500

@flask_app.route('/get_analytics', methods=['POST'])
def api_get_analytics():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    try:
        data = request.json
        init_data = data.get('initData')
        space_id = data.get('spaceId')
        user_id = data.get('userId')
        
        if not validate_webapp_data(init_data):
            return jsonify({'error': 'Invalid data'}), 401
            
        user_data = get_user_from_init_data(init_data)
        if not user_data:
            return jsonify({'error': 'User not found'}), 401
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Å—Ç–æ–∏—Ç –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
        if not is_user_in_space(user_data['id'], space_id):
            return jsonify({'error': 'Access denied'}), 403
        
        conn = get_db_connection()
        
        # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
        if isinstance(conn, sqlite3.Connection):
            users_query = '''SELECT DISTINCT user_id, user_name FROM space_members WHERE space_id = ?'''
            users_df = pd.read_sql_query(users_query, conn, params=(space_id,))
        else:
            users_query = '''SELECT DISTINCT user_id, user_name FROM space_members WHERE space_id = %s'''
            users_df = pd.read_sql_query(users_query, conn, params=(space_id,))
        
        users = []
        for _, row in users_df.iterrows():
            users.append({
                'id': int(row['user_id']),
                'name': row['user_name']
            })
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        if user_id:
            if isinstance(conn, sqlite3.Connection):
                query = '''SELECT category, SUM(amount) as total, COUNT(*) as count
                           FROM expenses 
                           WHERE space_id = ? AND user_id = ?
                           GROUP BY category 
                           ORDER BY total DESC'''
                df = pd.read_sql_query(query, conn, params=(space_id, user_id))
                
                count_query = '''SELECT COUNT(*) as total_count FROM expenses WHERE space_id = ? AND user_id = ?'''
                count_df = pd.read_sql_query(count_query, conn, params=(space_id, user_id))
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –¥–ª—è –±—é–¥–∂–µ—Ç–∞
                total_spent_query = '''SELECT COALESCE(SUM(amount), 0) as total_spent FROM expenses WHERE space_id = ? AND user_id = ? AND strftime('%Y-%m', date) = strftime('%Y-%m', 'now')'''
                total_spent_df = pd.read_sql_query(total_spent_query, conn, params=(space_id, user_id))
            else:
                query = '''SELECT category, SUM(amount) as total, COUNT(*) as count
                           FROM expenses 
                           WHERE space_id = %s AND user_id = %s
                           GROUP BY category 
                           ORDER BY total DESC'''
                df = pd.read_sql_query(query, conn, params=(space_id, user_id))
                
                count_query = '''SELECT COUNT(*) as total_count FROM expenses WHERE space_id = %s AND user_id = %s'''
                count_df = pd.read_sql_query(count_query, conn, params=(space_id, user_id))
                
                total_spent_query = '''SELECT COALESCE(SUM(amount), 0) as total_spent FROM expenses WHERE space_id = %s AND user_id = %s AND DATE_TRUNC('month', date) = DATE_TRUNC('month', CURRENT_DATE)'''
                total_spent_df = pd.read_sql_query(total_spent_query, conn, params=(space_id, user_id))
        else:
            if isinstance(conn, sqlite3.Connection):
                query = '''SELECT category, SUM(amount) as total, COUNT(*) as count
                           FROM expenses 
                           WHERE space_id = ?
                           GROUP BY category 
                           ORDER BY total DESC'''
                df = pd.read_sql_query(query, conn, params=(space_id,))
                
                count_query = '''SELECT COUNT(*) as total_count FROM expenses WHERE space_id = ?'''
                count_df = pd.read_sql_query(count_query, conn, params=(space_id,))
                
                total_spent_query = '''SELECT COALESCE(SUM(amount), 0) as total_spent FROM expenses WHERE space_id = ? AND strftime('%Y-%m', date) = strftime('%Y-%m', 'now')'''
                total_spent_df = pd.read_sql_query(total_spent_query, conn, params=(space_id,))
            else:
                query = '''SELECT category, SUM(amount) as total, COUNT(*) as count
                           FROM expenses 
                           WHERE space_id = %s
                           GROUP BY category 
                           ORDER BY total DESC'''
                df = pd.read_sql_query(query, conn, params=(space_id,))
                
                count_query = '''SELECT COUNT(*) as total_count FROM expenses WHERE space_id = %s'''
                count_df = pd.read_sql_query(count_query, conn, params=(space_id,))
                
                total_spent_query = '''SELECT COALESCE(SUM(amount), 0) as total_spent FROM expenses WHERE space_id = %s AND DATE_TRUNC('month', date) = DATE_TRUNC('month', CURRENT_DATE)'''
                total_spent_df = pd.read_sql_query(total_spent_query, conn, params=(space_id,))
        
        conn.close()
        
        categories = []
        for _, row in df.iterrows():
            categories.append({
                'category': row['category'],
                'total': float(row['total']),
                'count': int(row['count'])
            })
        
        total_spent = float(total_spent_df.iloc[0]['total_spent']) if not total_spent_df.empty else 0
        
        return jsonify({
            'categories': categories,
            'total_count': int(count_df.iloc[0]['total_count']) if not count_df.empty else 0,
            'users': users,
            'total_spent': total_spent
        })
            
    except Exception as e:
        logger.error(f"‚ùå API Error in get_analytics: {e}")
        return jsonify({'error': 'Internal server error'}), 500

@flask_app.route('/remove_member', methods=['POST'])
def api_remove_member():
    """API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    try:
        data = request.json
        init_data = data.get('initData')
        space_id = data.get('spaceId')
        member_id = data.get('memberId')
        
        if not validate_webapp_data(init_data):
            return jsonify({'error': 'Invalid data'}), 401
            
        user_data = get_user_from_init_data(init_data)
        if not user_data:
            return jsonify({'error': 'User not found'}), 401
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        if not is_user_admin_in_space(user_data['id'], space_id):
            return jsonify({'error': 'Access denied'}), 403
        
        # –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
        success, message = remove_member_from_space(space_id, member_id, user_data['id'])
        
        if success:
            return jsonify({'success': True})
        else:
            return jsonify({'error': message}), 400
            
    except Exception as e:
        logger.error(f"‚ùå API Error in remove_member: {e}")
        return jsonify({'error': 'Internal server error'}), 500

@flask_app.route('/set_budget', methods=['POST'])
def api_set_budget():
    """API –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±—é–¥–∂–µ—Ç–∞"""
    try:
        data = request.json
        init_data = data.get('initData')
        space_id = data.get('spaceId')
        amount = data.get('amount')
        
        if not validate_webapp_data(init_data):
            return jsonify({'error': 'Invalid data'}), 401
            
        user_data = get_user_from_init_data(init_data)
        if not user_data:
            return jsonify({'error': 'User not found'}), 401
            
        if not amount or amount <= 0:
            return jsonify({'error': 'Invalid budget amount'}), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Å—Ç–æ–∏—Ç –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
        if not is_user_in_space(user_data['id'], space_id):
            return jsonify({'error': 'Access denied'}), 403
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—é–¥–∂–µ—Ç
        success = set_user_budget(user_data['id'], space_id, float(amount))
        
        if success:
            return jsonify({'success': True})
        else:
            return jsonify({'error': 'Failed to set budget'}), 500
            
    except Exception as e:
        logger.error(f"‚ùå API Error in set_budget: {e}")
        return jsonify({'error': 'Internal server error'}), 500

@flask_app.route('/get_budget', methods=['POST'])
def api_get_budget():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞"""
    try:
        data = request.json
        init_data = data.get('initData')
        space_id = data.get('spaceId')
        
        if not validate_webapp_data(init_data):
            return jsonify({'error': 'Invalid data'}), 401
            
        user_data = get_user_from_init_data(init_data)
        if not user_data:
            return jsonify({'error': 'User not found'}), 401
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Å—Ç–æ–∏—Ç –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
        if not is_user_in_space(user_data['id'], space_id):
            return jsonify({'error': 'Access denied'}), 403
        
        # –ü–æ–ª—É—á–∞–µ–º –±—é–¥–∂–µ—Ç
        budget = get_user_budget(user_data['id'], space_id)
        
        return jsonify({
            'success': True,
            'budget': budget
        })
            
    except Exception as e:
        logger.error(f"‚ùå API Error in get_budget: {e}")
        return jsonify({'error': 'Internal server error'}), 500

# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
def is_user_in_space(user_id, space_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ"""
    conn = get_db_connection()
    
    try:
        if isinstance(conn, sqlite3.Connection):
            query = '''SELECT 1 FROM space_members WHERE user_id = ? AND space_id = ?'''
            df = pd.read_sql_query(query, conn, params=(user_id, space_id))
        else:
            query = '''SELECT 1 FROM space_members WHERE user_id = %s AND space_id = %s'''
            df = pd.read_sql_query(query, conn, params=(user_id, space_id))
        
        return not df.empty
    except Exception as e:
        logger.error(f"‚ùå Error checking user in space: {e}")
        return False
    finally:
        conn.close()

def is_user_admin_in_space(user_id, space_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ"""
    conn = get_db_connection()
    
    try:
        if isinstance(conn, sqlite3.Connection):
            query = '''SELECT role FROM space_members WHERE user_id = ? AND space_id = ?'''
            df = pd.read_sql_query(query, conn, params=(user_id, space_id))
        else:
            query = '''SELECT role FROM space_members WHERE user_id = %s AND space_id = %s'''
            df = pd.read_sql_query(query, conn, params=(user_id, space_id))
        
        if not df.empty:
            role = df.iloc[0]['role']
            return role in ['owner', 'admin']
        return False
    except Exception as e:
        logger.error(f"‚ùå Error checking admin rights: {e}")
        return False
    finally:
        conn.close()

def create_personal_space(user_id, user_name):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"""
    conn = get_db_connection()
    
    try:
        if isinstance(conn, sqlite3.Connection):
            c = conn.cursor()
            c.execute('''INSERT INTO financial_spaces (name, description, space_type, created_by, invite_code)
                         VALUES (?, ?, ?, ?, ?)''', 
                     (f"–õ–∏—á–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ {user_name}", "–í–∞—à–µ –ª–∏—á–Ω–æ–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ", "personal", user_id, f"PERSONAL_{user_id}"))
            space_id = c.lastrowid
            
            c.execute('''INSERT INTO space_members (space_id, user_id, user_name, role)
                         VALUES (?, ?, ?, ?)''', (space_id, user_id, user_name, 'owner'))
        else:
            c = conn.cursor()
            c.execute('''INSERT INTO financial_spaces (name, description, space_type, created_by, invite_code)
                         VALUES (%s, %s, %s, %s, %s) RETURNING id''', 
                     (f"–õ–∏—á–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ {user_name}", "–í–∞—à–µ –ª–∏—á–Ω–æ–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ", "personal", user_id, f"PERSONAL_{user_id}"))
            space_id = c.fetchone()[0]
            
            c.execute('''INSERT INTO space_members (space_id, user_id, user_name, role)
                         VALUES (%s, %s, %s, %s)''', (space_id, user_id, user_name, 'owner'))
        
        conn.commit()
        return space_id
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞: {e}")
        return None
    finally:
        conn.close()

def create_financial_space(name, description, space_type, created_by, created_by_name):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"""
    conn = get_db_connection()
    
    try:
        invite_code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
        
        logger.info(f"üîß –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞: {name}, —Ç–∏–ø: {space_type}, created_by: {created_by}")
        
        if isinstance(conn, sqlite3.Connection):
            c = conn.cursor()
            c.execute('''INSERT INTO financial_spaces (name, description, space_type, created_by, invite_code)
                         VALUES (?, ?, ?, ?, ?)''', 
                     (name, description, space_type, created_by, invite_code))
            space_id = c.lastrowid
            
            c.execute('''INSERT INTO space_members (space_id, user_id, user_name, role)
                         VALUES (?, ?, ?, ?)''', (space_id, created_by, created_by_name, 'owner'))
        else:
            c = conn.cursor()
            c.execute('''INSERT INTO financial_spaces (name, description, space_type, created_by, invite_code)
                         VALUES (%s, %s, %s, %s, %s) RETURNING id''', 
                     (name, description, space_type, created_by, invite_code))
            space_id = c.fetchone()[0]
            
            c.execute('''INSERT INTO space_members (space_id, user_id, user_name, role)
                         VALUES (%s, %s, %s, %s)''', (space_id, created_by, created_by_name, 'owner'))
        
        conn.commit()
        logger.info(f"‚úÖ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: ID {space_id}")
        return space_id, invite_code
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞: {e}")
        import traceback
        logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
        if conn:
            conn.rollback()
        return None, None
    finally:
        if conn:
            conn.close()

def add_expense(user_id, user_name, amount, category, description="", space_id=None):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ç—ã –≤ –±–∞–∑—É"""
    try:
        if space_id is None:
            space_id = ensure_user_has_personal_space(user_id, user_name)
        
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É: {user_name} - {amount} —Ä—É–± - {category} - space: {space_id}")
        
        conn = get_db_connection()
        c = conn.cursor()
        
        if isinstance(conn, sqlite3.Connection):
            c.execute('''INSERT INTO expenses (user_id, user_name, amount, category, description, space_id)
                         VALUES (?, ?, ?, ?, ?, ?)''',
                      (user_id, user_name, amount, category, description, space_id))
        else:
            c.execute('''INSERT INTO expenses (user_id, user_name, amount, category, description, space_id)
                         VALUES (%s, %s, %s, %s, %s, %s)''',
                      (user_id, user_name, amount, category, description, space_id))
        
        conn.commit()
        conn.close()
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç—Ä–∞—Ç–∞: {user_name} - {amount} —Ä—É–± - {category} - space: {space_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É: {str(e)}")

def ensure_user_has_personal_space(user_id, user_name):
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ª–∏—á–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ"""
    conn = get_db_connection()
    
    try:
        if isinstance(conn, sqlite3.Connection):
            query = '''SELECT fs.id FROM financial_spaces fs
                       JOIN space_members sm ON fs.id = sm.space_id
                       WHERE sm.user_id = ? AND fs.space_type = 'personal' AND fs.is_active = TRUE'''
            df = pd.read_sql_query(query, conn, params=(user_id,))
        else:
            query = '''SELECT fs.id FROM financial_spaces fs
                       JOIN space_members sm ON fs.id = sm.space_id
                       WHERE sm.user_id = %s AND fs.space_type = 'personal' AND fs.is_active = TRUE'''
            df = pd.read_sql_query(query, conn, params=(user_id,))
        
        if not df.empty:
            return df.iloc[0]['id']
        else:
            return create_personal_space(user_id, user_name)
            
    except Exception as e:
        logger.error(f"‚ùå Error ensuring personal space: {e}")
        return create_personal_space(user_id, user_name)
    finally:
        conn.close()

def remove_member_from_space(space_id, user_id, remover_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"""
    conn = get_db_connection()
    
    try:
        if isinstance(conn, sqlite3.Connection):
            c = conn.cursor()
            c.execute('DELETE FROM space_members WHERE space_id = ? AND user_id = ?', (space_id, user_id))
        else:
            c = conn.cursor()
            c.execute('DELETE FROM space_members WHERE space_id = %s AND user_id = %s', (space_id, user_id))
        
        conn.commit()
        return True, "–£—á–∞—Å—Ç–Ω–∏–∫ —É–¥–∞–ª–µ–Ω"
    except Exception as e:
        logger.error(f"‚ùå Error removing member: {e}")
        return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏"
    finally:
        conn.close()

def set_user_budget(user_id, space_id, amount):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—é–¥–∂–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = get_db_connection()
    
    try:
        current_month = datetime.now().strftime('%Y-%m')
        
        if isinstance(conn, sqlite3.Connection):
            c = conn.cursor()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –±—é–¥–∂–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü
            c.execute('SELECT id FROM budgets WHERE user_id = ? AND space_id = ? AND month_year = ?', 
                     (user_id, space_id, current_month))
            existing = c.fetchone()
            
            if existing:
                c.execute('UPDATE budgets SET amount = ? WHERE id = ?', (amount, existing[0]))
            else:
                c.execute('INSERT INTO budgets (user_id, space_id, amount, month_year) VALUES (?, ?, ?, ?)',
                         (user_id, space_id, amount, current_month))
        else:
            c = conn.cursor()
            c.execute('SELECT id FROM budgets WHERE user_id = %s AND space_id = %s AND month_year = %s', 
                     (user_id, space_id, current_month))
            existing = c.fetchone()
            
            if existing:
                c.execute('UPDATE budgets SET amount = %s WHERE id = %s', (amount, existing[0]))
            else:
                c.execute('INSERT INTO budgets (user_id, space_id, amount, month_year) VALUES (%s, %s, %s, %s)',
                         (user_id, space_id, amount, current_month))
        
        conn.commit()
        return True
    except Exception as e:
        logger.error(f"‚ùå Error setting budget: {e}")
        return False
    finally:
        conn.close()

def get_user_budget(user_id, space_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = get_db_connection()
    
    try:
        current_month = datetime.now().strftime('%Y-%m')
        
        if isinstance(conn, sqlite3.Connection):
            query = '''SELECT amount FROM budgets WHERE user_id = ? AND space_id = ? AND month_year = ?'''
            df = pd.read_sql_query(query, conn, params=(user_id, space_id, current_month))
        else:
            query = '''SELECT amount FROM budgets WHERE user_id = %s AND space_id = %s AND month_year = %s'''
            df = pd.read_sql_query(query, conn, params=(user_id, space_id, current_month))
        
        if not df.empty:
            return float(df.iloc[0]['amount'])
        else:
            return 0
    except Exception as e:
        logger.error(f"‚ùå Error getting budget: {e}")
        return 0
    finally:
        conn.close()

# ===== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê =====
def get_main_keyboard():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ WebApp"""
    web_app_url = os.environ.get('WEB_APP_URL', 'https://your-app-url.com')
    
    keyboard = [
        [KeyboardButton("üí∏ –û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É", web_app=WebAppInfo(url=web_app_url))],
        [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞—Ç—ã")],
        [KeyboardButton("üÜò –ü–æ–º–æ—â—å"), KeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")]
    ]
    
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ª–∏—á–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
    ensure_user_has_personal_space(user.id, user.first_name)
    
    welcome_text = f"""
–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤ üí∞ —Å **–ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–º Web-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º**!

üöÄ **–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ üí∏ **–£–¥–æ–±–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ç** —á–µ—Ä–µ–∑ Web-—Ñ–æ—Ä–º—É
‚Ä¢ üè† **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞–º–∏** - –ª–∏—á–Ω—ã–µ, —Å–µ–º–µ–π–Ω—ã–µ, –ø—É–±–ª–∏—á–Ω—ã–µ
‚Ä¢ üë• **–°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –±—é–¥–∂–µ—Ç—ã** —Å –¥—Ä—É–∑—å—è–º–∏ –∏ —Å–µ–º—å–µ–π  
‚Ä¢ üìä **–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞** —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
‚Ä¢ üì∏ **–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–µ–∫–æ–≤** –∏ üé§ **–≥–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥**

üí° **–ù–∞–∂–º–∏—Ç–µ ¬´üí∏ –û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É¬ª –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º!**
"""
    
    await update.message.reply_text(welcome_text, reply_markup=get_main_keyboard())

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞"""
    try:
        user = update.effective_user
        space_id = ensure_user_has_personal_space(user.id, user.first_name)
        
        conn = get_db_connection()
        
        if isinstance(conn, sqlite3.Connection):
            df = pd.read_sql_query(f'''
                SELECT category, SUM(amount) as total
                FROM expenses 
                WHERE user_id = {user.id} AND space_id = {space_id}
                GROUP BY category 
                ORDER BY total DESC
                LIMIT 5
            ''', conn)
        else:
            df = pd.read_sql_query(f'''
                SELECT category, SUM(amount) as total
                FROM expenses 
                WHERE user_id = {user.id} AND space_id = {space_id}
                GROUP BY category 
                ORDER BY total DESC
                LIMIT 5
            ''', conn)
        
        conn.close()
        
        if df.empty:
            await update.message.reply_text(
                "üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n\n"
                "üí° –û—Ç–∫—Ä–æ–π—Ç–µ Web-—Ñ–æ—Ä–º—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏!",
                reply_markup=get_main_keyboard()
            )
            return
        
        total_spent = df['total'].sum()
        stats_text = f"üìä **–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\nüí∞ **–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ:** {total_spent:,.0f} —Ä—É–±\n\n**–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:**\n"
        
        for _, row in df.iterrows():
            percentage = (row['total'] / total_spent) * 100
            stats_text += f"‚Ä¢ {row['category']}: {row['total']:,.0f} —Ä—É–± ({percentage:.1f}%)\n"
        
        stats_text += "\nüí° **–î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ Web-—Ñ–æ—Ä–º—É!**"
        
        await update.message.reply_text(stats_text, reply_markup=get_main_keyboard())
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å Web-—Ñ–æ—Ä–º—É.",
            reply_markup=get_main_keyboard()
        )

async def show_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞—Ç—ã"""
    try:
        user = update.effective_user
        space_id = ensure_user_has_personal_space(user.id, user.first_name)
        
        conn = get_db_connection()
        
        if isinstance(conn, sqlite3.Connection):
            df = pd.read_sql_query(f'''
                SELECT amount, category, description, date
                FROM expenses 
                WHERE user_id = {user.id} AND space_id = {space_id}
                ORDER BY date DESC 
                LIMIT 5
            ''', conn)
        else:
            df = pd.read_sql_query(f'''
                SELECT amount, category, description, date
                FROM expenses 
                WHERE user_id = {user.id} AND space_id = {space_id}
                ORDER BY date DESC 
                LIMIT 5
            ''', conn)
        
        conn.close()
        
        if df.empty:
            await update.message.reply_text(
                "üìù –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç—Ä–∞—Ç.\n\n"
                "üí° –û—Ç–∫—Ä–æ–π—Ç–µ Web-—Ñ–æ—Ä–º—É –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è!",
                reply_markup=get_main_keyboard()
            )
            return
        
        list_text = "üìù **–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞—Ç—ã:**\n\n"
        
        for _, row in df.iterrows():
            date = datetime.strptime(str(row['date']), '%Y-%m-%d %H:%M:%S').strftime('%d.%m %H:%M')
            list_text += f"üí∏ **{row['amount']} —Ä—É–±** - {row['category']}\n"
            
            if row['description']:
                list_text += f"   üìã {row['description']}\n"
            
            list_text += f"   üìÖ {date}\n\n"
        
        list_text += "üí° **–û—Ç–∫—Ä–æ–π—Ç–µ Web-—Ñ–æ—Ä–º—É –¥–ª—è –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏!**"
        
        await update.message.reply_text(list_text, parse_mode='Markdown', reply_markup=get_main_keyboard())
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞—Ç: {str(e)}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞—Ç.",
            reply_markup=get_main_keyboard()
        )

async def clear_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.effective_user
    
    try:
        conn = get_db_connection()
        
        if isinstance(conn, sqlite3.Connection):
            c = conn.cursor()
            c.execute('DELETE FROM expenses WHERE user_id = ?', (user.id,))
        else:
            c = conn.cursor()
            c.execute('DELETE FROM expenses WHERE user_id = %s', (user.id,))
        
        conn.commit()
        conn.close()
        
        await update.message.reply_text(
            "‚úÖ –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã!\n"
            "–ù–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞ üéØ",
            reply_markup=get_main_keyboard()
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}",
            reply_markup=get_main_keyboard()
        )

async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
üÜò **–ü–û–ú–û–©–¨**

üí° **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ **üí∏ –û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É** - –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π Web-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
‚Ä¢ **üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** - –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —á–∞—Ç–µ
‚Ä¢ **üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞—Ç—ã** - –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π

üöÄ **–ß—Ç–æ –º–æ–∂–Ω–æ –≤ Web-—Ñ–æ—Ä–º–µ:**
‚Ä¢ –£–¥–æ–±–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ç —Å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞–º–∏ (–ª–∏—á–Ω—ã–µ, —Å–µ–º–µ–π–Ω—ã–µ, –ø—É–±–ª–∏—á–Ω—ã–µ)
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø—ã
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ

üéØ **–ë—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥ —á–µ—Ä–µ–∑ –±–æ—Ç–∞:**
‚Ä¢ –¢–µ–∫—Å—Ç–æ–º: `500 –ø—Ä–æ–¥—É–∫—Ç—ã` –∏–ª–∏ `1500 –∫–∞—Ñ–µ –æ–±–µ–¥`
‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
‚Ä¢ –§–æ—Ç–æ —á–µ–∫–∞ (–∞–≤—Ç–æ—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ)

üí¨ **–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è!**
"""
    await update.message.reply_text(help_text, reply_markup=get_main_keyboard())

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –¢–ï–ö–°–¢–ê –ò –ú–ï–î–ò–ê =====
async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = update.effective_user
    text = update.message.text
    
    logger.info(f"üì® –¢–µ–∫—Å—Ç –æ—Ç {user.first_name}: {text}")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await show_stats(update, context)
    elif text == "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞—Ç—ã":
        await show_list(update, context)
    elif text == "üÜò –ü–æ–º–æ—â—å":
        await show_help(update, context)
    elif text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
        await clear_data(update, context)
    else:
        # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—É—é —Ç—Ä–∞—Ç—É
        try:
            parts = text.split()
            if len(parts) >= 2:
                amount = float(parts[0].replace(',', '.'))
                category = parts[1].lower()
                description = " ".join(parts[2:]) if len(parts) > 2 else ""
                
                space_id = ensure_user_has_personal_space(user.id, user.first_name)
                add_expense(user.id, user.first_name, amount, category, description, space_id)
                
                response = f"""‚úÖ **–¢—Ä–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!**

üíÅ **–ö—Ç–æ:** {user.first_name}
üí∏ **–°—É–º–º–∞:** {amount} —Ä—É–±
üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {category}"""
                
                if description:
                    response += f"\nüìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {description}"
                    
                await update.message.reply_text(response, reply_markup=get_main_keyboard())
                return
        except ValueError:
            pass
        
        # –ï—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–º–æ—â—å
        await show_help(update, context)

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ì–û–õ–û–°–ê –ò –§–û–¢–û =====
class VoiceRecognizer:
    def __init__(self):
        self.recognizer = sr.Recognizer()
        self.recognizer.energy_threshold = 300
        self.recognizer.pause_threshold = 0.8
        self.recognizer.dynamic_energy_threshold = True
        
    async def transcribe_audio(self, audio_path):
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª"""
        try:
            with sr.AudioFile(audio_path) as source:
                audio = self.recognizer.record(source)
                text = self.recognizer.recognize_google(audio, language='ru-RU')
                return text
        except sr.UnknownValueError:
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞: {e}")
            return None

voice_recognizer = VoiceRecognizer()

async def handle_voice_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        user = update.effective_user
        voice = update.message.voice
        
        processing_msg = await update.message.reply_text("üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        voice_file = await voice.get_file()
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as temp_file:
            temp_path = temp_file.name
        
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            await voice_file.download_to_drive(temp_path)
            
            # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
            text = await voice_recognizer.transcribe_audio(temp_path)
            
            if not text:
                await processing_msg.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
                    "üí° **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:**\n"
                    "‚Ä¢ –ì–æ–≤–æ—Ä–∏—Ç—å —á–µ—Ç—á–µ –∏ –±–ª–∏–∂–µ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É\n"
                    "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç: '500 –ø—Ä–æ–¥—É–∫—Ç—ã'\n"
                    "‚Ä¢ –ò–ª–∏ –≤–≤–µ—Å—Ç–∏ —Ç—Ä–∞—Ç—É —Ç–µ–∫—Å—Ç–æ–º"
                )
                return
            
            await processing_msg.edit_text(f"üé§ **–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:** _{text}_", parse_mode='Markdown')
            
            # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç
            words = text.lower().split()
            amount = None
            category = "–î—Ä—É–≥–æ–µ"
            
            # –ò—â–µ–º —Å—É–º–º—É
            for word in words:
                cleaned_word = re.sub(r'[^\d]', '', word)
                if cleaned_word:
                    try:
                        potential_amount = int(cleaned_word)
                        if 10 <= potential_amount <= 100000:
                            amount = potential_amount
                            break
                    except:
                        pass
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            category_keywords = {
                '–ü—Ä–æ–¥—É–∫—Ç—ã': ['–ø—Ä–æ–¥—É–∫—Ç', '–µ–¥–∞', '–º–∞–≥–∞–∑–∏–Ω', '—Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç', '–ø–æ–∫—É–ø–∫'],
                '–ö–∞—Ñ–µ': ['–∫–∞—Ñ–µ', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω', '–∫–æ—Ñ–µ', '–æ–±–µ–¥', '—É–∂–∏–Ω'],
                '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç': ['—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '—Ç–∞–∫—Å–∏', '–º–µ—Ç—Ä–æ', '–∞–≤—Ç–æ–±—É—Å', '–±–µ–Ω–∑–∏–Ω'],
                '–î–æ–º': ['–¥–æ–º', '–∫–≤–∞—Ä—Ç–∏—Ä', '–∫–æ–º–º—É–Ω–∞–ª', '–∞—Ä–µ–Ω–¥'],
                '–û–¥–µ–∂–¥–∞': ['–æ–¥–µ–∂–¥', '–æ–±—É–≤', '—à–æ–ø–∏–Ω–≥'],
                '–ó–¥–æ—Ä–æ–≤—å–µ': ['–∑–¥–æ—Ä–æ–≤', '–∞–ø—Ç–µ–∫', '–≤—Ä–∞—á', '–ª–µ–∫–∞—Ä—Å—Ç–≤'],
                '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': ['—Ä–∞–∑–≤–ª–µ—á–µ–Ω', '–∫–∏–Ω–æ', '–∫–æ–Ω—Ü–µ—Ä—Ç', '—Ç–µ–∞—Ç—Ä'],
                '–ü–æ–¥–ø–∏—Å–∫–∏': ['–ø–æ–¥–ø–∏—Å–∫', '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç', '—Ç–µ–ª–µ—Ñ–æ–Ω'],
                '–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã': ['wildberries', '–æ–∑–æ–Ω', '—è–Ω–¥–µ–∫—Å –º–∞—Ä–∫–µ—Ç']
            }
            
            for cat, keywords in category_keywords.items():
                if any(keyword in text.lower() for keyword in keywords):
                    category = cat
                    break
            
            description = " ".join([w for w in words if not w.isdigit()])
            
            if amount:
                space_id = ensure_user_has_personal_space(user.id, user.first_name)
                add_expense(user.id, user.first_name, amount, category, description, space_id)
                
                response = f"""‚úÖ **–ì–æ–ª–æ—Å–æ–≤–∞—è —Ç—Ä–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!**

üíÅ **–ö—Ç–æ:** {user.first_name}
üí∏ **–°—É–º–º–∞:** {amount} —Ä—É–±
üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {category}"""
                
                if description:
                    response += f"\nüìù **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:** {description}"
                
                await update.message.reply_text(response, reply_markup=get_main_keyboard())
            else:
                await update.message.reply_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—É–º–º—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: *{text}*\n\n"
                    "üí° **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞–∑–∞—Ç—å —á–µ—Ç—á–µ:**\n"
                    "‚Ä¢ '500 –ø—Ä–æ–¥—É–∫—Ç—ã'\n" 
                    "‚Ä¢ '1000 —Ç–∞–∫—Å–∏ –¥–æ —Ä–∞–±–æ—Ç—ã'",
                    parse_mode='Markdown',
                    reply_markup=get_main_keyboard()
                )
                
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(temp_path):
                os.unlink(temp_path)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥.",
            reply_markup=get_main_keyboard()
        )

async def handle_photo_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ —á–µ–∫–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ–º"""
    try:
        user = update.effective_user
        
        if not TESSERACT_AVAILABLE:
            await update.message.reply_text(
                "‚ùå –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–µ–∫–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.\n\n"
                "üí° **–í—ã –º–æ–∂–µ—Ç–µ:**\n"
                "‚Ä¢ –í–≤–µ—Å—Ç–∏ —Ç—Ä–∞—Ç—É –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥\n"
                "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                "‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º: '500 –ø—Ä–æ–¥—É–∫—Ç—ã'",
                reply_markup=get_main_keyboard()
            )
            return
        
        photo = update.message.photo[-1]
        processing_msg = await update.message.reply_text("üì∏ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ —á–µ–∫–∞...")
        
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
            photo_file = await photo.get_file()
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as temp_file:
                temp_path = temp_file.name
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            await photo_file.download_to_drive(temp_path)
            
            # –ß–∏—Ç–∞–µ–º –±–∞–π—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            with open(temp_path, 'rb') as f:
                photo_bytes = f.read()
            
            logger.info(f"üì∑ –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ: {len(photo_bytes)} –±–∞–π—Ç")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ–∫ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ–º
            receipt_data = await process_receipt_photo(photo_bytes)
            
            if receipt_data and receipt_data['total'] > 0:
                # –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                store_name = receipt_data.get('store', '')
                category = "–î—Ä—É–≥–æ–µ"
                
                if any(word in store_name.lower() for word in ['–º–∞–≥–∞–∑–∏–Ω', '—Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç', '–ø—Ä–æ–¥—É–∫—Ç']):
                    category = "–ü—Ä–æ–¥—É–∫—Ç—ã"
                elif any(word in store_name.lower() for word in ['–∫–∞—Ñ–µ', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω', '–∫–æ—Ñ–µ', '—Å—Ç–æ–ª–æ–≤']):
                    category = "–ö–∞—Ñ–µ"
                elif any(word in store_name.lower() for word in ['–∞–ø—Ç–µ–∫', '–ª–µ–∫–∞—Ä—Å—Ç–≤', '–º–µ–¥–∏—Ü–∏–Ω']):
                    category = "–ó–¥–æ—Ä–æ–≤—å–µ"
                elif any(word in store_name.lower() for word in ['–∑–∞–ø—Ä–∞–≤–∫', '–±–µ–Ω–∑–∏–Ω', '–∞–≤—Ç–æ']):
                    category = "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"
                
                description = f"–ß–µ–∫ {store_name}".strip() if store_name else "–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —á–µ–∫"
                
                response = f"""üì∏ **–ß–µ–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω!**

üí∏ **–°—É–º–º–∞:** {receipt_data['total']} —Ä—É–±
üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {category}"""
                
                if store_name:
                    response += f"\nüè™ **–ú–∞–≥–∞–∑–∏–Ω:** {store_name}"

                await processing_msg.delete()
                
                # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                confirm_keyboard = [
                    ["‚úÖ –î–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"]
                ]
                reply_markup = ReplyKeyboardMarkup(confirm_keyboard, resize_keyboard=True)
                
                await update.message.reply_text(
                    response + "\n\n–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞—Ç—É?",
                    reply_markup=reply_markup
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                context.user_data['pending_receipt'] = {
                    'amount': receipt_data['total'],
                    'category': category,
                    'description': description,
                    'store': store_name
                }
                
            else:
                await processing_msg.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —á–µ–∫.\n\n"
                    "üí° **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:**\n"
                    "‚Ä¢ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫ –±–æ–ª–µ–µ —á–µ—Ç–∫–æ\n"
                    "‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Ñ–æ—Ç–æ —Ö–æ—Ä–æ—à–æ –æ—Å–≤–µ—â–µ–Ω–æ\n"
                    "‚Ä¢ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–±–ª–∞—Å—Ç—å —Å —Å—É–º–º–æ–π\n"
                    "‚Ä¢ –ò–ª–∏ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É",
                    reply_markup=get_main_keyboard()
                )
                
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if 'temp_path' in locals() and os.path.exists(temp_path):
                os.unlink(temp_path)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {str(e)}")
        try:
            await processing_msg.delete()
        except:
            pass
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥.",
            reply_markup=get_main_keyboard()
        )

# ===== –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø =====
def run_bot():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
        bot_token = os.environ.get('TELEGRAM_BOT_TOKEN')
        if not bot_token:
            logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return
        
        global application
        application = Application.builder().token(bot_token).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
        application.add_handler(MessageHandler(filters.VOICE, handle_voice_message))
        application.add_handler(MessageHandler(filters.PHOTO, handle_photo_message))
        
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        application.run_polling()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

def run_flask():
    """–ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    port = int(os.environ.get('PORT', 5000))
    flask_app.run(host='0.0.0.0', port=port, debug=False)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = threading.Thread(target=run_bot, daemon=True)
    bot_thread.start()
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask (–æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –¥–ª—è Railway)
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
    run_flask()

if __name__ == "__main__":
    main()
