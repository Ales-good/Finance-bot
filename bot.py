import sqlite3
import pandas as pd
from datetime import datetime
import matplotlib.pyplot as plt
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, WebAppInfo
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import os
import json
import tempfile
import re
import io
import subprocess
import sys
from PIL import Image
import speech_recognition as sr
import torch
import torchaudio
import numpy as np
import psycopg2
from urllib.parse import urlparse
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ===== –ù–ê–°–¢–†–û–ô–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• =====
def get_db_connection():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (PostgreSQL –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ, SQLite –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)"""
    if 'DATABASE_URL' in os.environ:
        # Production - PostgreSQL
        try:
            database_url = os.environ['DATABASE_URL']
            parsed_url = urlparse(database_url)
            conn = psycopg2.connect(
                database=parsed_url.path[1:],
                user=parsed_url.username,
                password=parsed_url.password,
                host=parsed_url.hostname,
                port=parsed_url.port,
                sslmode='require'
            )
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ PostgreSQL")
            return conn
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
            # Fallback to SQLite
            return sqlite3.connect('finance.db', check_same_thread=False)
    else:
        # Development - SQLite
        return sqlite3.connect('finance.db', check_same_thread=False)

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_db_connection()
    
    if isinstance(conn, sqlite3.Connection):
        # SQLite
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS expenses
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      user_id INTEGER, 
                      user_name TEXT,
                      amount REAL, 
                      category TEXT, 
                      description TEXT, 
                      date TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
    else:
        # PostgreSQL
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS expenses
                     (id SERIAL PRIMARY KEY,
                      user_id BIGINT, 
                      user_name TEXT,
                      amount DECIMAL, 
                      category TEXT, 
                      description TEXT, 
                      date TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
    
    conn.commit()
    conn.close()
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

def add_expense(user_id, user_name, amount, category, description=""):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ç—ã –≤ –±–∞–∑—É"""
    try:
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É: {user_name} - {amount} —Ä—É–± - {category} - {description}")
        
        conn = get_db_connection()
        c = conn.cursor()
        
        if isinstance(conn, sqlite3.Connection):
            # SQLite
            c.execute('''INSERT INTO expenses (user_id, user_name, amount, category, description) 
                         VALUES (?, ?, ?, ?, ?)''',
                      (user_id, user_name, amount, category, description))
        else:
            # PostgreSQL
            c.execute('''INSERT INTO expenses (user_id, user_name, amount, category, description) 
                         VALUES (%s, %s, %s, %s, %s)''',
                      (user_id, user_name, amount, category, description))
        
        conn.commit()
        conn.close()
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç—Ä–∞—Ç–∞: {user_name} - {amount} —Ä—É–± - {category}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É: {str(e)}")

# ===== TESSERACT OCR –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
def check_tesseract_installation():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Tesseract"""
    try:
        result = subprocess.run(['tesseract', '--version'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            logger.info("‚úÖ Tesseract –¥–æ—Å—Ç—É–ø–µ–Ω –≤ PATH")
            return True
        else:
            logger.warning("‚ùå Tesseract –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH")
            return False
    except FileNotFoundError:
        logger.warning("‚ùå Tesseract –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ PATH")
        return False

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
if not check_tesseract_installation():
    logger.warning("‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Tesseract OCR –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ–º–ø—å—é—Ç–µ—Ä!")
    logger.warning("üì• –°–∫–∞—á–∞–π—Ç–µ —Å: https://github.com/UB-Mannheim/tesseract/wiki")
    
logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é Tesseract OCR...")
try:
    import pytesseract
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–∏ –∫ Tesseract (–¥–ª—è Windows)
    if os.name == 'nt':  # Windows
        pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    pytesseract.get_tesseract_version()
    TESSERACT_AVAILABLE = True
    logger.info("‚úÖ Tesseract OCR –¥–æ—Å—Ç—É–ø–µ–Ω")
except Exception as e:
    TESSERACT_AVAILABLE = False
    logger.warning(f"‚ùå Tesseract OCR –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

# ===== –ì–û–õ–û–°–û–í–û–ï –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–ï =====
class VoiceRecognizer:
    def __init__(self):
        self.recognizer = sr.Recognizer()
        self.recognizer.energy_threshold = 300
        self.recognizer.pause_threshold = 0.8
        self.recognizer.dynamic_energy_threshold = True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Google Speech Recognition
        try:
            # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            with sr.Microphone() as source:
                self.recognizer.adjust_for_ambient_noise(source, duration=1)
            self.google_available = True
            logger.info("‚úÖ Google Speech Recognition –¥–æ—Å—Ç—É–ø–µ–Ω")
        except:
            self.google_available = False
            logger.warning("‚ö†Ô∏è Google Speech Recognition –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è Vosk")
        
        # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å Vosk –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        try:
            import vosk
            # –°–∫–∞—á–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            model_path = "vosk-model-small-ru-0.22"
            if not os.path.exists(model_path):
                logger.info("üì• –°–∫–∞—á–∏–≤–∞—é –º–æ–¥–µ–ª—å Vosk...")
                import urllib.request
                import zipfile
                url = "https://alphacephei.com/vosk/models/vosk-model-small-ru-0.22.zip"
                urllib.request.urlretrieve(url, "model.zip")
                with zipfile.ZipFile("model.zip", 'r') as zip_ref:
                    zip_ref.extractall(".")
                os.remove("model.zip")
            
            self.vosk_model = vosk.Model(model_path)
            self.vosk_available = True
            logger.info("‚úÖ Vosk —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Vosk –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self.vosk_available = False
    
    async def transcribe_audio(self, audio_path):
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª"""
        logger.info(f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞—é –∞—É–¥–∏–æ: {audio_path}")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º Google (—Å–∞–º—ã–π —Ç–æ—á–Ω—ã–π)
        if self.google_available:
            try:
                with sr.AudioFile(audio_path) as source:
                    audio = self.recognizer.record(source)
                    text = self.recognizer.recognize_google(audio, language='ru-RU')
                    logger.info(f"‚úÖ Google —Ä–∞—Å–ø–æ–∑–Ω–∞–ª: {text}")
                    return text
            except sr.UnknownValueError:
                logger.warning("‚ùå Google –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∞—É–¥–∏–æ")
            except sr.RequestError as e:
                logger.warning(f"‚ùå –û—à–∏–±–∫–∞ Google API: {e}")
        
        # –ü—Ä–æ–±—É–µ–º Vosk –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        if self.vosk_available:
            try:
                return self._transcribe_with_vosk(audio_path)
            except Exception as e:
                logger.warning(f"‚ùå –û—à–∏–±–∫–∞ Vosk: {e}")
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ Telegram
        return None
    
    def _transcribe_with_vosk(self, audio_path):
        """–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Vosk"""
        import wave
        import json
        import vosk
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        wav_path = audio_path
        if not audio_path.endswith('.wav'):
            wav_path = audio_path.replace('.ogg', '.wav')
            subprocess.run(['ffmpeg', '-i', audio_path, '-ar', '16000', '-ac', '1', '-y', wav_path], 
                         capture_output=True)
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —á–µ—Ä–µ–∑ Vosk
        wf = wave.open(wav_path, 'rb')
        rec = vosk.KaldiRecognizer(self.vosk_model, wf.getframerate())
        
        results = []
        while True:
            data = wf.readframes(4000)
            if len(data) == 0:
                break
            if rec.AcceptWaveform(data):
                result = json.loads(rec.Result())
                if result['text']:
                    results.append(result['text'])
        
        final_result = json.loads(rec.FinalResult())
        if final_result['text']:
            results.append(final_result['text'])
        
        wf.close()
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ —Å–æ–∑–¥–∞–≤–∞–ª–∏
        if wav_path != audio_path and os.path.exists(wav_path):
            os.remove(wav_path)
        
        text = ' '.join(results)
        logger.info(f"‚úÖ Vosk —Ä–∞—Å–ø–æ–∑–Ω–∞–ª: {text}")
        return text if text.strip() else None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å –≥–æ–ª–æ—Å–∞
voice_recognizer = VoiceRecognizer()

# ===== –ü–†–û–°–¢–û–ô ML –ö–õ–ê–°–°–ò–§–ò–ö–ê–¢–û–† =====
class SimpleExpenseClassifier:
    def __init__(self):
        self.categories = ['–ü—Ä–æ–¥—É–∫—Ç—ã', '–ö–∞—Ñ–µ', '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–î–æ–º', '–û–¥–µ–∂–¥–∞', '–ó–¥–æ—Ä–æ–≤—å–µ', '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', '–ü–æ–¥–ø–∏—Å–∫–∏', '–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã', '–î—Ä—É–≥–æ–µ']
        logger.info("‚úÖ –ü—Ä–æ—Å—Ç–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def predict_category(self, text):
        """–ü—Ä–æ—Å—Ç–æ–π rule-based –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        if not text:
            return "–î—Ä—É–≥–æ–µ", 0.0
            
        text_lower = text.lower()
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        keyword_categories = {
            '–ü—Ä–æ–¥—É–∫—Ç—ã': ['–ø—Ä–æ–¥—É–∫—Ç', '–µ–¥–∞', '–º–∞–≥–∞–∑–∏–Ω', '—Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç', '–ø–æ–∫—É–ø–∫'],
            '–ö–∞—Ñ–µ': ['–∫–∞—Ñ–µ', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω', '–∫–æ—Ñ–µ', '–æ–±–µ–¥', '—É–∂–∏–Ω'],
            '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç': ['—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '—Ç–∞–∫—Å–∏', '–º–µ—Ç—Ä–æ', '–∞–≤—Ç–æ–±—É—Å', '–±–µ–Ω–∑–∏–Ω'],
            '–î–æ–º': ['–¥–æ–º', '–∫–≤–∞—Ä—Ç–∏—Ä', '–∫–æ–º–º—É–Ω–∞–ª', '–∞—Ä–µ–Ω–¥', '—Ä–µ–º–æ–Ω—Ç'],
            '–û–¥–µ–∂–¥–∞': ['–æ–¥–µ–∂–¥', '–æ–±—É–≤', '—à–æ–ø–∏–Ω–≥', '–≤–µ—â', '–º–∞–≥–∞–∑–∏–Ω'],
            '–ó–¥–æ—Ä–æ–≤—å–µ': ['–∑–¥–æ—Ä–æ–≤', '–∞–ø—Ç–µ–∫', '–≤—Ä–∞—á', '–ª–µ–∫–∞—Ä—Å—Ç–≤', '–±–æ–ª—å–Ω–∏—á'],
            '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': ['—Ä–∞–∑–≤–ª–µ—á–µ–Ω', '–∫–∏–Ω–æ', '–∫–æ–Ω—Ü–µ—Ä—Ç', '—Ç–µ–∞—Ç—Ä', '–∫–ª—É–±'],
            '–ü–æ–¥–ø–∏—Å–∫–∏': ['–ø–æ–¥–ø–∏—Å–∫', '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç', '—Ç–µ–ª–µ—Ñ–æ–Ω', '—Å–≤—è–∑', '–º–æ–±–∏–ª—å–Ω'],
            '–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã': ['wildberries', '–æ–∑–æ–Ω', '—è–Ω–¥–µ–∫—Å –º–∞—Ä–∫–µ—Ç', '–∞–ª–∏—ç–∫—Å–ø—Ä–µ—Å—Å'],
        }
        
        scores = {}
        for category, keywords in keyword_categories.items():
            score = sum(1 for keyword in keywords if keyword in text_lower)
            scores[category] = score
        
        best_category = max(scores, key=scores.get)
        confidence = scores[best_category] / max(1, len(text_lower.split()))
        
        return best_category if scores[best_category] > 0 else "–î—Ä—É–≥–æ–µ", min(confidence, 1.0)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
classifier = SimpleExpenseClassifier()

# ===== –£–õ–£–ß–®–ï–ù–ù–û–ï –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–ï –ß–ï–ö–û–í =====
def parse_receipt_text(text):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —á–µ–∫–∞"""
    logger.info("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—Å—Ç —á–µ–∫–∞...")
    
    lines = text.split('\n')
    receipt_data = {
        'total': 0,
        'store': None,
        'date': None,
        'raw_text': text
    }
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—É–º–º
    total_patterns = [
        r'(?:–∏—Ç–æ–≥–æ|–≤—Å–µ–≥–æ|—Å—É–º–º–∞|–∫\s*–æ–ø–ª–∞—Ç–µ|total|–∏—Ç–æ–≥)[^\d]*(\d+[.,]\d+)',
        r'(\d+[.,]\d+)\s*(?:—Ä—É–±|—Ä|‚ÇΩ|rur|rub|r|—Ä—É–±–ª–µ–π)',
    ]
    
    # –ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
    for line in lines:
        line_clean = re.sub(r'[^\w\s\d.,]', '', line.lower())
        
        for pattern in total_patterns:
            matches = re.findall(pattern, line_clean)
            if matches:
                try:
                    amount_str = matches[-1].replace(',', '.')
                    amount_str = re.sub(r'[^\d.]', '', amount_str)
                    amount = float(amount_str)
                    if 1 <= amount <= 100000 and amount > receipt_data['total']:
                        receipt_data['total'] = amount
                        logger.info(f"üí∞ –ù–∞–π–¥–µ–Ω–∞ —Å—É–º–º–∞: {amount}")
                        break
                except ValueError:
                    continue
    
    return receipt_data

async def process_receipt_photo(image_bytes):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ —á–µ–∫–∞ —á–µ—Ä–µ–∑ Tesseract"""
    if not TESSERACT_AVAILABLE:
        return None
    
    try:
        logger.info("üîç –†–∞—Å–ø–æ–∑–Ω–∞—é —á–µ–∫ —á–µ—Ä–µ–∑ Tesseract...")
        
        image = Image.open(io.BytesIO(image_bytes))
        
        # –£–ª—É—á—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        width, height = image.size
        if width < 1000 or height < 1000:
            new_size = (width * 2, height * 2)
            image = image.resize(new_size, Image.Resampling.LANCZOS)
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç
        text = pytesseract.image_to_string(image, lang='rus+eng')
        
        if not text.strip():
            logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç")
            return None
        
        logger.info(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(text)}")
        return parse_receipt_text(text)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ–∫–∞: {e}")
        return None

# ===== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====
def get_main_keyboard():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    web_app_url = os.environ.get('WEB_APP_URL', 'https://ales-good.github.io/Finance-bot/')
    keyboard = [
        [KeyboardButton("üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É", web_app=WebAppInfo(url=web_app_url))],
        [KeyboardButton("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü")],
        [KeyboardButton("üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞—Ç—ã"), KeyboardButton("üìà –í—ã–≥—Ä—É–∑–∏—Ç—å –≤ Excel")],
        [KeyboardButton("üÜò –ü–æ–º–æ—â—å"), KeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_simple_confirmation_keyboard():
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    keyboard = [
        [KeyboardButton("‚úÖ –î–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å"), KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# ===== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    
    welcome_text = f"""
–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤ üí∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏!

**–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ üí∏ **–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É** - —É–¥–æ–±–Ω–∞—è —Ñ–æ—Ä–º–∞ —Å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º
‚Ä¢ üé§ **–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥** - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç—Ä–∞—Ç–æ–π
‚Ä¢ üì∏ **–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–µ–∫–æ–≤** - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
‚Ä¢ üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** - –≥—Ä–∞—Ñ–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –º–µ—Å—è—Ü–∞–º  
‚Ä¢ üìù **–ò—Å—Ç–æ—Ä–∏—è** - –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞—Ç—ã
‚Ä¢ üìà **Excel** - –≤—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö

–ü—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ! ‚¨áÔ∏è
"""
    
    await update.message.reply_text(welcome_text, reply_markup=get_main_keyboard())

async def handle_web_app_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        logger.info("üéØ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ Web App")
        
        data = update.effective_message.web_app_data
        parsed_data = json.loads(data.data)
        user = update.effective_user
        
        logger.info(f"üìä –î–∞–Ω–Ω—ã–µ –∏–∑ Web App: {parsed_data}")
        
        amount = parsed_data.get('amount')
        category = parsed_data.get('category')
        description = parsed_data.get('description', '')
        
        add_expense(user.id, user.first_name, amount, category, description)
        
        response = f"""‚úÖ **–¢—Ä–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É!**

üíÅ **–ö—Ç–æ:** {user.first_name}
üí∏ **–°—É–º–º–∞:** {amount} —Ä—É–±
üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {category}"""
        
        if description:
            response += f"\nüìù **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:** {description}"
            
        await update.message.reply_text(response, reply_markup=get_main_keyboard())
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ Web App: {str(e)}")
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–æ—Ä–º—ã: {str(e)}",
            reply_markup=get_main_keyboard()
        )

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ì–û–õ–û–°–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô =====
async def handle_voice_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        voice = update.message.voice
        
        processing_msg = await update.message.reply_text("üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        voice_file = await voice.get_file()
        voice_bytes = await voice_file.download_as_bytearray()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ
        with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as temp_file:
            temp_file.write(voice_bytes)
            temp_path = temp_file.name
        
        try:
            # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
            text = await voice_recognizer.transcribe_audio(temp_path)
            
            if not text:
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                    "‚Ä¢ –ì–æ–≤–æ—Ä–∏—Ç—å —á–µ—Ç—á–µ –∏ –≥—Ä–æ–º—á–µ\n"
                    "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥",
                    reply_markup=get_main_keyboard()
                )
                return
            
            await processing_msg.edit_text(f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: *{text}*", parse_mode='Markdown')
            
            # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞
            words = text.lower().split()
            amount = None
            category = "–î—Ä—É–≥–æ–µ"
            description_words = []
            
            for word in words:
                # –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —Å—É–º–º—É
                try:
                    if word.isdigit():
                        potential_amount = int(word)
                        if 1 <= potential_amount <= 100000:
                            amount = potential_amount
                            continue
                except:
                    pass
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                if any(keyword in word for keyword in ['–µ–¥–∞', '–ø—Ä–æ–¥—É–∫—Ç', '–º–∞–≥–∞–∑–∏–Ω']):
                    category = "–ü—Ä–æ–¥—É–∫—Ç—ã"
                elif any(keyword in word for keyword in ['–∫–∞—Ñ–µ', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω', '–∫–æ—Ñ–µ']):
                    category = "–ö–∞—Ñ–µ"
                elif any(keyword in word for keyword in ['—Ç–∞–∫—Å–∏', '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–±–µ–Ω–∑–∏–Ω']):
                    category = "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"
                else:
                    description_words.append(word)
            
            if amount:
                description = ' '.join(description_words) if description_words else "–ì–æ–ª–æ—Å–æ–≤–∞—è —Ç—Ä–∞—Ç–∞"
                
                preview_text = f"""üé§ **–ì–æ–ª–æ—Å–æ–≤–∞—è —Ç—Ä–∞—Ç–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞!**

üí∏ **–°—É–º–º–∞:** {amount} —Ä—É–±
üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {category}"""
                
                if description:
                    preview_text += f"\nüìù **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:** {description}"
                
                await update.message.reply_text(
                    preview_text + "\n\n–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç—É —Ç—Ä–∞—Ç—É?",
                    reply_markup=get_simple_confirmation_keyboard()
                )
                
                context.user_data['pending_voice_expense'] = {
                    'amount': amount, 'category': category, 
                    'description': description, 'text': text
                }
                
            else:
                await update.message.reply_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç—Ä–∞—Ç—É –≤ —Ç–µ–∫—Å—Ç–µ: *{text}*\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é: `500 –ø—Ä–æ–¥—É–∫—Ç—ã`",
                    reply_markup=get_main_keyboard()
                )
                
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(temp_path):
                os.unlink(temp_path)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥.",
            reply_markup=get_main_keyboard()
        )

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö –§–û–¢–û –ß–ï–ö–û–í =====
async def handle_photo_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not TESSERACT_AVAILABLE:
            await update.message.reply_text(
                "‚ùå –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–µ–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Ç—Ä–∞—Ç—É –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º.",
                reply_markup=get_main_keyboard()
            )
            return
        
        user = update.effective_user
        photo = update.message.photo[-1]
        
        processing_msg = await update.message.reply_text("üì∏ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ —á–µ–∫–∞...")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        photo_file = await photo.get_file()
        photo_bytes = await photo_file.download_as_bytearray()
        
        logger.info(f"üì∑ –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ: {len(photo_bytes)} –±–∞–π—Ç")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ–∫
        receipt_data = await process_receipt_photo(photo_bytes)
        
        if receipt_data and receipt_data['total'] > 0:
            category, confidence = classifier.predict_category(receipt_data.get('store', '—á–µ–∫ –ø–æ–∫—É–ø–∫–∞'))
            description = f"–ß–µ–∫ {receipt_data.get('store', '')}".strip()
            
            preview_text = f"""üì∏ **–ß–µ–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω!**

üí∏ **–°—É–º–º–∞:** {receipt_data['total']} —Ä—É–±
üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {category}"""

            await processing_msg.delete()
            await update.message.reply_text(
                preview_text + "\n\n–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞—Ç—É?",
                reply_markup=get_simple_confirmation_keyboard()
            )
            
            context.user_data['pending_receipt_expense'] = {
                'amount': receipt_data['total'],
                'category': category,
                'description': description,
            }
            
        else:
            await processing_msg.delete()
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —á–µ–∫.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫ –±–æ–ª–µ–µ —á–µ—Ç–∫–æ –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é.",
                reply_markup=get_main_keyboard()
            )
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {str(e)}")
        try:
            await processing_msg.delete()
        except:
            pass
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –∏–ª–∏ —Ñ–æ—Ä–º—É.",
            reply_markup=get_main_keyboard()
        )

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø =====
async def handle_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    text = update.message.text
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ–ª–æ—Å–æ–≤—É—é —Ç—Ä–∞—Ç—É
    if context.user_data.get('pending_voice_expense'):
        expense_data = context.user_data['pending_voice_expense']
        
        if text == "‚úÖ –î–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å":
            add_expense(
                user.id, user.first_name, 
                expense_data['amount'], 
                expense_data['category'], 
                expense_data['description']
            )
            
            response = f"""‚úÖ **–ì–æ–ª–æ—Å–æ–≤–∞—è —Ç—Ä–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!**

üíÅ **–ö—Ç–æ:** {user.first_name}
üí∏ **–°—É–º–º–∞:** {expense_data['amount']} —Ä—É–±
üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {expense_data['category']}"""
            
            if expense_data['description']:
                response += f"\nüìù **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:** {expense_data['description']}"
                
            await update.message.reply_text(response, reply_markup=get_main_keyboard())
            context.user_data.pop('pending_voice_expense', None)
            
        elif text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
            await update.message.reply_text(
                "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–π —Ç—Ä–∞—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=get_main_keyboard()
            )
            context.user_data.pop('pending_voice_expense', None)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞—Ç—É –∏–∑ —á–µ–∫–∞
    if context.user_data.get('pending_receipt_expense'):
        expense_data = context.user_data['pending_receipt_expense']
        
        if text == "‚úÖ –î–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å":
            add_expense(
                user.id, user.first_name, 
                expense_data['amount'], 
                expense_data['category'], 
                expense_data['description']
            )
            
            response = f"""‚úÖ **–¢—Ä–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏–∑ —á–µ–∫–∞!**

üíÅ **–ö—Ç–æ:** {user.first_name}
üí∏ **–°—É–º–º–∞:** {expense_data['amount']} —Ä—É–±
üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {expense_data['category']}"""
            
            if expense_data['description']:
                response += f"\nüìù **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:** {expense_data['description']}"
                
            await update.message.reply_text(response, reply_markup=get_main_keyboard())
            context.user_data.pop('pending_receipt_expense', None)
            
        elif text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
            await update.message.reply_text(
                "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=get_main_keyboard()
            )
            context.user_data.pop('pending_receipt_expense', None)
        return

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–ï–ö–°–¢–ê =====
async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text
    
    logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.first_name}: {text}")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
    if text in ["‚úÖ –î–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"]:
        await handle_confirmation(update, context)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if text == "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await show_stats(update, context)
    elif text == "üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü":
        await show_monthly_stats(update, context)
    elif text == "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞—Ç—ã":
        await show_list(update, context)
    elif text == "üìà –í—ã–≥—Ä—É–∑–∏—Ç—å –≤ Excel":
        await export_excel(update, context)
    elif text == "üÜò –ü–æ–º–æ—â—å":
        await show_help(update, context)
    elif text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
        await clear_data(update, context)
    else:
        # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—É—é —Ç—Ä–∞—Ç—É
        try:
            parts = text.split()
            if len(parts) >= 2:
                amount = float(parts[0].replace(',', '.'))
                category = parts[1].lower()
                description = " ".join(parts[2:]) if len(parts) > 2 else ""
                
                add_expense(user.id, user.first_name, amount, category, description)
                
                response = f"""‚úÖ **–¢—Ä–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!**

üíÅ **–ö—Ç–æ:** {user.first_name}
üí∏ **–°—É–º–º–∞:** {amount} —Ä—É–±
üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {category}"""
                
                if description:
                    response += f"\nüìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {description}"
                    
                await update.message.reply_text(response, reply_markup=get_main_keyboard())
                return
        except ValueError:
            pass
        
        # –ï—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–º–æ—â—å
        await show_help(update, context)

# ===== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –î–†–£–ì–ò–ï –§–£–ù–ö–¶–ò–ò =====
async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        conn = get_db_connection()
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if isinstance(conn, sqlite3.Connection):
            df = pd.read_sql_query(f'''
                SELECT category, SUM(amount) as total, COUNT(*) as count 
                FROM expenses 
                WHERE user_id = {user_id}
                GROUP BY category 
                ORDER BY total DESC
            ''', conn)
        else:
            df = pd.read_sql_query(f'''
                SELECT category, SUM(amount) as total, COUNT(*) as count 
                FROM expenses 
                WHERE user_id = {user_id}
                GROUP BY category 
                ORDER BY total DESC
            ''', conn)
        
        if df.empty:
            await update.message.reply_text(
                "üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n"
                "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Ç—Ä–∞—Ç—É! üí∏",
                reply_markup=get_main_keyboard()
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        plt.figure(figsize=(10, 6))
        plt.pie(df['total'], labels=df['category'], autopct='%1.1f%%')
        plt.title('üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        chart_path = 'stats.png'
        plt.savefig(chart_path)
        plt.close()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_spent = df['total'].sum()
        stats_text = f"""üìà **–í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê**

üí∞ **–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ:** {total_spent:,.0f} —Ä—É–±
üìù **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞—Ç:** {df['count'].sum()}

**üìã –î–µ—Ç–∞–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:**
"""
        
        for _, row in df.iterrows():
            percentage = (row['total'] / total_spent) * 100
            stats_text += f"‚Ä¢ {row['category']}: {row['total']:,.0f} —Ä—É–± ({percentage:.1f}%)\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º
        with open(chart_path, 'rb') as chart:
            await update.message.reply_photo(
                photo=chart,
                caption=stats_text,
                parse_mode='Markdown',
                reply_markup=get_main_keyboard()
            )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(chart_path)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}",
            reply_markup=get_main_keyboard()
        )
    finally:
        conn.close()

async def show_monthly_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        conn = get_db_connection()
        user_id = update.effective_user.id
        current_month = datetime.now().strftime('%Y-%m')
        
        if isinstance(conn, sqlite3.Connection):
            df = pd.read_sql_query(f'''
                SELECT category, SUM(amount) as total
                FROM expenses 
                WHERE user_id = {user_id} AND strftime('%Y-%m', date) = '{current_month}'
                GROUP BY category 
                ORDER BY total DESC
            ''', conn)
        else:
            df = pd.read_sql_query(f'''
                SELECT category, SUM(amount) as total
                FROM expenses 
                WHERE user_id = {user_id} AND DATE_TRUNC('month', date) = DATE_TRUNC('month', CURRENT_DATE)
                GROUP BY category 
                ORDER BY total DESC
            ''', conn)
        
        if df.empty:
            await update.message.reply_text(
                f"üìÖ –ó–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞—Ç.\n"
                "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Ç—Ä–∞—Ç—É —ç—Ç–æ–≥–æ –º–µ—Å—è—Ü–∞! üí∏",
                reply_markup=get_main_keyboard()
            )
            return
        
        total_spent = df['total'].sum()
        stats_text = f"""üìÖ **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê –¢–ï–ö–£–©–ò–ô –ú–ï–°–Ø–¶**

üí∞ **–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ:** {total_spent:,.0f} —Ä—É–±

**üìã –¢—Ä–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:**
"""
        
        for _, row in df.iterrows():
            percentage = (row['total'] / total_spent) * 100
            stats_text += f"‚Ä¢ {row['category']}: {row['total']:,.0f} —Ä—É–± ({percentage:.1f}%)\n"
        
        await update.message.reply_text(stats_text, reply_markup=get_main_keyboard())
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–µ—Å—è—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}",
            reply_markup=get_main_keyboard()
        )
    finally:
        conn.close()

async def show_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        conn = get_db_connection()
        user_id = update.effective_user.id
        
        if isinstance(conn, sqlite3.Connection):
            df = pd.read_sql_query(f'''
                SELECT amount, category, description, date
                FROM expenses 
                WHERE user_id = {user_id}
                ORDER BY date DESC 
                LIMIT 10
            ''', conn)
        else:
            df = pd.read_sql_query(f'''
                SELECT amount, category, description, date
                FROM expenses 
                WHERE user_id = {user_id}
                ORDER BY date DESC 
                LIMIT 10
            ''', conn)
        
        if df.empty:
            await update.message.reply_text(
                "üìù –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç—Ä–∞—Ç.\n"
                "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Ç—Ä–∞—Ç—É! üí∏",
                reply_markup=get_main_keyboard()
            )
            return
        
        list_text = "üìù **–ü–û–°–õ–ï–î–ù–ò–ï –¢–†–ê–¢–´**\n\n"
        
        for _, row in df.iterrows():
            date = datetime.strptime(str(row['date']), '%Y-%m-%d %H:%M:%S').strftime('%d.%m %H:%M')
            list_text += f"üí∏ **{row['amount']} —Ä—É–±** - {row['category']}\n"
            
            if row['description']:
                list_text += f"   üìã {row['description']}\n"
            
            list_text += f"   üìÖ {date}\n\n"
        
        await update.message.reply_text(list_text, parse_mode='Markdown', reply_markup=get_main_keyboard())
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞—Ç: {str(e)}")
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞—Ç: {str(e)}",
            reply_markup=get_main_keyboard()
        )
    finally:
        conn.close()

async def export_excel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        conn = get_db_connection()
        user_id = update.effective_user.id
        
        if isinstance(conn, sqlite3.Connection):
            df = pd.read_sql_query(f'''
                SELECT date, amount, category, description
                FROM expenses 
                WHERE user_id = {user_id}
                ORDER BY date DESC
            ''', conn)
        else:
            df = pd.read_sql_query(f'''
                SELECT date, amount, category, description
                FROM expenses 
                WHERE user_id = {user_id}
                ORDER BY date DESC
            ''', conn)
        
        if df.empty:
            await update.message.reply_text(
                "üìà –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏.",
                reply_markup=get_main_keyboard()
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
        excel_path = 'expenses_export.xlsx'
        df.to_excel(excel_path, index=False)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open(excel_path, 'rb') as excel_file:
            await update.message.reply_document(
                document=excel_file,
                filename=f'expenses_export_{datetime.now().strftime("%Y%m%d_%H%M")}.xlsx',
                caption='üìà –í—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç—Ä–∞—Ç–∞–º',
                reply_markup=get_main_keyboard()
            )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(excel_path)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –≤ Excel: {str(e)}")
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}",
            reply_markup=get_main_keyboard()
        )
    finally:
        conn.close()

async def clear_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    
    try:
        conn = get_db_connection()
        
        if isinstance(conn, sqlite3.Connection):
            c = conn.cursor()
            c.execute('DELETE FROM expenses WHERE user_id = ?', (user.id,))
        else:
            c = conn.cursor()
            c.execute('DELETE FROM expenses WHERE user_id = %s', (user.id,))
        
        conn.commit()
        conn.close()
        
        await update.message.reply_text(
            "‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã!\n"
            "–ù–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞ üéØ",
            reply_markup=get_main_keyboard()
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}",
            reply_markup=get_main_keyboard()
        )

async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
üÜò **–ü–û–ú–û–©–¨ –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ**

üí∏ **–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É:**
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É —Å —Ñ–æ—Ä–º–æ–π - —É–¥–æ–±–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
‚Ä¢ –ò–ª–∏ –ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º: `500 –ø—Ä–æ–¥—É–∫—Ç—ã` –∏–ª–∏ `1500 –∫–∞—Ñ–µ –æ–±–µ–¥`

üé§ **–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç—Ä–∞—Ç—ã
‚Ä¢ –ü—Ä–∏–º–µ—Ä: "500 –ø—Ä–æ–¥—É–∫—Ç—ã —Ö–ª–µ–± –º–æ–ª–æ–∫–æ"

üì∏ **–§–æ—Ç–æ —á–µ–∫–æ–≤:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** - –ø–æ–ª–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∞ –≤—Å–µ—Ö —Ç—Ä–∞—Ç
‚Ä¢ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü** - –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
‚Ä¢ **–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞—Ç—ã** - –∏—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π

üìà **Excel** - –ø–æ–ª–Ω–∞—è –≤—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö

üóëÔ∏è **–û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ** - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –≤–∞—à–∏ —Ç—Ä–∞—Ç—ã

**üí° –°–æ–≤–µ—Ç—ã:**
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–µ–¥–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞
"""
    await update.message.reply_text(help_text, reply_markup=get_main_keyboard())

# ===== –ó–ê–ü–£–°–ö –ë–û–¢–ê =====
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    BOT_TOKEN = os.environ.get('BOT_TOKEN', '7911885739:AAGrMekWmLgz_ej8JDFqG-CbDA5Nie7vKFc')
    
    if not BOT_TOKEN:
        logger.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_web_app_data))
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("clear", clear_data))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo_message))
    application.add_handler(MessageHandler(filters.VOICE, handle_voice_message))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    port = int(os.environ.get('PORT', 8443))
    
    if 'RAILWAY_STATIC_URL' in os.environ or 'HEROKU_APP_NAME' in os.environ:
        # Production - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ–±—Ö—É–∫–∏
        webhook_url = os.environ.get('WEBHOOK_URL', '')
        if webhook_url:
            application.run_webhook(
                listen="0.0.0.0",
                port=port,
                url_path=BOT_TOKEN,
                webhook_url=f"{webhook_url}/{BOT_TOKEN}"
            )
        else:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling (production)")
            application.run_polling()
    else:
        # Development - polling
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling (development)")
        application.run_polling()

if __name__ == "__main__":
    main()