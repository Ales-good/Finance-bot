import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, WebAppInfo
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import os
from bot import get_db_connection, ensure_user_has_personal_space, add_expense, create_personal_space
import pandas as pd
from datetime import datetime

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
bot_application = None

def get_main_keyboard():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ WebApp"""
    web_app_url = os.environ.get('RAILWAY_STATIC_URL', 'https://your-app.railway.app')
    
    keyboard = [
        [KeyboardButton("üí∏ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=web_app_url))],
        [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞—Ç—ã")],
        [KeyboardButton("üÜò –ü–æ–º–æ—â—å"), KeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")]
    ]
    
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ª–∏—á–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
    ensure_user_has_personal_space(user.id, user.first_name)
    
    welcome_text = f"""
–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤ üí∞ —Å **–ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–º Web-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º**!

üöÄ **–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ üí∏ **–£–¥–æ–±–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ç** —á–µ—Ä–µ–∑ Web-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
‚Ä¢ üè† **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞–º–∏** - –ª–∏—á–Ω—ã–µ, —Å–µ–º–µ–π–Ω—ã–µ, –ø—É–±–ª–∏—á–Ω—ã–µ
‚Ä¢ üë• **–°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –±—é–¥–∂–µ—Ç—ã** —Å –¥—Ä—É–∑—å—è–º–∏ –∏ —Å–µ–º—å–µ–π  
‚Ä¢ üìä **–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞** —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏

üí° **–ù–∞–∂–º–∏—Ç–µ ¬´üí∏ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ¬ª –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º!**

üì± **–ë—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥ —á–µ—Ä–µ–∑ –±–æ—Ç–∞:**
‚Ä¢ –¢–µ–∫—Å—Ç–æ–º: `500 –ø—Ä–æ–¥—É–∫—Ç—ã` –∏–ª–∏ `1500 –∫–∞—Ñ–µ –æ–±–µ–¥`
"""
    
    await update.message.reply_text(welcome_text, reply_markup=get_main_keyboard())

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞"""
    try:
        user = update.effective_user
        space_id = ensure_user_has_personal_space(user.id, user.first_name)
        
        conn = get_db_connection()
        
        if isinstance(conn, conn.__class__.__name__ == 'sqlite3.Connection'):
            df = pd.read_sql_query(
                'SELECT category, SUM(amount) as total FROM expenses WHERE user_id = ? AND space_id = ? GROUP BY category ORDER BY total DESC LIMIT 5',
                conn, params=(user.id, space_id)
            )
        else:
            df = pd.read_sql_query(
                'SELECT category, SUM(amount) as total FROM expenses WHERE user_id = %s AND space_id = %s GROUP BY category ORDER BY total DESC LIMIT 5',
                conn, params=(user.id, space_id)
            )
        
        conn.close()
        
        if df.empty:
            await update.message.reply_text(
                "üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n\n"
                "üí° –û—Ç–∫—Ä–æ–π—Ç–µ Web-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏!",
                reply_markup=get_main_keyboard()
            )
            return
        
        total_spent = df['total'].sum()
        stats_text = f"üìä **–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\nüí∞ **–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ:** {total_spent:,.0f} —Ä—É–±\n\n**–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:**\n"
        
        for _, row in df.iterrows():
            percentage = (row['total'] / total_spent) * 100
            stats_text += f"‚Ä¢ {row['category']}: {row['total']:,.0f} —Ä—É–± ({percentage:.1f}%)\n"
        
        stats_text += "\nüí° **–î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ Web-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!**"
        
        await update.message.reply_text(stats_text, reply_markup=get_main_keyboard())
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å Web-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.",
            reply_markup=get_main_keyboard()
        )

async def show_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞—Ç—ã"""
    try:
        user = update.effective_user
        space_id = ensure_user_has_personal_space(user.id, user.first_name)
        
        conn = get_db_connection()
        
        if isinstance(conn, conn.__class__.__name__ == 'sqlite3.Connection'):
            df = pd.read_sql_query(
                'SELECT amount, category, description, date FROM expenses WHERE user_id = ? AND space_id = ? ORDER BY date DESC LIMIT 5',
                conn, params=(user.id, space_id)
            )
        else:
            df = pd.read_sql_query(
                'SELECT amount, category, description, date FROM expenses WHERE user_id = %s AND space_id = %s ORDER BY date DESC LIMIT 5',
                conn, params=(user.id, space_id)
            )
        
        conn.close()
        
        if df.empty:
            await update.message.reply_text(
                "üìù –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç—Ä–∞—Ç.\n\n"
                "üí° –û—Ç–∫—Ä–æ–π—Ç–µ Web-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è!",
                reply_markup=get_main_keyboard()
            )
            return
        
        list_text = "üìù **–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞—Ç—ã:**\n\n"
        
        for _, row in df.iterrows():
            date = datetime.strptime(str(row['date']), '%Y-%m-%d %H:%M:%S').strftime('%d.%m %H:%M')
            list_text += f"üí∏ **{row['amount']} —Ä—É–±** - {row['category']}\n"
            
            if row['description']:
                list_text += f"   üìã {row['description']}\n"
            
            list_text += f"   üìÖ {date}\n\n"
        
        list_text += "üí° **–û—Ç–∫—Ä–æ–π—Ç–µ Web-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏!**"
        
        await update.message.reply_text(list_text, parse_mode='Markdown', reply_markup=get_main_keyboard())
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞—Ç: {str(e)}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞—Ç.",
            reply_markup=get_main_keyboard()
        )

async def clear_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.effective_user
    
    try:
        conn = get_db_connection()
        
        if isinstance(conn, conn.__class__.__name__ == 'sqlite3.Connection'):
            c = conn.cursor()
            c.execute('DELETE FROM expenses WHERE user_id = ?', (user.id,))
        else:
            c = conn.cursor()
            c.execute('DELETE FROM expenses WHERE user_id = %s', (user.id,))
        
        conn.commit()
        conn.close()
        
        await update.message.reply_text(
            "‚úÖ –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã!\n"
            "–ù–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞ üéØ",
            reply_markup=get_main_keyboard()
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}",
            reply_markup=get_main_keyboard()
        )

async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
üÜò **–ü–û–ú–û–©–¨**

üí° **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ **üí∏ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ** - –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π Web-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
‚Ä¢ **üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** - –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —á–∞—Ç–µ
‚Ä¢ **üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞—Ç—ã** - –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π

üöÄ **–ß—Ç–æ –º–æ–∂–Ω–æ –≤ Web-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:**
‚Ä¢ –£–¥–æ–±–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ç —Å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞–º–∏ (–ª–∏—á–Ω—ã–µ, —Å–µ–º–µ–π–Ω—ã–µ, –ø—É–±–ª–∏—á–Ω—ã–µ)
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø—ã
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ

üéØ **–ë—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥ —á–µ—Ä–µ–∑ –±–æ—Ç–∞:**
‚Ä¢ –¢–µ–∫—Å—Ç–æ–º: `500 –ø—Ä–æ–¥—É–∫—Ç—ã` –∏–ª–∏ `1500 –∫–∞—Ñ–µ –æ–±–µ–¥`

üí¨ **–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è!**
"""
    await update.message.reply_text(help_text, reply_markup=get_main_keyboard())

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = update.effective_user
    text = update.message.text
    
    logger.info(f"üì® –¢–µ–∫—Å—Ç –æ—Ç {user.first_name}: {text}")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await show_stats(update, context)
    elif text == "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞—Ç—ã":
        await show_list(update, context)
    elif text == "üÜò –ü–æ–º–æ—â—å":
        await show_help(update, context)
    elif text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
        await clear_data(update, context)
    else:
        # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—É—é —Ç—Ä–∞—Ç—É
        try:
            parts = text.split()
            if len(parts) >= 2:
                amount = float(parts[0].replace(',', '.'))
                category = parts[1].lower()
                description = " ".join(parts[2:]) if len(parts) > 2 else ""
                
                space_id = ensure_user_has_personal_space(user.id, user.first_name)
                add_expense(user.id, user.first_name, amount, category, description, space_id)
                
                response = f"""‚úÖ **–¢—Ä–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!**

üíÅ **–ö—Ç–æ:** {user.first_name}
üí∏ **–°—É–º–º–∞:** {amount} —Ä—É–±
üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {category}"""
                
                if description:
                    response += f"\nüìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {description}"
                    
                await update.message.reply_text(response, reply_markup=get_main_keyboard())
                return
        except ValueError:
            pass
        
        # –ï—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–º–æ—â—å
        await show_help(update, context)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"‚ùå –û—à–∏–±–∫–∞: {context.error}", exc_info=context.error)

def setup_bot():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    global bot_application
    
    bot_token = os.environ.get('TELEGRAM_BOT_TOKEN')
    if not bot_token:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return None
    
    try:
        application = Application.builder().token(bot_token).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
        application.add_error_handler(error_handler)
        
        bot_application = application
        logger.info("‚úÖ –ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É")
        return application
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞: {e}")
        return None

def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = setup_bot()
    if application:
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
        application.run_polling()
    else:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")